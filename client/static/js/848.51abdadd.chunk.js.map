{"version":3,"file":"static/js/848.51abdadd.chunk.js","mappings":"ySAwBA,MAAMA,EAA0B,CAC5BC,QAAS,GACTC,YAAa,GACbC,UAAW,QAGA,SAASC,EAAUC,GAQ9B,IAR+B,QAC/BC,EAAO,KACPC,EAAI,QACJC,GAKHH,EACG,MAAOI,GAAiBC,MAAOC,KAAcC,EAAAA,EAAAA,GAAaC,EAAAA,GAAiB,CACvEC,YAAa,cAGVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAoBjB,IAC7CkB,EAAWC,IAAgBF,EAAAA,EAAAA,UAAgBG,IAAM,IAAIC,QAEtD,QAAEpB,EAAO,YAAEC,EAAW,UAAEC,GAAcY,GAErCO,GAAeZ,MAAOa,KAAiBC,EAAAA,EAAAA,GAAYC,EAAAA,KACnDC,GAAehB,MAAOiB,KAAiBH,EAAAA,EAAAA,GAAYI,EAAAA,KAE1DC,EAAAA,EAAAA,YAAU,KACFvB,EACAG,EAAc,CAAEqB,UAAW,CAAEC,GAAIzB,KAAa0B,MAAKC,IAAe,IAAd,KAAEC,GAAMD,EACpDC,IACAlB,EAAY,CACRf,QAASiC,EAAKC,aAAalC,QAC3BC,YAAagC,EAAKC,aAAajC,YAC/BC,UAAW+B,EAAKC,aAAahC,YAGjCgB,EAAaC,IAAM,IAAIC,KAAKa,EAAKC,aAAaC,QAClD,KAGJpB,EAAYhB,GACZmB,EAAaC,IAAM,IAAIC,OAC3B,GACD,CAACf,EAASG,IAEb,MAAM4B,EAAoBC,IACtBtB,EAAY,IACRD,EACA,CAACuB,EAAEC,OAAOC,MAAOF,EAAEC,OAAOE,OAC5B,EAuCN,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACvC,KAAMA,EAAMC,QAASA,EAASuC,SAAS,KAAKC,WAAS,EAAAJ,UACzDF,EAAAA,EAAAA,MAAA,QAAMO,SAlCOC,UACjBZ,EAAEa,iBAEE7C,QACMoB,EAAY,CACdI,UAAW,CACPC,GAAIzB,EACJL,UACAC,cACAkC,KAAMlB,EAAUkC,cAChBjD,UAAWA,WAIbmB,EAAY,CACdQ,UAAW,CACP7B,UACAC,cACAkC,KAAMlB,EAAUkC,cAChBjD,UAAWA,KAMvBa,EAAYhB,GACZmB,EAAaC,IAAM,IAAIC,OAEvBb,GAAS,EAMwBoC,SAAA,EAC7BC,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CAAAT,SAAEtC,EAAU,aAAe,kBACvCuC,EAAAA,EAAAA,KAACS,EAAAA,EAAa,CAAAV,UACVF,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,GAAI,CAAEC,GAAI,GAAIf,SAAA,EACtCC,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAGjB,UACdC,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACNtB,KAAK,UACLuB,MAAM,aACNC,QAAQ,WACRvB,MAAOxC,EACPgE,SAAU5B,EACVW,WAAS,EACTkB,UAAQ,OAIhBrB,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAGjB,UACdC,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACNtB,KAAK,cACLuB,MAAM,cACNC,QAAQ,WACRvB,MAAOvC,EACP+D,SAAU5B,EACVW,WAAS,EACTkB,UAAQ,OAIhBrB,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAGC,GAAI,EAAExB,UAC5BC,EAAAA,EAAAA,KAACwB,EAAAA,GAAU,CACPN,MAAM,aACNtB,MAAOvB,EACP+C,SAvEEK,IACjBA,GACLnD,EAAamD,EAAS,OAyEVzB,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAGC,GAAI,EAAExB,UAC5BF,EAAAA,EAAAA,MAACoB,EAAAA,EAAS,CACNtB,KAAK,YACL+B,QAAM,EACNR,MAAM,YACNC,QAAQ,WACRvB,MAAOtC,EACP8D,SAAU5B,EACV6B,UAAQ,EACRlB,WAAS,EAAAJ,SAAA,EAETC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAAC/B,MAAM,OAAMG,SAAC,UAGvBC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAAC/B,MAAM,SAAQG,SAAC,YAGzBC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAAC/B,MAAM,UAASG,SAAC,aAG1BC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAAC/B,MAAM,YAAWG,SAAC,eAG5BC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAAC/B,MAAM,SAAQG,SAAC,sBAQzCC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAa,CAAA7B,UACVF,EAAAA,EAAAA,MAACgC,EAAAA,EAAK,CAACC,UAAU,MAAMlB,QAAS,EAAEb,SAAA,EAC9BC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACC,QAASrE,EAASsE,MAAM,UAASlC,SAAC,YAG1CC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACZ,QAAQ,YAAYc,MAAM,UAAUC,KAAK,SAAQnC,SAAC,oBAQtEC,EAAAA,EAAAA,KAACmC,EAAAA,GAAQ,CACLC,SAAS,QACTC,SAAoB,OAAX3D,QAAW,IAAXA,OAAW,EAAXA,EAAa2D,WAAmB,OAARvE,QAAQ,IAARA,OAAQ,EAARA,EAAUuE,WAAsB,OAAXvD,QAAW,IAAXA,OAAW,EAAXA,EAAauD,aAK/E,C,oJCvMA,MAAMC,EAAY,CAAC,YAAa,MAoB1BC,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAY,CACzC9C,KAAM,iBACN+C,KAAM,OACNC,kBAAmBA,CAACC,EAAOC,IAAWA,EAAOC,MAHvBN,CAIrB,CACDO,QAAS,YACTC,KAAM,aAoDR,EAlDiCC,EAAAA,YAAiB,SAAqBC,EAASC,GAC9E,MAAMP,GAAQQ,EAAAA,EAAAA,GAAc,CAC1BR,MAAOM,EACPvD,KAAM,oBAEF,UACF0D,EACAnE,GAAIoE,GACFV,EACJW,GAAQC,EAAAA,EAAAA,GAA8BZ,EAAON,GACzCmB,EAAab,EACbc,EA5BkBD,KACxB,MAAM,QACJC,GACED,EAIJ,OAAOE,EAAAA,EAAAA,GAHO,CACZb,KAAM,CAAC,SAEoBc,EAAAA,EAA4BF,EAAQ,EAqBjDG,CAAkBJ,IAC5B,QACJK,EAAUR,GACRL,EAAAA,WAAiBc,EAAAA,GACrB,OAAoB/D,EAAAA,EAAAA,KAAKuC,GAAiByB,EAAAA,EAAAA,GAAS,CACjDC,UAAW,KACXZ,WAAWa,EAAAA,EAAAA,GAAKR,EAAQZ,KAAMO,GAC9BI,WAAYA,EACZN,IAAKA,EACLhC,QAAS,KACTjC,GAAc,MAAVoE,EAAiBA,EAASQ,GAC7BP,GACL,G","sources":["sections/calendar/form-dialog/index.tsx","../node_modules/@mui/material/DialogTitle/DialogTitle.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { DatePicker, Snackbar } from '../../../components';\r\nimport { CREATE_EVENT, GET_EVENT_BY_ID, UPDATE_EVENT } from '../../../graphql/reports';\r\nimport { useLazyQuery, useMutation } from '@apollo/client';\r\nimport { Frequency } from '../../../__generated__/graphql';\r\n\r\ninterface EventForm {\r\n    subject: string;\r\n    description: string;\r\n    frequency: \"NONE\" | \"WEEKLY\" | \"QUARTERLY\" | \"MONTHLY\" | \"YEARLY\";\r\n}\r\n\r\nconst formDefaults: EventForm = {\r\n    subject: '',\r\n    description: '',\r\n    frequency: \"NONE\"\r\n}\r\n\r\nexport default function FormDialog({\r\n    eventId,\r\n    open,\r\n    onClose\r\n}: {\r\n    eventId?: number | null,\r\n    open: boolean,\r\n    onClose: () => void\r\n}) {\r\n    const [getReportById, { error: getError }] = useLazyQuery(GET_EVENT_BY_ID, {\r\n        fetchPolicy: 'no-cache'\r\n    }); \r\n\r\n    const [formData, setFormData] = useState<EventForm>(formDefaults);\r\n    const [eventDate, setEventDate] = useState<Dayjs>(dayjs(new Date()));\r\n\r\n    const { subject, description, frequency } = formData;\r\n\r\n    const [createEvent, { error: createError }] = useMutation(CREATE_EVENT);\r\n    const [updateEvent, { error: updateError }] = useMutation(UPDATE_EVENT);\r\n\r\n    useEffect(() => {\r\n        if (eventId) {\r\n            getReportById({ variables: { id: eventId } }).then(({ data }) => {\r\n                if (data) {\r\n                    setFormData({\r\n                        subject: data.getEventById.subject,\r\n                        description: data.getEventById.description,\r\n                        frequency: data.getEventById.frequency\r\n                    });\r\n\r\n                    setEventDate(dayjs(new Date(data.getEventById.date)));\r\n                }\r\n            });\r\n        } else {\r\n            setFormData(formDefaults);\r\n            setEventDate(dayjs(new Date()));\r\n        }\r\n    }, [eventId, getReportById])\r\n\r\n    const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({\r\n         ...formData,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    const handleDateChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setEventDate(newValue);\r\n    }\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (eventId) {\r\n            await updateEvent({\r\n                variables: {\r\n                    id: eventId,\r\n                    subject,\r\n                    description,\r\n                    date: eventDate.toISOString(),\r\n                    frequency: frequency as Frequency\r\n                }\r\n            });\r\n        } else {\r\n            await createEvent({\r\n                variables: {\r\n                    subject,\r\n                    description,\r\n                    date: eventDate.toISOString(),\r\n                    frequency: frequency as Frequency\r\n                }\r\n            });\r\n        }\r\n\r\n        // reset form\r\n        setFormData(formDefaults);\r\n        setEventDate(dayjs(new Date()));\r\n\r\n        onClose(); // close dialog\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Dialog open={open} onClose={onClose} maxWidth='sm' fullWidth>\r\n            <form onSubmit={handleSubmit}>\r\n            <DialogTitle>{eventId ? \"Edit Event\" : \"Create Event\"}</DialogTitle>\r\n            <DialogContent>\r\n                <Grid container spacing={3} sx={{ pt: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                            name='subject'\r\n                            label='Event Name'\r\n                            variant='outlined'\r\n                            value={subject}\r\n                            onChange={handleFormChange}\r\n                            fullWidth\r\n                            required\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                            name='description'\r\n                            label='Description'\r\n                            variant='outlined'\r\n                            value={description}\r\n                            onChange={handleFormChange}\r\n                            fullWidth\r\n                            required\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <DatePicker \r\n                            label='Event Date'\r\n                            value={eventDate}\r\n                            onChange={handleDateChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <TextField\r\n                            name='frequency'\r\n                            select\r\n                            label=\"Frequency\"\r\n                            variant='outlined'\r\n                            value={frequency}\r\n                            onChange={handleFormChange}\r\n                            required\r\n                            fullWidth\r\n                        >\r\n                            <MenuItem value=\"NONE\">\r\n                                None\r\n                            </MenuItem>\r\n                            <MenuItem value=\"WEEKLY\">\r\n                                Weekly\r\n                            </MenuItem>\r\n                            <MenuItem value=\"MONTHLY\">\r\n                                Monthly\r\n                            </MenuItem>\r\n                            <MenuItem value=\"QUARTERLY\">\r\n                                Quarterly\r\n                            </MenuItem>\r\n                            <MenuItem value=\"YEARLY\">\r\n                                Yearly\r\n                            </MenuItem>\r\n                        </TextField>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Stack direction='row' spacing={2}>\r\n                    <Button onClick={onClose} color='inherit'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant='contained' color='inherit' type='submit'>\r\n                        Save\r\n                    </Button>\r\n                </Stack>\r\n            </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={createError?.message || getError?.message || updateError?.message} \r\n        />\r\n\r\n        </>\r\n    );\r\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;"],"names":["formDefaults","subject","description","frequency","FormDialog","_ref","eventId","open","onClose","getReportById","error","getError","useLazyQuery","GET_EVENT_BY_ID","fetchPolicy","formData","setFormData","useState","eventDate","setEventDate","dayjs","Date","createEvent","createError","useMutation","CREATE_EVENT","updateEvent","updateError","UPDATE_EVENT","useEffect","variables","id","then","_ref2","data","getEventById","date","handleFormChange","e","target","name","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","toISOString","DialogTitle","DialogContent","Grid","container","spacing","sx","pt","item","xs","TextField","label","variant","onChange","required","sm","md","DatePicker","newValue","select","MenuItem","DialogActions","Stack","direction","Button","onClick","color","type","Snackbar","severity","message","_excluded","DialogTitleRoot","styled","Typography","slot","overridesResolver","props","styles","root","padding","flex","React","inProps","ref","useThemeProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","titleId","DialogContext","_extends","component","clsx"],"sourceRoot":""}