{"version":3,"file":"static/js/848.c127ad05.chunk.js","mappings":"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","sources":["sections/calendar/form-dialog/index.tsx","../node_modules/@mui/material/DialogTitle/DialogTitle.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Grid from '@mui/material/Grid';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport axios from 'axios';\r\nimport { DatePicker, Snackbar, Iconify, MultiSelect } from '../../../components';\r\nimport { CREATE_EVENT, CREATE_SUBMISSION, GET_EVENT_BY_ID, GET_REPORTS, UPDATE_EVENT } from '../../../graphql/reports';\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\n\r\n// types\r\nimport { Frequency, Role } from '../../../__generated__/graphql';\r\nimport { Uploads } from '../../documents/document-dialog/CommentField';\r\nimport { GET_OFFICES } from '../../../graphql/users';\r\n\r\ninterface EventForm {\r\n    reportId: string;\r\n    subject: string;\r\n    image?: string | null;\r\n    description: string;\r\n    frequency: \"NONE\" | \"MONTHLY\" | \"YEARLY\" | \"QUARTERLY\" | \"SEMESTRAL\";\r\n}\r\n\r\nconst formDefaults: EventForm = {\r\n    reportId: '',\r\n    subject: '',\r\n    image: '',\r\n    description: '',\r\n    frequency: \"NONE\"\r\n}\r\n\r\nexport default function FormDialog({\r\n    eventId,\r\n    selectedDate,\r\n    open,\r\n    onClose,\r\n    role,\r\n    officeId\r\n}: {\r\n    eventId?: number | null,\r\n    selectedDate: Date,\r\n    open: boolean,\r\n    onClose: () => void,\r\n    role?: Role,\r\n    officeId?: string\r\n}) {\r\n    const { data: reports, error: reportError } = useQuery(GET_REPORTS);\r\n    const { data: offices, error: officeError } = useQuery(GET_OFFICES, {\r\n        fetchPolicy: \"no-cache\",\r\n    });\r\n    const [getEventById, { error: getError }] = useLazyQuery(GET_EVENT_BY_ID, {\r\n        fetchPolicy: 'no-cache'\r\n    }); \r\n\r\n    const [image, setImage] = useState<File | null>(null);\r\n    const [formData, setFormData] = useState<EventForm>(formDefaults);\r\n    const [scope, setScope] = useState<number[]>([]);\r\n    const [eventDate, setEventDate] = useState<Dayjs>(dayjs(selectedDate));\r\n    const [localDeadline, setLocalDeadline] = useState<Dayjs>(dayjs(selectedDate));\r\n    const [nationalDeadline, setNationalDeadline] = useState<Dayjs>(dayjs(selectedDate));\r\n\r\n    const { subject, description, frequency, reportId } = formData;\r\n\r\n    const [createEvent, { error: createError }] = useMutation(CREATE_EVENT);\r\n    const [updateEvent, { error: updateError }] = useMutation(UPDATE_EVENT);\r\n\r\n    const [createSubmission, { error: submitError }] = useMutation(CREATE_SUBMISSION);\r\n\r\n    useEffect(() => {\r\n        if (eventId) {\r\n            getEventById({ variables: { id: eventId } }).then(({ data }) => {\r\n                if (data) {\r\n                    setFormData({\r\n                        subject: data.getEventById.subject,\r\n                        description: data.getEventById.description,\r\n                        frequency: data.getEventById.frequency,\r\n                        image: data.getEventById.image,\r\n                        reportId: ''\r\n                    });\r\n\r\n                    setEventDate(dayjs(new Date(data.getEventById.date)));\r\n                }\r\n            });\r\n        } else {\r\n            setFormData(formDefaults);\r\n            setEventDate(dayjs(new Date()));\r\n        }\r\n    }, [eventId, getEventById]);\r\n\r\n    useEffect(() => {\r\n        setEventDate(dayjs(selectedDate));\r\n        setLocalDeadline(dayjs(selectedDate));\r\n        setNationalDeadline(dayjs(selectedDate));\r\n    }, [selectedDate])\r\n\r\n    const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({\r\n         ...formData,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) setImage(e.target.files[0]);\r\n    };\r\n\r\n    const handleDateChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setEventDate(newValue);\r\n    };\r\n\r\n    const handleScopeChange = (selected: number[]) => {\r\n        setScope(selected);\r\n    };\r\n\r\n    const handleLocalDeadlineChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setLocalDeadline(newValue);\r\n    };\r\n\r\n    const handleNationalDeadlineChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setNationalDeadline(newValue);\r\n    };\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (!role || !offices || !officeId) return;\r\n\r\n        let viewers: number[] = [];\r\n\r\n        if (role === Role.Director) {\r\n            if (scope.length > 0) viewers = scope;\r\n            else viewers = offices.getOffices.map(office => parseInt(office.id));\r\n        } else {\r\n            viewers = [parseInt(officeId)];\r\n        }\r\n\r\n        if (reportId) {\r\n            await createSubmission({\r\n                variables: {\r\n                    reportId: parseInt(reportId),\r\n                    localDue: localDeadline.toISOString(),\r\n                    nationalDue: nationalDeadline.toISOString()\r\n                }\r\n            })\r\n        } else {\r\n            let imageUrl: string | null = null;\r\n            if (image) {\r\n                const form = new FormData();\r\n                form.append(\"files\", image);\r\n\r\n                const response = await axios.post(process.env.REACT_APP_UPLOAD_URL as string, form);\r\n                \r\n                if (response.data) {\r\n                    const uploaded: Uploads[] = response.data.files;\r\n                    imageUrl = uploaded[0].fileUrl;\r\n                }\r\n            }\r\n\r\n            if (eventId) {\r\n                await updateEvent({\r\n                    variables: {\r\n                        id: eventId,\r\n                        subject,\r\n                        description,\r\n                        image: imageUrl,\r\n                        date: eventDate.toISOString(),\r\n                        frequency: frequency as Frequency,\r\n                        scope: viewers\r\n                    }\r\n                });\r\n            } else {\r\n                await createEvent({\r\n                    variables: {\r\n                        subject,\r\n                        description,\r\n                        image: imageUrl,\r\n                        date: eventDate.toISOString(),\r\n                        frequency: frequency as Frequency,\r\n                        scope: viewers\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        // reset form\r\n        setFormData(formDefaults);\r\n        setEventDate(dayjs(new Date(selectedDate)));\r\n        setLocalDeadline(dayjs(new Date(selectedDate)));\r\n        setNationalDeadline(dayjs(new Date(selectedDate)));\r\n\r\n        onClose(); // close dialog\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <Dialog open={open} onClose={onClose} maxWidth='sm' fullWidth>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n            {eventId ? (\r\n                <DialogTitle>Edit Event</DialogTitle>\r\n            ) : (\r\n                <Divider sx={{ pt: 2 }}>ADD EVENT</Divider>\r\n            )}\r\n            \r\n            <DialogContent>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                            name='subject'\r\n                            label='Event Name'\r\n                            variant='outlined'\r\n                            value={subject}\r\n                            onChange={handleFormChange}\r\n                            fullWidth\r\n                            required={!reportId}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                            name='description'\r\n                            label='Description'\r\n                            variant='outlined'\r\n                            value={description}\r\n                            onChange={handleFormChange}\r\n                            fullWidth\r\n                            required={!reportId}\r\n                            helperText={image?.name || formData.image}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <Tooltip title='Attach Image'>\r\n                                            <IconButton component='label' edge=\"end\">\r\n                                                <Iconify icon='tdesign:image-add' />\r\n\r\n                                                <input \r\n                                                    type='file' \r\n                                                    accept=\"image/*\" \r\n                                                    onChange={handleFileChange} \r\n                                                    hidden \r\n                                                />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <DatePicker \r\n                            label='Event Date'\r\n                            value={eventDate}\r\n                            onChange={handleDateChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <TextField\r\n                            name='frequency'\r\n                            select\r\n                            label=\"Frequency\"\r\n                            variant='outlined'\r\n                            value={frequency}\r\n                            onChange={handleFormChange}\r\n                            required={!reportId}\r\n                            fullWidth\r\n                        >\r\n                            <MenuItem value=\"NONE\">\r\n                                None\r\n                            </MenuItem>\r\n                            <MenuItem value=\"MONTHLY\">\r\n                                Monthly\r\n                            </MenuItem>\r\n                            <MenuItem value=\"QUARTERLY\">\r\n                                Quarterly\r\n                            </MenuItem>\r\n                            <MenuItem value=\"SEMESTRAL\">\r\n                                Semestral\r\n                            </MenuItem>\r\n                            <MenuItem value=\"YEARLY\">\r\n                                Yearly\r\n                            </MenuItem>\r\n                        </TextField>\r\n                    </Grid>\r\n                    \r\n                    {(offices && role === Role.Director) && (\r\n                        <Grid item xs={12}>\r\n                            <MultiSelect\r\n                                name=\"scope\"\r\n                                label=\"Show To (Optional)\"\r\n                                selected={scope}\r\n                                options={offices.getOffices.map((office) => ({\r\n                                    id: parseInt(office.id),\r\n                                    label: office.name,\r\n                                }))}\r\n                                onChange={handleScopeChange}\r\n                                required={false}\r\n                            />\r\n                        </Grid>\r\n                    )}\r\n\r\n                </Grid>\r\n\r\n                {!eventId && (\r\n                    <>\r\n                    <Divider sx={{ py: 2 }}>OR ADD REPORT</Divider>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                name='reportId'\r\n                                select\r\n                                label=\"Report\"\r\n                                variant='outlined'\r\n                                value={reportId}\r\n                                onChange={handleFormChange}\r\n                                required={!!reportId}\r\n                                fullWidth\r\n                            >   \r\n                                {reports && reports.getReports.map(report => (\r\n                                    <MenuItem key={report.id} value={report.id}>\r\n                                        {report.name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={6} md={6}>\r\n                            <DatePicker \r\n                                label='Regional Deadline'\r\n                                value={localDeadline}\r\n                                onChange={handleLocalDeadlineChange}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={6} md={6}>\r\n                            <DatePicker \r\n                                label='National Deadline'\r\n                                value={nationalDeadline}\r\n                                onChange={handleNationalDeadlineChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    </>\r\n                )}\r\n\r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Stack direction='row' spacing={2}>\r\n                    <Button onClick={onClose} color='inherit'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant='contained' color='inherit' type='submit'>\r\n                        Save\r\n                    </Button>\r\n                </Stack>\r\n            </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={createError?.message || getError?.message || updateError?.message \r\n                || reportError?.message || submitError?.message || officeError?.message} \r\n        />\r\n\r\n        </>\r\n    );\r\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;"],"names":["formDefaults","reportId","subject","image","description","frequency","FormDialog","_ref","eventId","selectedDate","open","onClose","role","officeId","data","reports","error","reportError","useQuery","GET_REPORTS","offices","officeError","GET_OFFICES","fetchPolicy","getEventById","getError","useLazyQuery","GET_EVENT_BY_ID","setImage","useState","formData","setFormData","scope","setScope","eventDate","setEventDate","dayjs","localDeadline","setLocalDeadline","nationalDeadline","setNationalDeadline","createEvent","createError","useMutation","CREATE_EVENT","updateEvent","updateError","UPDATE_EVENT","createSubmission","submitError","CREATE_SUBMISSION","useEffect","variables","id","then","_ref2","Date","date","handleFormChange","e","target","name","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","viewers","Role","Director","length","getOffices","map","office","parseInt","localDue","toISOString","nationalDue","imageUrl","form","FormData","append","response","axios","post","process","files","fileUrl","DialogTitle","Divider","sx","pt","DialogContent","Grid","container","spacing","item","xs","TextField","label","variant","onChange","required","helperText","InputProps","endAdornment","InputAdornment","position","Tooltip","title","IconButton","component","edge","Iconify","icon","type","accept","hidden","sm","md","DatePicker","newValue","select","MenuItem","MultiSelect","selected","options","py","getReports","report","DialogActions","Stack","direction","Button","onClick","color","Snackbar","severity","message","_excluded","DialogTitleRoot","styled","Typography","slot","overridesResolver","props","styles","root","padding","flex","React","inProps","ref","useDefaultProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","titleId","DialogContext","_extends","clsx"],"sourceRoot":""}