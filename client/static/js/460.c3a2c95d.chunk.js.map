{"version":3,"file":"static/js/460.c3a2c95d.chunk.js","mappings":"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","sources":["sections/accounts/form-dialog/index.tsx","../node_modules/@mui/material/DialogTitle/DialogTitle.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { Iconify, Snackbar } from '../../../components';\r\n\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport { CREATE_OFFICER, GET_OFFICER_BY_ID, GET_OFFICES, GET_POSITIONS, UPDATE_OFFICER } from '../../../graphql/users';\r\n\r\ninterface OfficerInput {\r\n    firstName: string;\r\n    lastName: string;\r\n    positionId: string;\r\n    officeId: string;\r\n    password: string;\r\n};\r\n\r\nconst formDefaults = {\r\n    firstName: '',\r\n    lastName: '',\r\n    positionId: '',\r\n    officeId: '',\r\n    password: ''\r\n}\r\n\r\nexport default function AccountDialog({\r\n    open,\r\n    onClose,\r\n    officerId\r\n}: {\r\n    open: boolean,\r\n    onClose: () => void,\r\n    officerId?: string | null\r\n}) {\r\n    const [error, setError] = useState<string>();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [formData, setFormData] = useState<OfficerInput>(formDefaults);\r\n\r\n    const { firstName, lastName, positionId, officeId, password } = formData;\r\n\r\n    const { data: positions, error: positionError } = useQuery(GET_POSITIONS);\r\n\r\n    const { data: offices, error: officeError } = useQuery(GET_OFFICES);\r\n  \r\n    const [getOfficerById, { data: officer, error: officerError }] = useLazyQuery(GET_OFFICER_BY_ID);\r\n\r\n    const [createOfficer, { error: createError }] = useMutation(CREATE_OFFICER);\r\n    const [updateOfficer, { error: updateError }] = useMutation(UPDATE_OFFICER);\r\n  \r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setFormData({...formData, [event.target.name]: event.target.value });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (officerId) {\r\n            getOfficerById({ variables: { uuid: officerId } })\r\n                .then(({ data }) => {\r\n                    if (data && data.getOfficerById) {\r\n                        setFormData({\r\n                            firstName: data.getOfficerById.firstName,\r\n                            lastName: data.getOfficerById.lastName,\r\n                            positionId: data.getOfficerById.position?.id.toString() || '',\r\n                            officeId: data.getOfficerById.office?.id.toString() || '',\r\n                            password: ''\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }, [officerId, getOfficerById]);\r\n  \r\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n      event.preventDefault();\r\n  \r\n      if (officerId) {\r\n        const officer = await updateOfficer({\r\n            variables: {\r\n                uuid: officerId,\r\n                firstName: firstName.trim(),\r\n                lastName: lastName.trim(),\r\n                positionId: parseInt(positionId),\r\n                officeId: parseInt(officeId)\r\n            }\r\n        });\r\n    \r\n        if (officer.data && officer.data.updateOfficer) onClose();\r\n        else setError(\"Failed to update account.\");\r\n      } else {\r\n        const officer = await createOfficer({\r\n            variables: {\r\n                firstName: firstName.trim(),\r\n                lastName: lastName.trim(),\r\n                positionId: parseInt(positionId),\r\n                officeId: parseInt(officeId),\r\n                password: password\r\n            }\r\n        });\r\n    \r\n        if (officer.data && officer.data.createOfficer) onClose();\r\n        else setError(\"Account already exists.\");\r\n      }\r\n  \r\n      setFormData(formDefaults); // reset form\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setFormData(formDefaults);\r\n        onClose();\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Dialog open={open} onClose={handleClose} maxWidth='sm' fullWidth>\r\n            <DialogTitle>\r\n                {officer ? `Edit ${officer.getOfficerById?.firstName + ' ' + officer.getOfficerById?.lastName} Profile` : 'Create Officer'}\r\n            </DialogTitle>\r\n            <form onSubmit={handleSubmit}>\r\n                <DialogContent>\r\n                    <Stack spacing={2} sx={{ mb: 3 }}>\r\n                        <TextField \r\n                            name=\"firstName\" \r\n                            label=\"First Name\" \r\n                            value={firstName} \r\n                            onChange={handleChange}\r\n                            required\r\n                            fullWidth\r\n                        />\r\n\r\n                        <TextField \r\n                            name=\"lastName\" \r\n                            label=\"Last Name\" \r\n                            value={lastName} \r\n                            onChange={handleChange}\r\n                            required\r\n                            fullWidth\r\n                        />\r\n\r\n                        {positions && (\r\n                            <TextField\r\n                                name='positionId'\r\n                                select\r\n                                label=\"Position\"\r\n                                value={positionId} \r\n                                onChange={handleChange}\r\n                                required\r\n                                fullWidth\r\n                            >\r\n                                {positions.getPositions.map((option) => (\r\n                                    <MenuItem key={option.id} value={option.id}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        )}\r\n\r\n                        {offices && (\r\n                            <TextField\r\n                                name='officeId'\r\n                                select\r\n                                label=\"Office\"\r\n                                value={officeId} \r\n                                onChange={handleChange}\r\n                                required\r\n                                fullWidth\r\n                            >\r\n                                {offices.getOffices.map((option) => (\r\n                                    <MenuItem key={option.id} value={option.id}>\r\n                                        {option.name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        )}\r\n\r\n                        {!officerId && (\r\n                            <TextField\r\n                                name=\"password\"\r\n                                label=\"Temporary Password\"\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                value={password} \r\n                                onChange={handleChange}\r\n                                required\r\n                                fullWidth\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                                        <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </Stack>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"inherit\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"inherit\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={positionError?.message || officeError?.message || \r\n                officerError?.message || createError?.message || error || updateError?.message} \r\n        />\r\n        </>\r\n    );\r\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;"],"names":["formDefaults","firstName","lastName","positionId","officeId","password","AccountDialog","_ref","_officer$getOfficerBy","_officer$getOfficerBy2","open","onClose","officerId","error","setError","useState","showPassword","setShowPassword","formData","setFormData","data","positions","positionError","useQuery","GET_POSITIONS","offices","officeError","GET_OFFICES","getOfficerById","officer","officerError","useLazyQuery","GET_OFFICER_BY_ID","createOfficer","createError","useMutation","CREATE_OFFICER","updateOfficer","updateError","UPDATE_OFFICER","handleChange","event","target","name","value","useEffect","variables","uuid","then","_ref2","_data$getOfficerById$","_data$getOfficerById$2","position","id","toString","office","handleClose","_jsxs","_Fragment","children","Dialog","maxWidth","fullWidth","_jsx","DialogTitle","concat","onSubmit","async","preventDefault","trim","parseInt","DialogContent","Stack","spacing","sx","mb","TextField","label","onChange","required","select","getPositions","map","option","MenuItem","getOffices","type","InputProps","endAdornment","InputAdornment","IconButton","onClick","edge","Iconify","icon","DialogActions","Button","color","variant","Snackbar","severity","message","_excluded","DialogTitleRoot","styled","Typography","slot","overridesResolver","props","styles","root","padding","flex","React","inProps","ref","useThemeProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","titleId","DialogContext","_extends","component","clsx"],"sourceRoot":""}