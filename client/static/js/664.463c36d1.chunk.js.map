{"version":3,"file":"static/js/664.463c36d1.chunk.js","mappings":"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","sources":["sections/auth/password.tsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Divider from '@mui/material/Divider';\r\nimport Chip from '@mui/material/Chip';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { alpha, useTheme } from '@mui/material/styles';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { useRouter } from '../../hooks';\r\n\r\nimport { bgGradient } from '../../theme/css';\r\n\r\nimport { Logo, Iconify } from '../../components';\r\n\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { CONFIRM_RESET_PASSWORD, REQUEST_RESET_PASSWORD } from '../../graphql/users';\r\n\r\n// ----------------------------------------------------------------------\r\ninterface ResetPassword {\r\n    email: string;\r\n    phone: string;\r\n    code: string;\r\n    password: string;\r\n}\r\n\r\nconst formDefaults = {\r\n    email: '',\r\n    phone: '',\r\n    code: '',\r\n    password: '',\r\n}\r\n\r\nexport default function ResetPasswordView() {\r\n  const theme = useTheme();\r\n\r\n  const router = useRouter();\r\n\r\n  const [error, setError] = useState<string>();\r\n  const [confirm, setConfirm] = useState<boolean>(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [formData, setFormData] = useState<ResetPassword>(formDefaults);\r\n\r\n  const { email, phone, code, password } = formData;\r\n\r\n  const [requestReset, { error: requestError }] = useLazyQuery(REQUEST_RESET_PASSWORD);\r\n  const [confirmReset, { error: confirmError }] = useLazyQuery(CONFIRM_RESET_PASSWORD);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({...formData, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleSubmitRequest = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (!email && !phone) {\r\n      setError(\"Please type your verified email or phone number.\");\r\n      return\r\n    }\r\n\r\n    requestReset({ variables: { email, phone } })\r\n     .then(({ data }) => {\r\n            if (data && data.requestResetPassword) {\r\n                setConfirm(true);\r\n            }\r\n        })\r\n     .catch((error) => {\r\n        setError(error.message);\r\n    });\r\n  };\r\n\r\n  const handleSubmitPassword = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    confirmReset({ variables: { email, phone, code, password } })\r\n    .then(({ data }) => {\r\n           if (data && data.confirmResetPassword) {\r\n               router.push('/login')\r\n           }\r\n       })\r\n    .catch((error) => {\r\n        setError(error.message);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        ...bgGradient({\r\n          color: alpha(theme.palette.background.default, 0.5),\r\n          imgUrl: '/assets/background/overlay_5.jpg',\r\n        }),\r\n        height: 1,\r\n      }}\r\n    >\r\n      <Logo\r\n        sx={{\r\n          position: 'fixed',\r\n          top: { xs: 16, md: 24 },\r\n          left: { xs: 16, md: 24 },\r\n        }}\r\n      />\r\n\r\n      <Stack alignItems=\"center\" justifyContent=\"center\" sx={{ height: 1 }}>\r\n        <Card\r\n          sx={{\r\n            p: 5,\r\n            width: 1,\r\n            maxWidth: 420,\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\">RESET PASSWORD</Typography>\r\n\r\n            {!confirm ? (\r\n                <form onSubmit={handleSubmitRequest}>\r\n                    <Stack spacing={2} sx={{ my: 3 }}>\r\n                        <TextField \r\n                            name=\"email\" \r\n                            label=\"Email\" \r\n                            type=\"email\"\r\n                            value={email} \r\n                            onChange={handleChange}\r\n                            fullWidth\r\n                        />\r\n\r\n                        <Divider>\r\n                            <Chip label=\"OR\" size=\"medium\" />\r\n                        </Divider>\r\n\r\n                        <TextField \r\n                            name=\"phone\" \r\n                            label=\"Phone\" \r\n                            value={phone} \r\n                            onChange={handleChange}\r\n                            inputProps={{ minLength: 10, maxLength: 10 }}\r\n                            InputProps={{\r\n                              startAdornment: <InputAdornment position=\"start\">+63</InputAdornment>,\r\n                            }}\r\n                            fullWidth\r\n                        />\r\n                    </Stack>\r\n\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ my: 2 }}>\r\n                        {(requestError?.message || error) && (\r\n                            <Typography variant=\"body2\" align='center' color=\"error\">\r\n                                {requestError?.message || error}\r\n                            </Typography>\r\n                        )}\r\n                    </Stack>\r\n\r\n                    <Button\r\n                        fullWidth\r\n                        endIcon={<Iconify icon=\"mdi:arrow-right\" />}\r\n                        size=\"large\"\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"inherit\"\r\n                    >\r\n                        Send Code\r\n                    </Button>\r\n                </form>\r\n            ): (\r\n                <form onSubmit={handleSubmitPassword}>\r\n                    <Stack spacing={2} sx={{ my: 3 }}>\r\n                        <TextField \r\n                            name=\"code\" \r\n                            label=\"Code\" \r\n                            value={code} \r\n                            onChange={handleChange}\r\n                            required\r\n                            fullWidth\r\n                        />\r\n\r\n                        <TextField\r\n                            name=\"password\"\r\n                            label=\"New Password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={password} \r\n                            onChange={handleChange}\r\n                            required\r\n                            fullWidth\r\n                            inputProps={{ minLength: 8 }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                                    <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Stack>\r\n\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ my: 2 }}>\r\n                        {(confirmError?.message || error) && (\r\n                            <Typography variant=\"body2\" align='center' color=\"error\">\r\n                                {confirmError?.message || error}\r\n                            </Typography>\r\n                        )}\r\n                    </Stack>\r\n\r\n                    <Button\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"inherit\"\r\n                    >\r\n                        Reset Password\r\n                    </Button>\r\n                </form>\r\n            )}\r\n        </Card>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n}"],"names":["formDefaults","email","phone","code","password","ResetPasswordView","theme","useTheme","router","useRouter","error","setError","useState","confirm","setConfirm","showPassword","setShowPassword","formData","setFormData","requestReset","requestError","useLazyQuery","REQUEST_RESET_PASSWORD","confirmReset","confirmError","CONFIRM_RESET_PASSWORD","handleChange","event","target","name","value","_jsxs","Box","sx","bgGradient","color","alpha","palette","background","default","imgUrl","height","children","_jsx","Logo","position","top","xs","md","left","Stack","alignItems","justifyContent","Card","p","width","maxWidth","Typography","variant","onSubmit","preventDefault","variables","then","_ref2","data","confirmResetPassword","push","catch","message","spacing","my","TextField","label","onChange","required","fullWidth","type","inputProps","minLength","InputProps","endAdornment","InputAdornment","IconButton","onClick","edge","Iconify","icon","direction","align","Button","size","_ref","requestResetPassword","Divider","Chip","maxLength","startAdornment","endIcon"],"sourceRoot":""}