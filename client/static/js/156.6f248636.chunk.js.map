{"version":3,"file":"static/js/156.6f248636.chunk.js","mappings":"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","sources":["sections/documents/form-dialog/index.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\n\r\nimport { MultiSelect, DatePicker, Snackbar } from '../../../components';\r\nimport { GET_OFFICES } from '../../../graphql/users';\r\nimport { \r\n    GET_PURPOSES, \r\n    GET_STATUSES, \r\n    GET_TYPES, \r\n    GET_TEMP_REF_NUM, \r\n    CREATE_DOCUMENT, \r\n    GET_DOCUMENT_BY_ID ,\r\n    UPDATE_DOCUMENT\r\n} from '../../../graphql/documents';\r\nimport { Status, Tags } from '../../../__generated__/graphql';\r\n\r\ninterface DocumentForm {\r\n    subject: string;\r\n    description: string;\r\n    receivedFrom: string;\r\n    typeId: string;\r\n    purposeId: string;\r\n    statusId: string;\r\n    tag: string;\r\n}\r\n\r\nconst formDefaults = {\r\n    subject: '',\r\n    description: '',\r\n    receivedFrom: '',\r\n    typeId: '',\r\n    purposeId: '',\r\n    statusId: '',\r\n    tag: ''\r\n}\r\n\r\nexport default function FormDialog({\r\n    referenceNum,\r\n    open,\r\n    onClose\r\n}: {\r\n    referenceNum: string | null,\r\n    open: boolean,\r\n    onClose: () => void\r\n}) {\r\n    // fetch options\r\n    const { data: offices, error: officeError } = useQuery(GET_OFFICES, {\r\n        fetchPolicy: 'no-cache'\r\n    }); \r\n    const { data: purposes, error: purposeError } = useQuery(GET_PURPOSES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const { data: statuses, error: statusError } = useQuery(GET_STATUSES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const { data: types, error: typesError } = useQuery(GET_TYPES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const { data: reference, error: referenceError, refetch } = useQuery(GET_TEMP_REF_NUM, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const [getDocumentById, { error: getError }] = useLazyQuery(GET_DOCUMENT_BY_ID, {\r\n        fetchPolicy: 'no-cache'\r\n    }); \r\n\r\n    const [createDocument, { error: createError}] = useMutation(CREATE_DOCUMENT);\r\n    const [updateDocument, { error: updateError}] = useMutation(UPDATE_DOCUMENT);\r\n\r\n    const [referrals, setReferrals] = useState<number[]>([]);\r\n    const [deadline, setDeadline] = useState<Dayjs>(dayjs(new Date()));\r\n    const [formData, setFormData] = useState<DocumentForm>(formDefaults);\r\n\r\n    const { subject, description, receivedFrom, typeId, purposeId, statusId, tag } = formData;\r\n\r\n    useEffect(() => {\r\n        if (referenceNum) {\r\n            getDocumentById({ variables: { referenceNum: referenceNum } }).then(({ data }) => {\r\n                if (data) {\r\n                    setFormData({\r\n                        subject: data.getDocumentById.subject,\r\n                        description: data.getDocumentById.description,\r\n                        receivedFrom: data.getDocumentById.receivedFrom,\r\n                        typeId: data.getDocumentById.type ? data.getDocumentById.type.id.toString() : \"\",\r\n                        purposeId: data.getDocumentById.purpose ? data.getDocumentById.purpose.id.toString() : \"\",\r\n                        statusId: data.getDocumentById.status ? data.getDocumentById.status.id.toString() : \"\",\r\n                        tag: data.getDocumentById.tag ? data.getDocumentById.tag : \"\" \r\n                    });\r\n\r\n                    setDeadline(dayjs(new Date(data.getDocumentById.dateDue)));\r\n                    setReferrals(data.getDocumentById.refferedTo.map(office => parseInt(office.id)));\r\n                }\r\n            })\r\n        } else {\r\n            setFormData(formDefaults);\r\n            setDeadline(dayjs(new Date()));\r\n            setReferrals([]);\r\n        }\r\n    }, [referenceNum, getDocumentById])\r\n\r\n    const handleReferralsChange = (selected: number[]) => {\r\n        setReferrals(selected);\r\n    }\r\n\r\n    const handleDeadlineChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setDeadline(newValue);\r\n    }\r\n\r\n    const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({\r\n         ...formData,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (referenceNum) {\r\n            await updateDocument({\r\n                variables: {\r\n                    referenceNum: referenceNum,\r\n                    subject,\r\n                    description,\r\n                    receivedFrom,\r\n                    typeId: parseInt(typeId),\r\n                    purposeId: parseInt(purposeId),\r\n                    statusId: parseInt(statusId),\r\n                    tag: tag.length === 0 ? null : tag as Tags,\r\n                    refferedTo: referrals,\r\n                    dateDue: deadline.toISOString()\r\n                }\r\n            });\r\n        } else {\r\n            await createDocument({\r\n                variables: {\r\n                    subject,\r\n                    description,\r\n                    receivedFrom,\r\n                    typeId: parseInt(typeId),\r\n                    purposeId: parseInt(purposeId),\r\n                    statusId: parseInt(statusId),\r\n                    tag: tag.length === 0 ? null : tag as Tags,\r\n                    refferedTo: referrals,\r\n                    dateDue: deadline.toISOString()\r\n                }\r\n            });\r\n        }\r\n\r\n        // clear form data\r\n        setFormData(formDefaults);\r\n        setDeadline(dayjs(new Date()));\r\n        setReferrals([]);\r\n\r\n        await refetch(); // get new reference number\r\n        onClose(); // close dialog\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <Dialog open={open} onClose={onClose} maxWidth='lg' fullWidth>\r\n            <form onSubmit={handleSubmit}>\r\n            <DialogContent>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        {reference && (\r\n                            <Typography variant='h6'>\r\n                                {`#${referenceNum ? referenceNum : reference.getTempReferenceNum}`}\r\n                            </Typography>\r\n                        )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={8}>\r\n                        <Stack spacing={3}>\r\n                            <TextField \r\n                                name='subject'\r\n                                label='Subject'\r\n                                variant='outlined'\r\n                                value={subject}\r\n                                onChange={handleFormChange}\r\n                                fullWidth\r\n                                required\r\n                            />\r\n\r\n                            <TextField \r\n                                name='description'\r\n                                label='Description'\r\n                                variant='outlined'\r\n                                value={description}\r\n                                onChange={handleFormChange}\r\n                                multiline\r\n                                rows={4}\r\n                                fullWidth\r\n                                required\r\n                            />\r\n\r\n                            <TextField \r\n                                name='receivedFrom'\r\n                                label='Received From'\r\n                                variant='outlined'\r\n                                value={receivedFrom}\r\n                                onChange={handleFormChange}\r\n                                fullWidth\r\n                                required\r\n                            />\r\n\r\n                            {offices && (\r\n                                <MultiSelect \r\n                                    name='referredTo'\r\n                                    label='Referred To'\r\n                                    selected={referrals}\r\n                                    options={offices.getOffices.map(office => ({\r\n                                        id: parseInt(office.id),\r\n                                        label: office.name\r\n                                    }))}\r\n                                    onChange={handleReferralsChange}\r\n                                />\r\n                            )}\r\n                        </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={4}>\r\n                        <Stack spacing={3}>\r\n                            {types && (\r\n                                 <TextField\r\n                                    name='typeId'\r\n                                    select\r\n                                    label=\"Document Type\"\r\n                                    value={typeId}\r\n                                    onChange={handleFormChange}\r\n                                    variant='outlined'\r\n                                    required\r\n                                    fullWidth\r\n                                >\r\n                                    {types.getDocumentTypes.map((option) => (\r\n                                        <MenuItem key={option.id} value={option.id}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            )}\r\n\r\n                            {purposes && (\r\n                                <TextField\r\n                                    name='purposeId'\r\n                                    select\r\n                                    label=\"Document Purpose\"\r\n                                    value={purposeId}\r\n                                    onChange={handleFormChange}\r\n                                    variant='outlined'\r\n                                    required\r\n                                    fullWidth\r\n                                >\r\n                                    {purposes.getDocumentPurposes.map((option) => (\r\n                                        <MenuItem key={option.id} value={option.id}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            )}\r\n\r\n                            {statuses && (\r\n                                <TextField\r\n                                    name='statusId'\r\n                                    select\r\n                                    label=\"Document Status\"\r\n                                    value={statusId}\r\n                                    onChange={handleFormChange}\r\n                                    variant='outlined'\r\n                                    required\r\n                                    fullWidth\r\n                                >\r\n                                    {statuses.getDocumentStatus\r\n                                        .filter(status => status.category === Status.NotStarted || status.category === Status.NotActionable || referenceNum)\r\n                                        .map((option) => (\r\n                                        <MenuItem key={option.id} value={option.id}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            )}\r\n\r\n                            <DatePicker \r\n                                label='Deadline'\r\n                                value={deadline}\r\n                                onChange={handleDeadlineChange}\r\n                            />\r\n\r\n                            <TextField\r\n                                name='tag'\r\n                                select\r\n                                label=\"Document Tag\"\r\n                                variant='outlined'\r\n                                value={tag}\r\n                                onChange={handleFormChange}\r\n                                fullWidth\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    None\r\n                                </MenuItem>\r\n                                <MenuItem value=\"CONFIDENTIAL\">\r\n                                    Confidential\r\n                                </MenuItem>\r\n                                <MenuItem value=\"TOP_PRIORITY\">\r\n                                    Top Prioroty\r\n                                </MenuItem>\r\n                                <MenuItem value=\"FOLLOW_UP\">\r\n                                    Follow Up\r\n                                </MenuItem>\r\n                            </TextField>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Stack direction='row' spacing={2}>\r\n                    <Button onClick={onClose} color='inherit'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant='contained' color='inherit' type='submit'>\r\n                        Save\r\n                    </Button>\r\n                </Stack>\r\n            </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={officeError?.message || purposeError?.message || createError?.message || updateError?.message ||\r\n                statusError?.message || typesError?.message || referenceError?.message || getError?.message} \r\n        />\r\n\r\n        </>\r\n    );\r\n}","import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryResult,\n} from \"../types/types.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current,\n  });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = internalState\n        .executeQuery({ ...options, skip: false })\n        .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    []\n  );\n\n  return [execute, result];\n}\n"],"names":["formDefaults","subject","description","receivedFrom","typeId","purposeId","statusId","tag","FormDialog","_ref","referenceNum","open","onClose","data","offices","error","officeError","useQuery","GET_OFFICES","fetchPolicy","purposes","purposeError","GET_PURPOSES","statuses","statusError","GET_STATUSES","types","typesError","GET_TYPES","reference","referenceError","refetch","GET_TEMP_REF_NUM","getDocumentById","getError","useLazyQuery","GET_DOCUMENT_BY_ID","createDocument","createError","useMutation","CREATE_DOCUMENT","updateDocument","updateError","UPDATE_DOCUMENT","referrals","setReferrals","useState","deadline","setDeadline","dayjs","Date","formData","setFormData","useEffect","variables","then","_ref2","type","id","toString","purpose","status","dateDue","refferedTo","map","office","parseInt","handleFormChange","e","target","name","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","length","toISOString","DialogContent","Grid","container","spacing","item","xs","Typography","variant","concat","getTempReferenceNum","sm","md","Stack","TextField","label","onChange","required","multiline","rows","MultiSelect","selected","options","getOffices","select","getDocumentTypes","option","MenuItem","getDocumentPurposes","getDocumentStatus","filter","category","Status","NotStarted","NotActionable","DatePicker","newValue","DialogActions","direction","Button","onClick","color","Snackbar","severity","message","EAGER_METHODS","query","execOptionsRef","React","optionsRef","queryRef","merged","mergeOptions","current","document","_a","internalState","useInternalState","useApolloClient","client","useQueryResult","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdateState","apply","this","arguments","_i","EAGER_METHODS_1","execute","executeOptions","promise","executeQuery","queryResult","catch"],"sourceRoot":""}