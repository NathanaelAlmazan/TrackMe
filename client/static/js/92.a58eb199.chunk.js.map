{"version":3,"file":"static/js/92.a58eb199.chunk.js","mappings":"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","sources":["graphql/documents/index.tsx","graphql/reports/index.tsx","sections/dashboard/charts/index.tsx","sections/dashboard/index.tsx"],"sourcesContent":["import { gql } from '../../__generated__/gql';\r\n\r\n\r\n// ================================ TYPES =================================\r\n\r\nexport const GET_TYPES = gql(`\r\n    query GetDocumentTypes {\r\n        getDocumentTypes {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_TYPE = gql(`\r\n    mutation CreateDocumentType($label: String!) {\r\n        createDocumentType(label: $label) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_TYPE = gql(`\r\n    mutation UpdateDocumentType($id: Int!, $label: String!) {\r\n        updateDocumentType(id: $id, label: $label) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_TYPE = gql(`\r\n    mutation DeleteDocumentType($id: Int!) {\r\n        deleteDocumentType(id: $id) {\r\n            id  \r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\n// ================================ PURPOSES =================================\r\n\r\nexport const GET_PURPOSES = gql(`\r\n    query GetDocumentPurposes {\r\n        getDocumentPurposes {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_PURPOSE = gql(`\r\n    mutation CreateDocumentPurpose($label: String!) {\r\n        createDocumentPurpose(label: $label) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_PURPOSE = gql(`\r\n    mutation UpdateDocumentPurpose($id: Int!, $label: String!) {\r\n        updateDocumentPurpose(id: $id, label: $label) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_PURPOSE = gql(`\r\n    mutation DeleteDocumentPurpose($id: Int!) {\r\n        deleteDocumentPurpose(id: $id) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\n// ================================ STATUS =================================\r\n\r\nexport const GET_STATUSES = gql(`\r\n    query GetDocumentStatus {\r\n        getDocumentStatus {\r\n            id\r\n            label\r\n            category\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_STATUS = gql(`\r\n    mutation CreateDocumentStatus($label: String!, $category: Status!) {\r\n        createDocumentStatus(label: $label, category: $category) {\r\n            id\r\n            label\r\n            category\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_STATUS = gql(`\r\n    mutation UpdateDocumentStatus($id: Int!, $label: String!, $category: Status!) {\r\n        updateDocumentStatus(id: $id, label: $label, category: $category) {\r\n            id\r\n            label\r\n            category\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_STATUS = gql(`\r\n    mutation DeleteDocumentStatus($id: Int!) {\r\n        deleteDocumentStatus(id: $id) {\r\n            id\r\n            label\r\n            category\r\n        }\r\n    }\r\n`);\r\n\r\n// ================================ DOCUMENTS =================================\r\n\r\nexport const GET_TEMP_REF_NUM = gql(`\r\n    query TempReferenceNum {\r\n        getTempReferenceNum\r\n    }\r\n`)\r\n\r\nexport const GET_DOCUMENT_SUMMARY = gql(`\r\n    query GetDocumentSummary {\r\n        getDocumentSummary {\r\n            closed\r\n            noaction\r\n            office\r\n            ongoing\r\n            referred\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_DOCUMENTS = gql(`\r\n    query GetDocuments($officeId: Int) {\r\n        getDocuments(officeId: $officeId) {\r\n            referenceNum\r\n            subject\r\n            receivedFrom\r\n            refferedTo {\r\n                name\r\n            }\r\n            tag\r\n            status {\r\n                label\r\n                category\r\n            }\r\n            dateCreated\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_DOCUMENT_BY_ID = gql(`\r\n    query GetDocumentById($referenceNum: String!) {\r\n        getDocumentById(referenceNum: $referenceNum) {\r\n            referenceNum\r\n            subject\r\n            description\r\n            receivedFrom\r\n            refferedTo {\r\n                id\r\n                name\r\n            }\r\n            type {\r\n                id\r\n                label\r\n            }\r\n            purpose {\r\n                id\r\n                label\r\n            }\r\n            tag\r\n            status {\r\n                id\r\n                label\r\n                category\r\n            }\r\n            dateCreated\r\n            dateDue\r\n            comments {\r\n                id\r\n                sender {\r\n                    uuid\r\n                    firstName\r\n                    lastName\r\n                    position {\r\n                        label\r\n                    }\r\n                }   \r\n                files\r\n                message\r\n                dateCreated\r\n            }\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_DOCUMENT = gql(`\r\n    mutation CreateDocument($subject: String!, $description: String!, $receivedFrom: String!, $typeId: Int!, $purposeId: Int!, $statusId: Int!, $dateDue: String!, $refferedTo: [Int!]!, $tag: Tags) {\r\n        createDocument(subject: $subject, description: $description, receivedFrom: $receivedFrom, typeId: $typeId, purposeId: $purposeId, statusId: $statusId, dateDue: $dateDue, refferedTo: $refferedTo, tag: $tag) {\r\n            referenceNum\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_DOCUMENT = gql(`\r\n    mutation UpdateDocument($referenceNum: String!, $subject: String, $description: String, $receivedFrom: String, $typeId: Int, $purposeId: Int, $statusId: Int, $tag: Tags, $dateDue: String, $refferedTo: [Int]) {\r\n        updateDocument(referenceNum: $referenceNum, subject: $subject, description: $description, receivedFrom: $receivedFrom, typeId: $typeId, purposeId: $purposeId, statusId: $statusId, tag: $tag, dateDue: $dateDue, refferedTo: $refferedTo) {\r\n            referenceNum\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_DOCUMENT = gql(`\r\n    mutation DeleteDocument($referenceNum: String!) {\r\n        deleteDocument(referenceNum: $referenceNum) {\r\n            subject\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_DOCUMENT_STATUS = gql(`\r\n    mutation DocumentUpdateStatus($referenceNum: String!, $statusId: Int!) {\r\n        documentUpdateStatus(referenceNum: $referenceNum, statusId: $statusId) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_COMMENT = gql(`\r\n    mutation CreateComment($documentId: String!, $senderId: String!, $message: String!, $files: [String!]) {\r\n        createComment(documentId: $documentId, senderId: $senderId, message: $message, files: $files) {\r\n            id\r\n        }\r\n    }\r\n`)\r\n\r\nexport const SUBSCRIBE_DOCUMENT_EVENTS = gql(`\r\n    subscription DocumentEvents($referenceNum: String!) {\r\n        documentEvents(referenceNum: $referenceNum) {\r\n            eventDate\r\n            eventName\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_DOCUMENT_STATISTICS = gql(`\r\n    query GetDocumentStatistics($officeId: Int) {\r\n        getDocumentStatistics(officeId: $officeId) {\r\n            closed\r\n            noaction\r\n            ongoing\r\n            referred\r\n        }\r\n    }\r\n`)","import { gql } from '../../__generated__/gql';\r\n\r\n// =============================== REPORTS ==================================\r\n\r\nexport const GET_REPORTS = gql(`\r\n    query GetReports {\r\n        getReports {\r\n            id\r\n            name\r\n            basis\r\n            frequency\r\n            localDue\r\n            nationalDue\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_REPORT_BY_ID = gql(`\r\n    query GetReportById($id: Int!) {\r\n        getReportById(id: $id) {\r\n            id\r\n            name\r\n            basis\r\n            frequency\r\n            localDue\r\n            nationalDue  \r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_REPORT_SUMMARY = gql(`\r\n    query GetReportSummary {\r\n        getReportSummary {\r\n            office\r\n            pending\r\n            submitted\r\n            total\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_REPORT_STATISTICS = gql(`\r\n    query GetReportStatistics($officeId: Int) {\r\n        getReportStatistics(officeId: $officeId) {\r\n            overdue\r\n            pending\r\n            submitted\r\n            total\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_REPORT = gql(`\r\n    mutation CreateReport($name: String!, $basis: String!, $localDue: String!, $nationalDue: String!, $frequency: Frequency!) {\r\n        createReport(name: $name, basis: $basis, localDue: $localDue, nationalDue: $nationalDue, frequency: $frequency) {\r\n            id\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_REPORT = gql(`\r\n    mutation UpdateReport($id: Int!, $name: String!, $basis: String!, $localDue: String!, $nationalDue: String!, $frequency: Frequency!) {\r\n        updateReport(id: $id, name: $name, basis: $basis, localDue: $localDue, nationalDue: $nationalDue, frequency: $frequency) {\r\n            id\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_REPORT = gql(`\r\n    mutation DeleteReport($id: Int!) {\r\n        deleteReport(id: $id) {\r\n            id\r\n        }\r\n    }\r\n`)\r\n\r\n// =============================== SUBMISSION ==================================\r\n\r\nexport const GET_SUBMISSIONS = gql(`\r\n    query GetSubmittedReports($officeId: Int) {\r\n        getSubmittedReports(officeId: $officeId) {\r\n            id\r\n            office {\r\n                id\r\n                name\r\n            }\r\n            report {\r\n                id\r\n                name\r\n                basis\r\n            }\r\n            status\r\n            localDue\r\n            nationalDue\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_SUBMISSION_BY_ID = gql(`\r\n    query GetSubmittedReportById($id: Int!) {\r\n        getSubmittedReportById(id: $id) {\r\n            id\r\n            office {\r\n                id\r\n                name\r\n            }\r\n            report {\r\n                id\r\n                name\r\n                basis\r\n            }\r\n            status\r\n            localDue\r\n            nationalDue\r\n            message\r\n            files\r\n        }\r\n    }\r\n`)\r\n\r\nexport const SUBMIT_REPORT = gql(`\r\n    mutation SubmitReport($id: Int!, $message: String, $files: [String!]) {\r\n        submitReport(id: $id, message: $message, files: $files) {\r\n            id\r\n        }\r\n    }\r\n`)","import { lazy } from 'react';\r\n\r\nimport { ApexOptions } from 'apexcharts';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\n\r\nimport { useChart } from '../../../hooks';\r\n\r\nconst Chart = lazy(() => import('./styles'));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function BarChart({ title, subheader, series, labels }: { title: string, subheader: string, series: { name: string, data: number[] }[], labels: string[] }) {\r\n\r\n  const chartOptions: ApexOptions = useChart({\r\n    chart: {\r\n      stacked: true\r\n    },\r\n    xaxis: {\r\n      type: \"category\",\r\n      categories: labels\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n          horizontal: false\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title={title} subheader={subheader} />\r\n\r\n      <Box sx={{ p: 3, pb: 1 }}>\r\n        <Chart\r\n          dir=\"ltr\"\r\n          type=\"bar\"\r\n          series={series}\r\n          options={chartOptions}\r\n          width=\"100%\"\r\n          height={364}\r\n        />\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport Container from '@mui/material/Container';\r\nimport Stack from '@mui/material/Stack';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { Iconify, Snackbar } from '../../components';\r\nimport BarChart from './charts';\r\n\r\nimport { useQuery, useSubscription } from '@apollo/client';\r\nimport { SUBSCRIBE_OFFICE_EVENTS } from '../../graphql/users';\r\nimport { GET_REPORT_SUMMARY } from '../../graphql/reports';\r\nimport { GET_DOCUMENT_SUMMARY } from '../../graphql/documents';\r\n\r\n\r\ninterface ChartData {\r\n    name: string;\r\n    data: number[];\r\n}\r\n\r\nfunction formatOfficeAbbr(offices: string[]): string[] {\r\n    return offices.map(office => {\r\n        return office.split(' ').filter(word => !['of', 'the'].includes(word.toLowerCase())).map(word => {\r\n            if (isNaN(parseInt(word))) \r\n                return word.charAt(0).toUpperCase();\r\n            else\r\n                return `-${parseInt(word).toString()}`;\r\n        }).join('');\r\n    })\r\n}\r\n\r\nexport default function DashboardPage() {\r\n    const { data: documents, error: documentsError, refetch: refetchDocuments } = useQuery(GET_DOCUMENT_SUMMARY); \r\n    const { data: reports, error: reportsError, refetch: refetchReports } = useQuery(GET_REPORT_SUMMARY); \r\n    const { data: officeEvents, error: subscribeError } = useSubscription(SUBSCRIBE_OFFICE_EVENTS);\r\n\r\n    const [offices, setOffices] = useState<string[]>([]);\r\n    const [documentStats, setDocumentStats] = useState<ChartData[]>([]);\r\n    const [reportStats, setReportStats] = useState<ChartData[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (documents) {\r\n            setOffices(formatOfficeAbbr(documents.getDocumentSummary.map(stat => stat.office)))\r\n        }\r\n    }, [documents])\r\n\r\n    useEffect(() => {\r\n        if (documents) {\r\n            setDocumentStats([\r\n                {\r\n                    name: 'Ongoing',\r\n                    data: documents.getDocumentSummary.map(stat => stat.ongoing)\r\n                },\r\n                {\r\n                    name: 'Closed',\r\n                    data: documents.getDocumentSummary.map(stat => stat.closed)\r\n                },\r\n                {\r\n                    name: 'No Action',\r\n                    data: documents.getDocumentSummary.map(stat => stat.noaction)\r\n                }\r\n            ])\r\n        }\r\n    }, [documents]);\r\n\r\n    useEffect(() => {\r\n        if (reports) {\r\n            setReportStats([\r\n                {\r\n                    name: 'Ongoing',\r\n                    data: reports.getReportSummary.map(stat => stat.pending)\r\n                },\r\n                {\r\n                    name: 'Submitted',\r\n                    data: reports.getReportSummary.map(stat => stat.submitted)\r\n                }\r\n            ])\r\n        }\r\n    }, [reports]);\r\n\r\n    useEffect(() => {\r\n        if (officeEvents) {\r\n            refetchDocuments();\r\n            refetchReports();\r\n        }\r\n    }, [officeEvents, refetchDocuments, refetchReports])\r\n\r\n    return (\r\n        <Container>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\r\n                        <Typography variant=\"h4\">\r\n                            Good Day 👋\r\n                        </Typography>\r\n\r\n                        <Button variant=\"contained\" color=\"inherit\" startIcon={<Iconify icon=\"ant-design:export-outlined\" />}>\r\n                            Export\r\n                        </Button>\r\n                    </Stack>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <BarChart \r\n                        title='Documents'\r\n                        subheader='Summary from January 01, 2024 to March 31, 2024'\r\n                        labels={offices}\r\n                        series={documentStats}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <BarChart \r\n                        title='Reports'\r\n                        subheader='Summary from January 01, 2024 to March 31, 2024'\r\n                        labels={offices}\r\n                        series={reportStats}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Snackbar \r\n                severity='error' \r\n                message={documentsError?.message || subscribeError?.message || reportsError?.message} \r\n            />\r\n        </Container>\r\n    );\r\n}"],"names":["GET_TYPES","gql","CREATE_TYPE","UPDATE_TYPE","DELETE_TYPE","GET_PURPOSES","CREATE_PURPOSE","UPDATE_PURPOSE","DELETE_PURPOSE","GET_STATUSES","CREATE_STATUS","UPDATE_STATUS","DELETE_STATUS","GET_TEMP_REF_NUM","GET_DOCUMENT_SUMMARY","GET_DOCUMENTS","GET_DOCUMENT_BY_ID","CREATE_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","UPDATE_DOCUMENT_STATUS","CREATE_COMMENT","SUBSCRIBE_DOCUMENT_EVENTS","GET_DOCUMENT_STATISTICS","GET_REPORT_BY_ID","GET_REPORT_SUMMARY","GET_REPORT_STATISTICS","CREATE_REPORT","UPDATE_REPORT","DELETE_REPORT","GET_SUBMISSIONS","GET_SUBMISSION_BY_ID","SUBMIT_REPORT","Chart","lazy","BarChart","_ref","title","subheader","series","labels","chartOptions","useChart","chart","stacked","xaxis","type","categories","plotOptions","bar","horizontal","_jsxs","Card","children","_jsx","CardHeader","Box","sx","p","pb","dir","options","width","height","DashboardPage","data","documents","error","documentsError","refetch","refetchDocuments","useQuery","reports","reportsError","refetchReports","officeEvents","subscribeError","useSubscription","SUBSCRIBE_OFFICE_EVENTS","offices","setOffices","useState","documentStats","setDocumentStats","reportStats","setReportStats","useEffect","map","office","split","filter","word","includes","toLowerCase","isNaN","parseInt","charAt","toUpperCase","concat","toString","join","formatOfficeAbbr","getDocumentSummary","stat","name","ongoing","closed","noaction","getReportSummary","pending","submitted","Container","Grid","container","spacing","item","xs","Stack","direction","alignItems","justifyContent","mb","Typography","variant","Button","color","startIcon","Iconify","icon","Snackbar","severity","message"],"sourceRoot":""}