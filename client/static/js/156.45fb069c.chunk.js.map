{"version":3,"file":"static/js/156.45fb069c.chunk.js","mappings":"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","sources":["sections/documents/form-dialog/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\r\n\r\nimport { useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\r\nimport dayjs, { Dayjs } from \"dayjs\";\r\n\r\nimport { MultiSelect, DatePicker, Snackbar } from \"../../../components\";\r\nimport {\r\n  GET_OFFICERS,\r\n  GET_OFFICES,\r\n  GET_SIGNATORIES,\r\n} from \"../../../graphql/users\";\r\nimport {\r\n  GET_PURPOSES,\r\n  GET_STATUSES,\r\n  GET_TYPES,\r\n  GET_TEMP_REF_NUM,\r\n  CREATE_DOCUMENT,\r\n  GET_DOCUMENT_BY_ID,\r\n  UPDATE_DOCUMENT,\r\n} from \"../../../graphql/documents\";\r\nimport { Status, Tags } from \"../../../__generated__/graphql\";\r\n\r\ninterface DocumentForm {\r\n  subject: string;\r\n  description: string;\r\n  receivedFrom: string;\r\n  typeId: string;\r\n  purposeIds: string;\r\n  statusId: string;\r\n  signatureId: string;\r\n  tag: string;\r\n}\r\n\r\nconst formDefaults = {\r\n  subject: \"\",\r\n  description: \"\",\r\n  receivedFrom: \"\",\r\n  typeId: \"\",\r\n  purposeIds: \"\",\r\n  statusId: \"\",\r\n  signatureId: \"\",\r\n  tag: \"\",\r\n};\r\n\r\nexport const BIN_OFFICE = 20;\r\n\r\nconst filter = createFilterOptions<any>();\r\n\r\nexport default function FormDialog({\r\n  referenceNum,\r\n  officerId,\r\n  open,\r\n  onClose,\r\n}: {\r\n  referenceNum: string | null;\r\n  officerId: string;\r\n  open: boolean;\r\n  onClose: () => void;\r\n}) {\r\n  // fetch options\r\n  const { data: offices, error: officeError } = useQuery(GET_OFFICES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: purposes, error: purposeError } = useQuery(GET_PURPOSES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: statuses, error: statusError } = useQuery(GET_STATUSES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: types, error: typesError } = useQuery(GET_TYPES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: signatories, error: signatoryError } = useQuery(\r\n    GET_SIGNATORIES,\r\n    {\r\n      fetchPolicy: \"no-cache\",\r\n    }\r\n  );\r\n  const {\r\n    data: reference,\r\n    error: referenceError,\r\n    refetch,\r\n  } = useQuery(GET_TEMP_REF_NUM, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const [getDocumentById, { error: getError }] = useLazyQuery(\r\n    GET_DOCUMENT_BY_ID,\r\n    {\r\n      fetchPolicy: \"no-cache\",\r\n    }\r\n  );\r\n  const [getOfficers, { error: officersError }] = useLazyQuery(GET_OFFICERS, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const [createDocument, { error: createError }] = useMutation(CREATE_DOCUMENT);\r\n  const [updateDocument, { error: updateError }] = useMutation(UPDATE_DOCUMENT);\r\n\r\n  const [referrals, setReferrals] = useState<number[]>([]);\r\n  const [deadline, setDeadline] = useState<Dayjs>(dayjs(new Date()));\r\n  const [disableDeadline, setDisableDeadline] = useState(false);\r\n  const [formData, setFormData] = useState<DocumentForm>(formDefaults);\r\n  const [officers, setOfficers] = useState<\r\n    { uuid: string; firstName: string; lastName: string; position?: string }[]\r\n  >([]);\r\n  const [assigned, setAssigned] = useState<\r\n    {\r\n      id: string;\r\n      label: string;\r\n      description: string | undefined;\r\n    }[]\r\n  >([]);\r\n\r\n  const {\r\n    subject,\r\n    description,\r\n    receivedFrom,\r\n    typeId,\r\n    purposeIds,\r\n    statusId,\r\n    signatureId,\r\n    tag,\r\n  } = formData;\r\n\r\n  useEffect(() => {\r\n    if (referenceNum) {\r\n      getDocumentById({ variables: { referenceNum, officerId } }).then(\r\n        ({ data }) => {\r\n          if (data) {\r\n            setFormData({\r\n              subject: data.getDocumentById.subject,\r\n              description: data.getDocumentById.description,\r\n              receivedFrom: data.getDocumentById.receivedFrom,\r\n              typeId: data.getDocumentById.type\r\n                ? data.getDocumentById.type.id.toString()\r\n                : \"\",\r\n              purposeIds: data.getDocumentById.purpose\r\n                ? data.getDocumentById.purpose.map((p) => p.id).join(\",\")\r\n                : \"\",\r\n              tag: data.getDocumentById.tag ? data.getDocumentById.tag : \"\",\r\n              signatureId: data.getDocumentById.signatory.uuid,\r\n              statusId: \"\",\r\n            });\r\n\r\n            if (data.getDocumentById.dateDue) {\r\n              setDeadline(dayjs(new Date(data.getDocumentById.dateDue)));\r\n            }\r\n            setReferrals(\r\n              data.getDocumentById.referredTo.map((ref) =>\r\n                parseInt(ref.office.id)\r\n              )\r\n            );\r\n            setAssigned(\r\n              data.getDocumentById.directorAssigned.map((officer) => ({\r\n                id: officer.uuid,\r\n                label: `${officer.firstName} ${officer.lastName}`,\r\n                description:\r\n                  officer.office?.name + \" / \" + officer.position?.label,\r\n              }))\r\n            );\r\n            setDisableDeadline(data.getDocumentById.dateDue ? false : true);\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      setFormData(formDefaults);\r\n      setDeadline(dayjs(new Date()));\r\n      setReferrals([]);\r\n    }\r\n  }, [referenceNum, officerId, getDocumentById]);\r\n\r\n  useEffect(() => {\r\n    if (referrals.length > 0) {\r\n      getOfficers({\r\n        variables: {\r\n          officeId: referrals,\r\n        },\r\n      })\r\n        .then(({ data }) => {\r\n          if (data) {\r\n            setOfficers(\r\n              data.getOfficers.map((officer) => ({\r\n                uuid: officer.uuid,\r\n                firstName: officer.firstName,\r\n                lastName: officer.lastName,\r\n                position:\r\n                  officer.office?.name + \" / \" + officer.position?.label,\r\n              }))\r\n            );\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    }\r\n  }, [referrals, getOfficers]);\r\n\r\n  const handleReferralsChange = (selected: number[]) => {\r\n    setReferrals(selected);\r\n  };\r\n\r\n  const handleAssignedChange = (selected: any[]) => {\r\n    setAssigned(selected);\r\n  };\r\n\r\n  const handlePurposeChange = (selected: string[]) => {\r\n    setFormData({\r\n      ...formData,\r\n      purposeIds: selected.filter((p) => p !== \"\").join(\",\"),\r\n    });\r\n  };\r\n\r\n  const handleDeadlineChange = (newValue: Dayjs | null) => {\r\n    if (!newValue) return;\r\n    setDeadline(newValue);\r\n  };\r\n\r\n  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleEnableChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setDisableDeadline(event.target.checked);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (referenceNum) {\r\n      await updateDocument({\r\n        variables: {\r\n          referenceNum: referenceNum,\r\n          subject,\r\n          purposeIds,\r\n          description,\r\n          receivedFrom,\r\n          typeId: parseInt(typeId),\r\n          signatureId: signatureId,\r\n          tag: tag.length === 0 ? null : (tag as Tags),\r\n          dateDue: disableDeadline ? null : deadline.toISOString(),\r\n          assignedTo: assigned.map((officer) => officer.id),\r\n        },\r\n      });\r\n    } else {\r\n      const referredTo = referrals;\r\n\r\n      // include BIN office if there are outsourced officers\r\n      if (assigned.filter(officer => officer.id.includes(\"Add\")).length > 0) {\r\n        referredTo.push(BIN_OFFICE);\r\n      }\r\n\r\n      await createDocument({\r\n        variables: {\r\n          subject,\r\n          description,\r\n          purposeIds,\r\n          receivedFrom,\r\n          typeId: parseInt(typeId),\r\n          signatureId: signatureId,\r\n          tag: tag.length === 0 ? null : (tag as Tags),\r\n          referredTo: referredTo.map((office) => ({\r\n            officeId: office,\r\n            statusId: parseInt(statusId),\r\n          })),\r\n          dateDue: disableDeadline ? null : deadline.toISOString(),\r\n          assignedTo: assigned.map((officer) => officer.id),\r\n        },\r\n      });\r\n    }\r\n\r\n    // clear form data\r\n    setFormData(formDefaults);\r\n    setDeadline(dayjs(new Date()));\r\n    setReferrals([]);\r\n\r\n    await refetch(); // get new reference number\r\n    onClose(); // close dialog\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                {reference && (\r\n                  <Typography variant=\"h6\">\r\n                    {`#${\r\n                      referenceNum\r\n                        ? referenceNum\r\n                        : reference.getTempReferenceNum\r\n                    }`}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12} md={8}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      name=\"subject\"\r\n                      label=\"Subject\"\r\n                      variant=\"outlined\"\r\n                      value={subject}\r\n                      onChange={handleFormChange}\r\n                      multiline\r\n                      rows={referenceNum ? 5 : 4}\r\n                      fullWidth\r\n                      required\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      name=\"description\"\r\n                      label=\"Remarks\"\r\n                      variant=\"outlined\"\r\n                      value={description}\r\n                      onChange={handleFormChange}\r\n                      multiline\r\n                      rows={referenceNum ? 4 : 3}\r\n                      fullWidth\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      name=\"receivedFrom\"\r\n                      label=\"Received From\"\r\n                      variant=\"outlined\"\r\n                      value={receivedFrom}\r\n                      onChange={handleFormChange}\r\n                      fullWidth\r\n                      required\r\n                    />\r\n                  </Grid>\r\n\r\n                  {offices && !referenceNum && (\r\n                    <Grid item xs={12}>\r\n                      <MultiSelect\r\n                        name=\"referredTo\"\r\n                        label=\"Referred To\"\r\n                        selected={referrals}\r\n                        required={assigned.length === 0}\r\n                        options={offices.getOffices.map((office) => ({\r\n                          id: parseInt(office.id),\r\n                          label: office.name,\r\n                        }))}\r\n                        onChange={handleReferralsChange}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n\r\n                  {!referenceNum && (\r\n                    <Grid item xs={12}>\r\n                      <Autocomplete\r\n                        multiple\r\n                        options={officers.map((officer) => ({\r\n                          id: officer.uuid,\r\n                          label: `${officer.firstName} ${officer.lastName}`,\r\n                          description: officer.position,\r\n                        }))}\r\n                        value={assigned}\r\n                        onChange={(_, newValue) => {\r\n                          const outsourced = newValue.filter(\r\n                            (obj) =>\r\n                              obj.id.includes(\"Add\") &&\r\n                              !officers.find(\r\n                                (officer) => officer.uuid === obj.id\r\n                              )\r\n                          );\r\n                          if (outsourced.length > 0) {\r\n                            setOfficers([\r\n                              ...officers,\r\n                              ...outsourced.map((obj) => ({\r\n                                uuid: obj.id,\r\n                                firstName: obj.label.split(\" \", 2)[0],\r\n                                lastName: obj.label.split(\" \", 2)[1],\r\n                                position: \"\",\r\n                              })),\r\n                            ]);\r\n                          }\r\n\r\n                          handleAssignedChange(newValue);\r\n                        }}\r\n                        getOptionKey={(option) => option.id}\r\n                        getOptionLabel={(option) => option.label}\r\n                        isOptionEqualToValue={(option, value) => {\r\n                          return option.id === value.id;\r\n                        }}\r\n                        filterOptions={(options, params) => {\r\n                          const filtered = filter(options, params);\r\n\r\n                          if (params.inputValue !== \"\") {\r\n                            filtered.push({\r\n                              id: `Add ${params.inputValue}`,\r\n                              label: `\"${params.inputValue}\"`,\r\n                              description: \"\",\r\n                            });\r\n                          }\r\n\r\n                          return filtered;\r\n                        }}\r\n                        renderOption={(props, option) => (\r\n                          <Box component=\"li\" {...props}>\r\n                            <Box\r\n                              component=\"div\"\r\n                              sx={{ display: \"flex\", flexDirection: \"column\" }}\r\n                            >\r\n                              <Typography variant=\"body1\">\r\n                                {option.label}\r\n                              </Typography>\r\n                              <Typography\r\n                                variant=\"caption\"\r\n                                color=\"textSecondary\"\r\n                              >\r\n                                {option.description}\r\n                              </Typography>\r\n                            </Box>\r\n                          </Box>\r\n                        )}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            variant=\"outlined\"\r\n                            label=\"Assigned To\"\r\n                          />\r\n                        )}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={4}>\r\n                <Stack spacing={2}>\r\n                  {types && (\r\n                    <TextField\r\n                      name=\"typeId\"\r\n                      select\r\n                      label=\"Document Type\"\r\n                      value={typeId}\r\n                      onChange={handleFormChange}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                    >\r\n                      {types.getDocumentTypes.map((option) => (\r\n                        <MenuItem key={option.id} value={option.id}>\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  )}\r\n\r\n                  {purposes && (\r\n                    <MultiSelect\r\n                      name=\"purposeIds\"\r\n                      label=\"Document Purpose\"\r\n                      required={true}\r\n                      selected={purposeIds.split(\",\").filter((p) => p !== \"\")}\r\n                      options={purposes.getDocumentPurposes.map((purpose) => ({\r\n                        id: purpose.id,\r\n                        label: purpose.label,\r\n                      }))}\r\n                      onChange={handlePurposeChange}\r\n                    />\r\n                  )}\r\n\r\n                  {statuses && !referenceNum && (\r\n                    <TextField\r\n                      name=\"statusId\"\r\n                      select\r\n                      label=\"Document Status\"\r\n                      value={statusId}\r\n                      onChange={handleFormChange}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                    >\r\n                      {statuses.getDocumentStatus\r\n                        .filter(\r\n                          (status) =>\r\n                            status.category === Status.Referred ||\r\n                            status.category === Status.NotActionable ||\r\n                            referenceNum\r\n                        )\r\n                        .map((option) => (\r\n                          <MenuItem key={option.id} value={option.id}>\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                  )}\r\n\r\n                  <TextField\r\n                    name=\"tag\"\r\n                    select\r\n                    label=\"Document Tag\"\r\n                    variant=\"outlined\"\r\n                    value={tag}\r\n                    onChange={handleFormChange}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    <MenuItem value=\"CONFIDENTIAL\">Confidential</MenuItem>\r\n                    <MenuItem value=\"TOP_PRIORITY\">Top Priority</MenuItem>\r\n                    <MenuItem value=\"FOLLOW_UP\">Follow Up</MenuItem>\r\n                  </TextField>\r\n\r\n                  <Stack>\r\n                    <DatePicker\r\n                      label=\"Deadline\"\r\n                      value={deadline}\r\n                      disable={disableDeadline}\r\n                      onChange={handleDeadlineChange}\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={disableDeadline}\r\n                          onChange={handleEnableChange}\r\n                        />\r\n                      }\r\n                      label=\"No Deadline\"\r\n                    />\r\n                  </Stack>\r\n\r\n                  {signatories && (\r\n                    <TextField\r\n                      name=\"signatureId\"\r\n                      select\r\n                      label=\"Signatory\"\r\n                      value={signatureId}\r\n                      onChange={handleFormChange}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                    >\r\n                      {signatories.getSignatories.map((option) => (\r\n                        <MenuItem key={option.uuid} value={option.uuid}>\r\n                          <Stack\r\n                            direction=\"row\"\r\n                            alignItems=\"center\"\r\n                            spacing={2}\r\n                          >\r\n                            <Avatar alt={option.lastName} src={option.avatar} />\r\n                            <Typography variant=\"subtitle2\" noWrap>\r\n                              {`${option.firstName} ${option.lastName}`}\r\n                            </Typography>\r\n                          </Stack>\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  )}\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Stack direction=\"row\" spacing={2}>\r\n              <Button onClick={onClose} color=\"inherit\">\r\n                Cancel\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"inherit\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            </Stack>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n      <Snackbar\r\n        severity=\"error\"\r\n        message={\r\n          officeError?.message ||\r\n          purposeError?.message ||\r\n          createError?.message ||\r\n          updateError?.message ||\r\n          statusError?.message ||\r\n          typesError?.message ||\r\n          referenceError?.message ||\r\n          getError?.message ||\r\n          signatoryError?.message ||\r\n          officersError?.message\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"names":["formDefaults","subject","description","receivedFrom","typeId","purposeIds","statusId","signatureId","tag","BIN_OFFICE","filter","createFilterOptions","FormDialog","_ref","referenceNum","officerId","open","onClose","data","offices","error","officeError","useQuery","GET_OFFICES","fetchPolicy","purposes","purposeError","GET_PURPOSES","statuses","statusError","GET_STATUSES","types","typesError","GET_TYPES","signatories","signatoryError","GET_SIGNATORIES","reference","referenceError","refetch","GET_TEMP_REF_NUM","getDocumentById","getError","useLazyQuery","GET_DOCUMENT_BY_ID","getOfficers","officersError","GET_OFFICERS","createDocument","createError","useMutation","CREATE_DOCUMENT","updateDocument","updateError","UPDATE_DOCUMENT","referrals","setReferrals","useState","deadline","setDeadline","dayjs","Date","disableDeadline","setDisableDeadline","formData","setFormData","officers","setOfficers","assigned","setAssigned","useEffect","variables","then","_ref2","type","id","toString","purpose","map","p","join","signatory","uuid","dateDue","referredTo","ref","parseInt","office","directorAssigned","officer","_officer$office","_officer$position","label","concat","firstName","lastName","name","position","length","officeId","_ref3","_officer$office2","_officer$position2","catch","console","handleFormChange","e","target","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","toISOString","assignedTo","includes","push","DialogContent","Grid","container","spacing","item","xs","Typography","variant","getTempReferenceNum","sm","md","TextField","onChange","multiline","rows","required","MultiSelect","selected","options","getOffices","Autocomplete","multiple","_","newValue","outsourced","obj","find","split","getOptionKey","option","getOptionLabel","isOptionEqualToValue","filterOptions","params","filtered","inputValue","renderOption","props","Box","component","sx","display","flexDirection","color","renderInput","Stack","select","getDocumentTypes","MenuItem","getDocumentPurposes","getDocumentStatus","status","category","Status","Referred","NotActionable","DatePicker","disable","FormControlLabel","control","Checkbox","checked","event","getSignatories","direction","alignItems","Avatar","alt","src","avatar","noWrap","DialogActions","Button","onClick","Snackbar","severity","message"],"sourceRoot":""}