{"version":3,"file":"static/js/880.cab6fbec.chunk.js","mappings":"qUAKO,MAAMA,GAAYC,EAAAA,EAAAA,GAAI,qHAShBC,GAAcD,EAAAA,EAAAA,GAAI,4JASlBE,GAAcF,EAAAA,EAAAA,GAAI,gLASlBG,GAAcH,EAAAA,EAAAA,GAAI,kJAWlBI,GAAeJ,EAAAA,EAAAA,GAAI,2HASnBK,GAAiBL,EAAAA,EAAAA,GAAI,kKASrBM,GAAiBN,EAAAA,EAAAA,GAAI,sLASrBO,GAAiBP,EAAAA,EAAAA,GAAI,sJAWrBQ,GAAeR,EAAAA,EAAAA,GAAI,6IAUnBS,GAAgBT,EAAAA,EAAAA,GAAI,+NAUpBU,GAAgBV,EAAAA,EAAAA,GAAI,mPAUpBW,GAAgBX,EAAAA,EAAAA,GAAI,0KAYpBY,GAAmBZ,EAAAA,EAAAA,GAAI,wEAMvBa,GAAuBb,EAAAA,EAAAA,GAAI,+LAY3Bc,GAAgBd,EAAAA,EAAAA,GAAI,uXAmBpBe,GAAqBf,EAAAA,EAAAA,GAAI,u+BA6CzBgB,GAAkBhB,EAAAA,EAAAA,GAAI,mdAQtBiB,GAAkBjB,EAAAA,EAAAA,GAAI,+fAQtBkB,GAAkBlB,EAAAA,EAAAA,GAAI,2JAQtBmB,GAAyBnB,EAAAA,EAAAA,GAAI,2NAS7BoB,GAAiBpB,EAAAA,EAAAA,GAAI,+PAQrBqB,GAA4BrB,EAAAA,EAAAA,GAAI,wLAShCsB,GAA0BtB,EAAAA,EAAAA,GAAI,qN,mICrP5B,SAASuB,IACpB,MAAQC,KAAMC,EAASC,MAAOC,EAAQ,QAAEC,EAAO,QAAEC,IAAYC,EAAAA,EAAAA,GAASC,EAAAA,GAAa,CAC/EC,YAAa,cAEVC,GAAgBP,MAAOQ,KAAiBC,EAAAA,EAAAA,GAAYC,EAAAA,KACpDC,GAAgBX,MAAOY,KAAiBH,EAAAA,EAAAA,GAAYI,EAAAA,KACpDC,GAAgBd,MAAOe,KAAiBN,EAAAA,EAAAA,GAAYO,EAAAA,IAiC3D,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACKjB,GAAWH,IACXqB,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACVC,MAAM,UACNC,MAAOxB,EAAQyB,WAAWC,KAAIC,IAAM,CAChCC,GAAIC,SAASF,EAAOC,IACpBE,MAAOH,EAAOI,SAElBC,SAxCeC,MAAOH,EAAeI,WACvC1B,EAAa,CACf2B,UAAW,CACPJ,KAAMD,WAIR1B,GAAS,EAkCPgC,SA/BeH,MAAOL,EAAYE,EAAeI,WACnDtB,EAAa,CACfuB,UAAW,CACPP,KACAG,KAAMD,WAIR1B,GAAS,EAwBPiC,SArBeJ,gBACjBlB,EAAa,CACfoB,UAAW,CACPP,cAIFxB,GAAS,KAkBXiB,EAAAA,EAAAA,KAACiB,EAAAA,GAAQ,CACLC,SAAS,QACTC,SAAiB,OAARtC,QAAQ,IAARA,OAAQ,EAARA,EAAUsC,WAAsB,OAAX/B,QAAW,IAAXA,OAAW,EAAXA,EAAa+B,WAC5B,OAAX3B,QAAW,IAAXA,OAAW,EAAXA,EAAa2B,WAAsB,OAAXxB,QAAW,IAAXA,OAAW,EAAXA,EAAawB,aAIzD,C,cC7De,SAASC,IACpB,MAAQ1C,KAAM2C,EAAUzC,MAAOC,EAAQ,QAAEC,EAAO,QAAEC,IAAYC,EAAAA,EAAAA,GAAS1B,EAAAA,GAAc,CACjF4B,YAAa,cAEVoC,GAAiB1C,MAAOQ,KAAiBC,EAAAA,EAAAA,GAAY9B,EAAAA,KACrDgE,GAAiB3C,MAAOY,KAAiBH,EAAAA,EAAAA,GAAY7B,EAAAA,KACrDgE,GAAiB5C,MAAOe,KAAiBN,EAAAA,EAAAA,GAAY5B,EAAAA,IAiC5D,OACIoC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACKjB,GAAWuC,IACXrB,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACVC,MAAM,mBACNC,MAAOkB,EAASI,oBAAoBpB,KAAIqB,IAAO,CAC3CnB,GAAIC,SAASkB,EAAQnB,IACrBE,MAAOiB,EAAQjB,UAEnBE,SAxCgBC,MAAOH,EAAeI,WACxCS,EAAc,CAChBR,UAAW,CACPL,iBAIF1B,GAAS,EAkCPgC,SA/BgBH,MAAOL,EAAYE,EAAeI,WACpDU,EAAc,CAChBT,UAAW,CACPP,KACAE,iBAIF1B,GAAS,EAwBPiC,SArBgBJ,gBAClBY,EAAc,CAChBV,UAAW,CACPP,cAIFxB,GAAS,KAkBXiB,EAAAA,EAAAA,KAACiB,EAAAA,GAAQ,CACLC,SAAS,QACTC,SAAiB,OAARtC,QAAQ,IAARA,OAAQ,EAARA,EAAUsC,WAAsB,OAAX/B,QAAW,IAAXA,OAAW,EAAXA,EAAa+B,WAC5B,OAAX3B,QAAW,IAAXA,OAAW,EAAXA,EAAa2B,WAAsB,OAAXxB,QAAW,IAAXA,OAAW,EAAXA,EAAawB,aAIzD,CC5De,SAASQ,IACpB,MAAQjD,KAAMkD,EAAUhD,MAAOC,EAAQ,QAAEC,EAAO,QAAEC,IAAYC,EAAAA,EAAAA,GAAStB,EAAAA,GAAc,CACjFwB,YAAa,cAEV2C,GAAgBjD,MAAOQ,KAAiBC,EAAAA,EAAAA,GAAY1B,EAAAA,KACpDmE,GAAgBlD,MAAOY,KAAiBH,EAAAA,EAAAA,GAAYzB,EAAAA,KACpDmE,GAAgBnD,MAAOe,KAAiBN,EAAAA,EAAAA,GAAYxB,EAAAA,IAuC3D,OACIgC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACKjB,GAAW8C,IACX5B,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACVC,MAAM,kBACNC,MAAOyB,EAASI,kBAAkB3B,KAAI4B,IAAM,CACxC1B,GAAIC,SAASyB,EAAO1B,IACpBE,MAAOwB,EAAOxB,MACdI,SAAUoB,EAAOpB,aAErBqB,WAAY,CACR,CAAEzB,MAAO,WAAY0B,MAAO,YAC5B,CAAE1B,MAAO,iBAAkB0B,MAAO,kBAClC,CAAE1B,MAAO,cAAe0B,MAAO,eAC/B,CAAE1B,MAAO,WAAY0B,MAAO,YAEhCxB,SArDeC,MAAOH,EAAeI,KACxCA,UAECgB,EAAa,CACff,UAAW,CACPL,QACAI,SAAUA,WAIZ9B,IAAS,EA4CPgC,SAzCeH,MAAOL,EAAYE,EAAeI,KACpDA,UAECiB,EAAa,CACfhB,UAAW,CACPP,KACAE,QACAI,SAAUA,WAIZ9B,IAAS,EA+BPiC,SA5BeJ,gBACjBmB,EAAa,CACfjB,UAAW,CACPP,cAIFxB,GAAS,KAyBXiB,EAAAA,EAAAA,KAACiB,EAAAA,GAAQ,CACLC,SAAS,QACTC,SAAiB,OAARtC,QAAQ,IAARA,OAAQ,EAARA,EAAUsC,WAAsB,OAAX/B,QAAW,IAAXA,OAAW,EAAXA,EAAa+B,WAC5B,OAAX3B,QAAW,IAAXA,OAAW,EAAXA,EAAa2B,WAAsB,OAAXxB,QAAW,IAAXA,OAAW,EAAXA,EAAawB,aAIzD,CC3Ee,SAASiB,IACpB,MAAQ1D,KAAM2D,EAAOzD,MAAOC,EAAQ,QAAEC,EAAO,QAAEC,IAAYC,EAAAA,EAAAA,GAAS/B,EAAAA,GAAW,CAC3EiC,YAAa,cAEVoD,GAAc1D,MAAOQ,KAAiBC,EAAAA,EAAAA,GAAYlC,EAAAA,KAClDoF,GAAc3D,MAAOY,KAAiBH,EAAAA,EAAAA,GAAYjC,EAAAA,KAClDoF,GAAc5D,MAAOe,KAAiBN,EAAAA,EAAAA,GAAYhC,EAAAA,IAiCzD,OACIwC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACKjB,GAAWuD,IACXrC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACVC,MAAM,iBACNC,MAAOkC,EAAMI,iBAAiBpC,KAAIqC,IAAI,CAClCnC,GAAIC,SAASkC,EAAKnC,IAClBE,MAAOiC,EAAKjC,UAEhBE,SAxCaC,MAAOH,EAAeI,WACrCyB,EAAW,CACbxB,UAAW,CACPL,iBAIF1B,GAAS,EAkCPgC,SA/BaH,MAAOL,EAAYE,EAAeI,WACjD0B,EAAW,CACbzB,UAAW,CACPP,KACAE,iBAIF1B,GAAS,EAwBPiC,SArBaJ,gBACf4B,EAAW,CACb1B,UAAW,CACPP,cAIFxB,GAAS,KAkBXiB,EAAAA,EAAAA,KAACiB,EAAAA,GAAQ,CACLC,SAAS,QACTC,SAAiB,OAARtC,QAAQ,IAARA,OAAQ,EAARA,EAAUsC,WAAsB,OAAX/B,QAAW,IAAXA,OAAW,EAAXA,EAAa+B,WAC5B,OAAX3B,QAAW,IAAXA,OAAW,EAAXA,EAAa2B,WAAsB,OAAXxB,QAAW,IAAXA,OAAW,EAAXA,EAAawB,aAIzD,CC5De,SAASwB,IACpB,MAAQjE,KAAMkE,EAAWhE,MAAOC,EAAQ,QAAEC,EAAO,QAAEC,IAAYC,EAAAA,EAAAA,GAAS6D,EAAAA,GAAe,CACnF3D,YAAa,cAEV4D,GAAkBlE,MAAOQ,KAAiBC,EAAAA,EAAAA,GAAY0D,EAAAA,KACtDC,GAAkBpE,MAAOY,KAAiBH,EAAAA,EAAAA,GAAY4D,EAAAA,KACtDC,GAAkBtE,MAAOe,KAAiBN,EAAAA,EAAAA,GAAY8D,EAAAA,IAuC7D,OACItD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACKjB,GAAW8D,IACX5C,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACVC,MAAM,YACNC,MAAOyC,EAAUQ,aAAa/C,KAAIgD,IAAQ,CACtC9C,GAAIC,SAAS6C,EAAS9C,IACtBE,MAAO4C,EAAS5C,MAChBI,SAAUwC,EAASC,SAEvBpB,WAAY,CACR,CAAEzB,MAAO,UAAW0B,MAAO,WAC3B,CAAE1B,MAAO,QAAS0B,MAAO,SACzB,CAAE1B,MAAO,WAAY0B,MAAO,YAC5B,CAAE1B,MAAO,YAAa0B,MAAO,aAC7B,CAAE1B,MAAO,WAAY0B,MAAO,aAEhCxB,SAtDiBC,MAAOH,EAAe6C,KAC1CA,UAECR,EAAe,CACjBhC,UAAW,CACPL,QACA6C,KAAMA,WAIRvE,IAAS,EA6CPgC,SA1CiBH,MAAOL,EAAYE,EAAe6C,KACtDA,UAECN,EAAe,CACjBlC,UAAW,CACPP,KACAE,QACA6C,KAAMA,WAIRvE,IAAS,EAgCPiC,SA7BiBJ,gBACnBsC,EAAe,CACjBpC,UAAW,CACPP,cAIFxB,GAAS,KA0BXiB,EAAAA,EAAAA,KAACiB,EAAAA,GAAQ,CACLC,SAAS,QACTC,SAAiB,OAARtC,QAAQ,IAARA,OAAQ,EAARA,EAAUsC,WAAsB,OAAX/B,QAAW,IAAXA,OAAW,EAAXA,EAAa+B,WAC5B,OAAX3B,QAAW,IAAXA,OAAW,EAAXA,EAAa2B,WAAsB,OAAXxB,QAAW,IAAXA,OAAW,EAAXA,EAAawB,aAIzD,CC1Ee,SAASoC,IACpB,OACIvD,EAAAA,EAAAA,KAACwD,EAAAA,EAAS,CAAAzD,UACNF,EAAAA,EAAAA,MAAC4D,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE5D,SAAA,EACvBC,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAG9D,UACdC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAU,CAACC,QAAQ,KAAIhE,SAAC,gBAG7BC,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIG,GAAI,EAAGC,GAAI,EAAElE,UAC5BC,EAAAA,EAAAA,KAACkE,EAAU,OAGflE,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIG,GAAI,EAAGC,GAAI,EAAElE,UAC5BC,EAAAA,EAAAA,KAACmE,EAAW,OAGhBnE,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIG,GAAI,EAAGC,GAAI,EAAElE,UAC5BC,EAAAA,EAAAA,KAACoE,EAAS,OAGdpE,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIG,GAAI,EAAGC,GAAI,EAAElE,UAC5BC,EAAAA,EAAAA,KAACqE,EAAU,OAGfrE,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIG,GAAI,EAAGC,GAAI,EAAElE,UAC5BC,EAAAA,EAAAA,KAACsE,EAAa,UAMlC,C,4GC2BM,SAAUjF,EAMdkF,EACAC,GAOA,IAAMC,GAASC,EAAAA,EAAAA,GAAuB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASC,SACxCE,EAAAA,EAAAA,IAAmBJ,EAAUK,EAAAA,GAAaC,UACpC,IAAAC,EAAsBC,EAAAA,SAA8C,CACxEC,QAAQ,EACRlG,SAAS,EACT2F,OAAMA,IAHDQ,EAAMH,EAAA,GAAEI,EAASJ,EAAA,GAMlBK,EAAMJ,EAAAA,OAAa,CACvBE,OAAMA,EACNG,WAAY,EACZC,WAAW,EACXZ,OAAMA,EACNF,SAAQA,EACRC,QAAOA,IAMPc,OAAOC,OAAOJ,EAAIK,QAAS,CAAEf,OAAMA,EAAED,QAAOA,EAAED,SAAQA,IAGxD,IAAMkB,EAAUV,EAAAA,aACd,SACEW,QAAA,IAAAA,IAAAA,EAAA,IAOM,IAAAZ,EAAwBK,EAAIK,QAA1BhB,EAAOM,EAAAN,QAAED,EAAQO,EAAAP,SACnBoB,GAAWC,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAA,GAAQpB,GAAO,CAAED,SAAQA,IACpCE,EAASiB,EAAejB,QAAUU,EAAIK,QAAQf,OAGjDU,EAAIK,QAAQP,OAAOnG,SACnB6G,EAAYE,gBACbV,EAAIK,QAAQH,WAEZH,EACGC,EAAIK,QAAQP,OAAS,CACpBnG,SAAS,EACTF,WAAO,EACPF,UAAM,EACNsG,QAAQ,EACRP,OAAMA,IAKZ,IAAMW,IAAeD,EAAIK,QAAQJ,WAC3BU,GAAgBC,EAAAA,EAAAA,GAAaJ,EAAaD,GAEhD,OAAOjB,EACJuB,OAAOF,GACPG,MAAK,SAACC,G,QACGxH,EAAiBwH,EAAQxH,KAAnByH,EAAWD,EAAQC,OAC3BvH,EACJuH,GAAUA,EAAOC,OAAS,EACxB,IAAIC,EAAAA,GAAY,CAAEC,cAAeH,SACjC,EAEEI,EACJb,EAAea,UAA8B,QAAnBzB,EAAAK,EAAIK,QAAQhB,eAAO,IAAAM,OAAA,EAAAA,EAAEyB,SASjD,GAPI3H,GAAS2H,GACXA,EACE3H,EACAkH,GAKFV,IAAeD,EAAIK,QAAQJ,aAC1BU,EAAcD,cACf,CACA,IAAMW,EAAS,CACbxB,QAAQ,EACRlG,SAAS,EACTJ,KAAIA,EACJE,MAAKA,EACL6F,OAAMA,GAGJU,EAAIK,QAAQH,aAAcoB,EAAAA,EAAAA,GAAMtB,EAAIK,QAAQP,OAAQuB,IACtDtB,EAAWC,EAAIK,QAAQP,OAASuB,EAEpC,CAEA,IAAME,EACJhB,EAAegB,cAAkC,QAAnBC,EAAAxB,EAAIK,QAAQhB,eAAO,IAAAmC,OAAA,EAAAA,EAAED,aASrD,OAPK9H,GACQ,OAAX8H,QAAW,IAAXA,GAAAA,EACER,EAASxH,KACToH,GAIGI,CACT,IACCU,OAAM,SAAChI,G,MACN,GAAIwG,IAAeD,EAAIK,QAAQJ,YAAcD,EAAIK,QAAQH,UAAW,CAClE,IAAMwB,EAAS,CACb/H,SAAS,EACTF,MAAKA,EACLF,UAAM,EACNsG,QAAQ,EACRP,OAAMA,IAGHgC,EAAAA,EAAAA,GAAMtB,EAAIK,QAAQP,OAAQ4B,IAC7B3B,EAAWC,EAAIK,QAAQP,OAAS4B,EAEpC,CAEA,IAAMN,EACJb,EAAea,UAA8B,QAAnBzB,EAAAK,EAAIK,QAAQhB,eAAO,IAAAM,OAAA,EAAAA,EAAEyB,SAEjD,GAAIA,EAOF,OANAA,EACE3H,EACAkH,GAIK,CAAEpH,UAAM,EAAQyH,OAAQvH,GAGjC,MAAMA,CACR,GACJ,GACA,IAGIkI,EAAQ/B,EAAAA,aAAkB,WAC9B,GAAII,EAAIK,QAAQH,UAAW,CACzB,IAAM0B,EAAS,CAAE/B,QAAQ,EAAOlG,SAAS,EAAO2F,OAAMA,GACtDa,OAAOC,OAAOJ,EAAIK,QAAS,CAAEJ,WAAY,EAAGH,OAAM8B,IAClD7B,EAAU6B,EACZ,CACF,GAAG,IAUH,OARAhC,EAAAA,WAAgB,WAGd,OAFAI,EAAIK,QAAQH,WAAY,EAEjB,WACLF,EAAIK,QAAQH,WAAY,CAC1B,CACF,GAAG,IAEI,CAACI,GAAOG,EAAAA,EAAAA,IAAA,CAAIkB,MAAKA,GAAK7B,GAC/B,C","sources":["graphql/documents/index.tsx","sections/settings/cards/offices.tsx","sections/settings/cards/purposes.tsx","sections/settings/cards/status.tsx","sections/settings/cards/types.tsx","sections/settings/cards/positions.tsx","sections/settings/index.tsx","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { gql } from '../../__generated__/gql';\r\n\r\n\r\n// ================================ TYPES =================================\r\n\r\nexport const GET_TYPES = gql(`\r\n    query GetDocumentTypes {\r\n        getDocumentTypes {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_TYPE = gql(`\r\n    mutation CreateDocumentType($label: String!) {\r\n        createDocumentType(label: $label) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_TYPE = gql(`\r\n    mutation UpdateDocumentType($id: Int!, $label: String!) {\r\n        updateDocumentType(id: $id, label: $label) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_TYPE = gql(`\r\n    mutation DeleteDocumentType($id: Int!) {\r\n        deleteDocumentType(id: $id) {\r\n            id  \r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\n// ================================ PURPOSES =================================\r\n\r\nexport const GET_PURPOSES = gql(`\r\n    query GetDocumentPurposes {\r\n        getDocumentPurposes {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_PURPOSE = gql(`\r\n    mutation CreateDocumentPurpose($label: String!) {\r\n        createDocumentPurpose(label: $label) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_PURPOSE = gql(`\r\n    mutation UpdateDocumentPurpose($id: Int!, $label: String!) {\r\n        updateDocumentPurpose(id: $id, label: $label) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_PURPOSE = gql(`\r\n    mutation DeleteDocumentPurpose($id: Int!) {\r\n        deleteDocumentPurpose(id: $id) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\n// ================================ STATUS =================================\r\n\r\nexport const GET_STATUSES = gql(`\r\n    query GetDocumentStatus {\r\n        getDocumentStatus {\r\n            id\r\n            label\r\n            category\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_STATUS = gql(`\r\n    mutation CreateDocumentStatus($label: String!, $category: Status!) {\r\n        createDocumentStatus(label: $label, category: $category) {\r\n            id\r\n            label\r\n            category\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_STATUS = gql(`\r\n    mutation UpdateDocumentStatus($id: Int!, $label: String!, $category: Status!) {\r\n        updateDocumentStatus(id: $id, label: $label, category: $category) {\r\n            id\r\n            label\r\n            category\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_STATUS = gql(`\r\n    mutation DeleteDocumentStatus($id: Int!) {\r\n        deleteDocumentStatus(id: $id) {\r\n            id\r\n            label\r\n            category\r\n        }\r\n    }\r\n`);\r\n\r\n// ================================ DOCUMENTS =================================\r\n\r\nexport const GET_TEMP_REF_NUM = gql(`\r\n    query TempReferenceNum {\r\n        getTempReferenceNum\r\n    }\r\n`)\r\n\r\nexport const GET_DOCUMENT_SUMMARY = gql(`\r\n    query GetDocumentSummary {\r\n        getDocumentSummary {\r\n            closed\r\n            noaction\r\n            office\r\n            ongoing\r\n            referred\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_DOCUMENTS = gql(`\r\n    query GetDocuments($officeId: Int) {\r\n        getDocuments(officeId: $officeId) {\r\n            referenceNum\r\n            subject\r\n            receivedFrom\r\n            refferedTo {\r\n                name\r\n            }\r\n            tag\r\n            status {\r\n                label\r\n                category\r\n            }\r\n            dateCreated\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_DOCUMENT_BY_ID = gql(`\r\n    query GetDocumentById($referenceNum: String!) {\r\n        getDocumentById(referenceNum: $referenceNum) {\r\n            referenceNum\r\n            subject\r\n            description\r\n            receivedFrom\r\n            refferedTo {\r\n                id\r\n                name\r\n            }\r\n            type {\r\n                id\r\n                label\r\n            }\r\n            purpose {\r\n                id\r\n                label\r\n            }\r\n            tag\r\n            status {\r\n                id\r\n                label\r\n                category\r\n            }\r\n            dateCreated\r\n            dateDue\r\n            comments {\r\n                id\r\n                sender {\r\n                    uuid\r\n                    firstName\r\n                    lastName\r\n                    position {\r\n                        label\r\n                    }\r\n                }   \r\n                files\r\n                message\r\n                dateCreated\r\n            }\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_DOCUMENT = gql(`\r\n    mutation CreateDocument($subject: String!, $description: String!, $receivedFrom: String!, $typeId: Int!, $purposeId: Int!, $statusId: Int!, $dateDue: String!, $refferedTo: [Int!]!, $tag: Tags) {\r\n        createDocument(subject: $subject, description: $description, receivedFrom: $receivedFrom, typeId: $typeId, purposeId: $purposeId, statusId: $statusId, dateDue: $dateDue, refferedTo: $refferedTo, tag: $tag) {\r\n            referenceNum\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_DOCUMENT = gql(`\r\n    mutation UpdateDocument($referenceNum: String!, $subject: String, $description: String, $receivedFrom: String, $typeId: Int, $purposeId: Int, $statusId: Int, $tag: Tags, $dateDue: String, $refferedTo: [Int]) {\r\n        updateDocument(referenceNum: $referenceNum, subject: $subject, description: $description, receivedFrom: $receivedFrom, typeId: $typeId, purposeId: $purposeId, statusId: $statusId, tag: $tag, dateDue: $dateDue, refferedTo: $refferedTo) {\r\n            referenceNum\r\n        }\r\n    }\r\n`)\r\n\r\nexport const DELETE_DOCUMENT = gql(`\r\n    mutation DeleteDocument($referenceNum: String!) {\r\n        deleteDocument(referenceNum: $referenceNum) {\r\n            subject\r\n        }\r\n    }\r\n`)\r\n\r\nexport const UPDATE_DOCUMENT_STATUS = gql(`\r\n    mutation DocumentUpdateStatus($referenceNum: String!, $statusId: Int!) {\r\n        documentUpdateStatus(referenceNum: $referenceNum, statusId: $statusId) {\r\n            id\r\n            label\r\n        }\r\n    }\r\n`)\r\n\r\nexport const CREATE_COMMENT = gql(`\r\n    mutation CreateComment($documentId: String!, $senderId: String!, $message: String!, $files: [String!]) {\r\n        createComment(documentId: $documentId, senderId: $senderId, message: $message, files: $files) {\r\n            id\r\n        }\r\n    }\r\n`)\r\n\r\nexport const SUBSCRIBE_DOCUMENT_EVENTS = gql(`\r\n    subscription DocumentEvents($referenceNum: String!) {\r\n        documentEvents(referenceNum: $referenceNum) {\r\n            eventDate\r\n            eventName\r\n        }\r\n    }\r\n`)\r\n\r\nexport const GET_DOCUMENT_STATISTICS = gql(`\r\n    query GetDocumentStatistics($officeId: Int) {\r\n        getDocumentStatistics(officeId: $officeId) {\r\n            closed\r\n            noaction\r\n            ongoing\r\n            referred\r\n        }\r\n    }\r\n`)","import { useMutation, useQuery } from '@apollo/client';\r\nimport { SettingsCard, Snackbar } from '../../../components';\r\n\r\nimport { \r\n    GET_OFFICES,\r\n    CREATE_OFFICE,\r\n    UPDATE_OFFICE,\r\n    DELETE_OFFICE \r\n} from '../../../graphql/users';\r\n\r\nexport default function OfficeSettingsCard() {\r\n    const { data: offices, error: getError, loading, refetch } = useQuery(GET_OFFICES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const [createOffice, { error: createError }] = useMutation(CREATE_OFFICE);\r\n    const [updateOffice, { error: updateError }] = useMutation(UPDATE_OFFICE);\r\n    const [deleteOffice, { error: deleteError }] = useMutation(DELETE_OFFICE);\r\n\r\n    const handleCreateOffice = async (label: string, category?: string) => {\r\n        await createOffice({\r\n            variables: {\r\n                name: label\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    const handleUpdateOffice = async (id: number, label: string, category?: string) => {\r\n        await updateOffice({\r\n            variables: {\r\n                id,\r\n                name: label\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    const handleDeleteOffice = async (id: number) => {\r\n        await deleteOffice({\r\n            variables: {\r\n                id\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n           {!loading && offices && (\r\n             <SettingsCard \r\n                title=\"Offices\"\r\n                items={offices.getOffices.map(office => ({\r\n                    id: parseInt(office.id),\r\n                    label: office.name\r\n                }))}\r\n                onCreate={handleCreateOffice}\r\n                onUpdate={handleUpdateOffice}\r\n                onDelete={handleDeleteOffice}\r\n            />\r\n           )}\r\n\r\n            <Snackbar \r\n                severity='error' \r\n                message={getError?.message || createError?.message ||\r\n                    updateError?.message || deleteError?.message} \r\n            />\r\n        </>\r\n    );\r\n}","import { useMutation, useQuery } from '@apollo/client';\r\nimport { SettingsCard, Snackbar } from '../../../components';\r\n\r\nimport { \r\n    GET_PURPOSES,\r\n    CREATE_PURPOSE,\r\n    UPDATE_PURPOSE,\r\n    DELETE_PURPOSE \r\n} from '../../../graphql/documents';\r\n\r\nexport default function PurposeSettingsCard() {\r\n    const { data: purposes, error: getError, loading, refetch } = useQuery(GET_PURPOSES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const [createPurpose, { error: createError }] = useMutation(CREATE_PURPOSE);\r\n    const [updatePurpose, { error: updateError }] = useMutation(UPDATE_PURPOSE);\r\n    const [deletePurpose, { error: deleteError }] = useMutation(DELETE_PURPOSE);\r\n\r\n    const handleCreatePurpose = async (label: string, category?: string) => {\r\n        await createPurpose({\r\n            variables: {\r\n                label\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    const handleUpdatePurpose = async (id: number, label: string, category?: string) => {\r\n        await updatePurpose({\r\n            variables: {\r\n                id,\r\n                label\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    const handleDeletePurpose = async (id: number) => {\r\n        await deletePurpose({\r\n            variables: {\r\n                id\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n           {!loading && purposes && (\r\n             <SettingsCard \r\n                title=\"Document Purpose\"\r\n                items={purposes.getDocumentPurposes.map(purpose => ({\r\n                    id: parseInt(purpose.id),\r\n                    label: purpose.label\r\n                }))}\r\n                onCreate={handleCreatePurpose}\r\n                onUpdate={handleUpdatePurpose}\r\n                onDelete={handleDeletePurpose}\r\n            />\r\n           )}\r\n\r\n            <Snackbar \r\n                severity='error' \r\n                message={getError?.message || createError?.message ||\r\n                    updateError?.message || deleteError?.message} \r\n            />\r\n        </>\r\n    );\r\n}","import { useMutation, useQuery } from '@apollo/client';\r\nimport { SettingsCard, Snackbar } from '../../../components';\r\n\r\nimport { Status } from '../../../__generated__/graphql';\r\nimport { \r\n    GET_STATUSES,\r\n    CREATE_STATUS,\r\n    UPDATE_STATUS,\r\n    DELETE_STATUS\r\n} from '../../../graphql/documents';\r\n\r\nexport default function StatusSettingsCard() {\r\n    const { data: statuses, error: getError, loading, refetch } = useQuery(GET_STATUSES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const [createStatus, { error: createError }] = useMutation(CREATE_STATUS);\r\n    const [updateStatus, { error: updateError }] = useMutation(UPDATE_STATUS);\r\n    const [deleteStatus, { error: deleteError }] = useMutation(DELETE_STATUS);\r\n\r\n    const handleCreateStatus = async (label: string, category?: string) => {\r\n        if (!category) return;\r\n\r\n        await createStatus({\r\n            variables: {\r\n                label,\r\n                category: category as Status\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    const handleUpdateStatus = async (id: number, label: string, category?: string) => {\r\n        if (!category) return;\r\n\r\n        await updateStatus({\r\n            variables: {\r\n                id,\r\n                label,\r\n                category: category as Status\r\n            }\r\n        });\r\n        \r\n        await refetch();\r\n    }\r\n\r\n    const handleDeleteStatus = async (id: number) => {\r\n        await deleteStatus({\r\n            variables: {\r\n                id\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n           {!loading && statuses && (\r\n             <SettingsCard \r\n                title=\"Document Status\"\r\n                items={statuses.getDocumentStatus.map(status => ({\r\n                    id: parseInt(status.id),\r\n                    label: status.label,\r\n                    category: status.category\r\n                }))}\r\n                categories={[\r\n                    { label: \"Finished\", value: \"FINISHED\" },\r\n                    { label: \"Not Actionable\", value: \"NOT_ACTIONABLE\" },\r\n                    { label: \"Not Started\", value: \"NOT_STARTED\" },\r\n                    { label: \"On Going\", value: \"ONGOING\" },\r\n                ]}\r\n                onCreate={handleCreateStatus}\r\n                onUpdate={handleUpdateStatus}\r\n                onDelete={handleDeleteStatus}\r\n            />\r\n           )}\r\n\r\n            <Snackbar \r\n                severity='error' \r\n                message={getError?.message || createError?.message ||\r\n                    updateError?.message || deleteError?.message} \r\n            />\r\n        </>\r\n    );\r\n}","import { useMutation, useQuery } from '@apollo/client';\r\nimport { SettingsCard, Snackbar } from '../../../components';\r\n\r\nimport { \r\n    GET_TYPES,\r\n    CREATE_TYPE,\r\n    UPDATE_TYPE,\r\n    DELETE_TYPE \r\n} from '../../../graphql/documents';\r\n\r\nexport default function TypesSettingsCard() {\r\n    const { data: types, error: getError, loading, refetch } = useQuery(GET_TYPES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const [createType, { error: createError }] = useMutation(CREATE_TYPE);\r\n    const [updateType, { error: updateError }] = useMutation(UPDATE_TYPE);\r\n    const [deleteType, { error: deleteError }] = useMutation(DELETE_TYPE);\r\n\r\n    const handleCreateType = async (label: string, category?: string) => {\r\n        await createType({\r\n            variables: {\r\n                label\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    const handleUpdateType = async (id: number, label: string, category?: string) => {\r\n        await updateType({\r\n            variables: {\r\n                id,\r\n                label\r\n            }\r\n        });\r\n        \r\n        await refetch();\r\n    }\r\n\r\n    const handleDeleteType = async (id: number) => {\r\n        await deleteType({\r\n            variables: {\r\n                id\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n           {!loading && types && (\r\n             <SettingsCard \r\n                title=\"Document Types\"\r\n                items={types.getDocumentTypes.map(type => ({\r\n                    id: parseInt(type.id),\r\n                    label: type.label\r\n                }))}\r\n                onCreate={handleCreateType}\r\n                onUpdate={handleUpdateType}\r\n                onDelete={handleDeleteType}\r\n            />\r\n           )}\r\n\r\n            <Snackbar \r\n                severity='error' \r\n                message={getError?.message || createError?.message ||\r\n                    updateError?.message || deleteError?.message} \r\n            />\r\n        </>\r\n    );\r\n}","import { useMutation, useQuery } from '@apollo/client';\r\nimport { SettingsCard, Snackbar } from '../../../components';\r\n\r\nimport { Role } from '../../../__generated__/graphql';\r\nimport { \r\n    GET_POSITIONS,\r\n    CREATE_POSITION,\r\n    UPDATE_POSITION,\r\n    DELETE_POSITION,\r\n} from '../../../graphql/users';\r\n\r\nexport default function PositionSettingsCard() {\r\n    const { data: positions, error: getError, loading, refetch } = useQuery(GET_POSITIONS, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const [createPosition, { error: createError }] = useMutation(CREATE_POSITION);\r\n    const [updatePosition, { error: updateError }] = useMutation(UPDATE_POSITION);\r\n    const [deletePosition, { error: deleteError }] = useMutation(DELETE_POSITION);\r\n\r\n    const handleCreatePosition = async (label: string, role?: string) => {\r\n        if (!role) return;\r\n\r\n        await createPosition({\r\n            variables: {\r\n                label,\r\n                role: role as Role\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    const handleUpdatePosition = async (id: number, label: string, role?: string) => {\r\n        if (!role) return;\r\n\r\n        await updatePosition({\r\n            variables: {\r\n                id,\r\n                label,\r\n                role: role as Role\r\n            }\r\n        });\r\n        \r\n        await refetch();\r\n    }\r\n\r\n    const handleDeletePosition = async (id: number) => {\r\n        await deletePosition({\r\n            variables: {\r\n                id\r\n            }\r\n        });\r\n\r\n        await refetch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n           {!loading && positions && (\r\n             <SettingsCard \r\n                title=\"Positions\"\r\n                items={positions.getPositions.map(position => ({\r\n                    id: parseInt(position.id),\r\n                    label: position.label,\r\n                    category: position.role\r\n                }))}\r\n                categories={[\r\n                    { label: \"Officer\", value: \"OFFICER\" },\r\n                    { label: \"Chief\", value: \"CHIEF\" },\r\n                    { label: \"Director\", value: \"DIRECTOR\" },\r\n                    { label: \"Superuser\", value: \"SUPERUSER\" },\r\n                    { label: \"HR Admin\", value: \"HR_ADMIN\" }\r\n                ]}\r\n                onCreate={handleCreatePosition}\r\n                onUpdate={handleUpdatePosition}\r\n                onDelete={handleDeletePosition}\r\n            />\r\n           )}\r\n\r\n            <Snackbar \r\n                severity='error' \r\n                message={getError?.message || createError?.message ||\r\n                    updateError?.message || deleteError?.message} \r\n            />\r\n        </>\r\n    );\r\n}","import Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport {\r\n    OfficeCard,\r\n    PurposeCard,\r\n    StatusCard,\r\n    TypesCard,\r\n    PositionsCard\r\n} from './cards';\r\n\r\nexport default function SettingsPage() {\r\n    return (\r\n        <Container>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h4\">Settings</Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <OfficeCard />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <PurposeCard />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <TypesCard />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <StatusCard />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <PositionsCard />\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}","import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = { called: false, loading: false, client };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["GET_TYPES","gql","CREATE_TYPE","UPDATE_TYPE","DELETE_TYPE","GET_PURPOSES","CREATE_PURPOSE","UPDATE_PURPOSE","DELETE_PURPOSE","GET_STATUSES","CREATE_STATUS","UPDATE_STATUS","DELETE_STATUS","GET_TEMP_REF_NUM","GET_DOCUMENT_SUMMARY","GET_DOCUMENTS","GET_DOCUMENT_BY_ID","CREATE_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","UPDATE_DOCUMENT_STATUS","CREATE_COMMENT","SUBSCRIBE_DOCUMENT_EVENTS","GET_DOCUMENT_STATISTICS","OfficeSettingsCard","data","offices","error","getError","loading","refetch","useQuery","GET_OFFICES","fetchPolicy","createOffice","createError","useMutation","CREATE_OFFICE","updateOffice","updateError","UPDATE_OFFICE","deleteOffice","deleteError","DELETE_OFFICE","_jsxs","_Fragment","children","_jsx","SettingsCard","title","items","getOffices","map","office","id","parseInt","label","name","onCreate","async","category","variables","onUpdate","onDelete","Snackbar","severity","message","PurposeSettingsCard","purposes","createPurpose","updatePurpose","deletePurpose","getDocumentPurposes","purpose","StatusSettingsCard","statuses","createStatus","updateStatus","deleteStatus","getDocumentStatus","status","categories","value","TypesSettingsCard","types","createType","updateType","deleteType","getDocumentTypes","type","PositionSettingsCard","positions","GET_POSITIONS","createPosition","CREATE_POSITION","updatePosition","UPDATE_POSITION","deletePosition","DELETE_POSITION","getPositions","position","role","SettingsPage","Container","Grid","container","spacing","item","xs","Typography","variant","sm","md","OfficeCard","PurposeCard","TypesCard","StatusCard","PositionsCard","mutation","options","client","useApolloClient","verifyDocumentType","DocumentType","Mutation","_a","React","called","result","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","__assign","ignoreResults","clientOptions","mergeOptions","mutate","then","response","errors","length","ApolloError","graphQLErrors","onError","result_1","equal","onCompleted","_b","catch","result_2","reset","result_3"],"sourceRoot":""}