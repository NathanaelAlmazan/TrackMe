{"version":3,"file":"static/js/156.d1774e3a.chunk.js","mappings":"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","sources":["sections/documents/form-dialog/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\n\r\nimport { useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\r\nimport dayjs, { Dayjs } from \"dayjs\";\r\n\r\nimport { MultiSelect, DatePicker, Snackbar } from \"../../../components\";\r\nimport { GET_OFFICES, GET_SIGNATORIES } from \"../../../graphql/users\";\r\nimport {\r\n  GET_PURPOSES,\r\n  GET_STATUSES,\r\n  GET_TYPES,\r\n  GET_TEMP_REF_NUM,\r\n  CREATE_DOCUMENT,\r\n  GET_DOCUMENT_BY_ID,\r\n  UPDATE_DOCUMENT,\r\n} from \"../../../graphql/documents\";\r\nimport { Status, Tags } from \"../../../__generated__/graphql\";\r\n\r\ninterface DocumentForm {\r\n  subject: string;\r\n  description: string;\r\n  receivedFrom: string;\r\n  typeId: string;\r\n  purposeId: string;\r\n  statusId: string;\r\n  signatureId: string;\r\n  tag: string;\r\n}\r\n\r\nconst formDefaults = {\r\n  subject: \"\",\r\n  description: \"\",\r\n  receivedFrom: \"\",\r\n  typeId: \"\",\r\n  purposeId: \"\",\r\n  statusId: \"\",\r\n  signatureId: \"\",\r\n  tag: \"\",\r\n};\r\n\r\nexport default function FormDialog({\r\n  referenceNum,\r\n  officerId,\r\n  open,\r\n  onClose,\r\n}: {\r\n  referenceNum: string | null;\r\n  officerId: string;\r\n  open: boolean;\r\n  onClose: () => void;\r\n}) {\r\n  // fetch options\r\n  const { data: offices, error: officeError } = useQuery(GET_OFFICES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: purposes, error: purposeError } = useQuery(GET_PURPOSES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: statuses, error: statusError } = useQuery(GET_STATUSES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: types, error: typesError } = useQuery(GET_TYPES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: signatories, error: signatoryError } = useQuery(\r\n    GET_SIGNATORIES,\r\n    {\r\n      fetchPolicy: \"no-cache\",\r\n    }\r\n  );\r\n  const {\r\n    data: reference,\r\n    error: referenceError,\r\n    refetch,\r\n  } = useQuery(GET_TEMP_REF_NUM, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const [getDocumentById, { error: getError }] = useLazyQuery(\r\n    GET_DOCUMENT_BY_ID,\r\n    {\r\n      fetchPolicy: \"no-cache\",\r\n    }\r\n  );\r\n\r\n  const [createDocument, { error: createError }] = useMutation(CREATE_DOCUMENT);\r\n  const [updateDocument, { error: updateError }] = useMutation(UPDATE_DOCUMENT);\r\n\r\n  const [referrals, setReferrals] = useState<number[]>([]);\r\n  const [deadline, setDeadline] = useState<Dayjs>(dayjs(new Date()));\r\n  const [formData, setFormData] = useState<DocumentForm>(formDefaults);\r\n\r\n  const {\r\n    subject,\r\n    description,\r\n    receivedFrom,\r\n    typeId,\r\n    purposeId,\r\n    statusId,\r\n    signatureId,\r\n    tag,\r\n  } = formData;\r\n\r\n  useEffect(() => {\r\n    if (referenceNum) {\r\n      getDocumentById({ variables: { referenceNum, officerId } }).then(\r\n        ({ data }) => {\r\n          if (data) {\r\n            setFormData({\r\n              subject: data.getDocumentById.subject,\r\n              description: data.getDocumentById.description,\r\n              receivedFrom: data.getDocumentById.receivedFrom,\r\n              typeId: data.getDocumentById.type\r\n                ? data.getDocumentById.type.id.toString()\r\n                : \"\",\r\n              purposeId: data.getDocumentById.purpose\r\n                ? data.getDocumentById.purpose.id.toString()\r\n                : \"\",\r\n              tag: data.getDocumentById.tag ? data.getDocumentById.tag : \"\",\r\n              signatureId: data.getDocumentById.signatory.uuid,\r\n              statusId: \"\",\r\n            });\r\n\r\n            setDeadline(dayjs(new Date(data.getDocumentById.dateDue)));\r\n            setReferrals(\r\n              data.getDocumentById.referredTo.map((ref) =>\r\n                parseInt(ref.office.id)\r\n              )\r\n            );\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      setFormData(formDefaults);\r\n      setDeadline(dayjs(new Date()));\r\n      setReferrals([]);\r\n    }\r\n  }, [referenceNum, officerId, getDocumentById]);\r\n\r\n  const handleReferralsChange = (selected: number[]) => {\r\n    setReferrals(selected);\r\n  };\r\n\r\n  const handleDeadlineChange = (newValue: Dayjs | null) => {\r\n    if (!newValue) return;\r\n    setDeadline(newValue);\r\n  };\r\n\r\n  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (referenceNum) {\r\n      await updateDocument({\r\n        variables: {\r\n          referenceNum: referenceNum,\r\n          subject,\r\n          description,\r\n          receivedFrom,\r\n          typeId: parseInt(typeId),\r\n          purposeId: parseInt(purposeId),\r\n          signatureId: signatureId,\r\n          tag: tag.length === 0 ? null : (tag as Tags),\r\n          dateDue: deadline.toISOString(),\r\n        },\r\n      });\r\n    } else {\r\n      await createDocument({\r\n        variables: {\r\n          subject,\r\n          description,\r\n          receivedFrom,\r\n          typeId: parseInt(typeId),\r\n          purposeId: parseInt(purposeId),\r\n          signatureId: signatureId,\r\n          tag: tag.length === 0 ? null : (tag as Tags),\r\n          referredTo: referrals.map((office) => ({\r\n            officeId: office,\r\n            statusId: parseInt(statusId),\r\n          })),\r\n          dateDue: deadline.toISOString(),\r\n        },\r\n      });\r\n    }\r\n\r\n    // clear form data\r\n    setFormData(formDefaults);\r\n    setDeadline(dayjs(new Date()));\r\n    setReferrals([]);\r\n\r\n    await refetch(); // get new reference number\r\n    onClose(); // close dialog\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                {reference && (\r\n                  <Typography variant=\"h6\">\r\n                    {`#${\r\n                      referenceNum\r\n                        ? referenceNum\r\n                        : reference.getTempReferenceNum\r\n                    }`}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12} md={8}>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      name=\"subject\"\r\n                      label=\"Subject\"\r\n                      variant=\"outlined\"\r\n                      value={subject}\r\n                      onChange={handleFormChange}\r\n                      fullWidth\r\n                      required\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      name=\"description\"\r\n                      label=\"Description\"\r\n                      variant=\"outlined\"\r\n                      value={description}\r\n                      onChange={handleFormChange}\r\n                      multiline\r\n                      rows={4}\r\n                      fullWidth\r\n                      required\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      name=\"receivedFrom\"\r\n                      label=\"Received From\"\r\n                      variant=\"outlined\"\r\n                      value={receivedFrom}\r\n                      onChange={handleFormChange}\r\n                      fullWidth\r\n                      required\r\n                    />\r\n                  </Grid>\r\n\r\n                  {offices && !referenceNum && (\r\n                    <Grid item xs={12}>\r\n                      <MultiSelect\r\n                        name=\"referredTo\"\r\n                        label=\"Referred To\"\r\n                        selected={referrals}\r\n                        options={offices.getOffices.map((office) => ({\r\n                          id: parseInt(office.id),\r\n                          label: office.name,\r\n                        }))}\r\n                        onChange={handleReferralsChange}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n\r\n                  {types && (\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        name=\"typeId\"\r\n                        select\r\n                        label=\"Document Type\"\r\n                        value={typeId}\r\n                        onChange={handleFormChange}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                      >\r\n                        {types.getDocumentTypes.map((option) => (\r\n                          <MenuItem key={option.id} value={option.id}>\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Grid>\r\n                  )}\r\n\r\n                  {purposes && (\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        name=\"purposeId\"\r\n                        select\r\n                        label=\"Document Purpose\"\r\n                        value={purposeId}\r\n                        onChange={handleFormChange}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                      >\r\n                        {purposes.getDocumentPurposes.map((option) => (\r\n                          <MenuItem key={option.id} value={option.id}>\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={4}>\r\n                <Stack spacing={3}>\r\n                  {statuses && !referenceNum && (\r\n                    <TextField\r\n                      name=\"statusId\"\r\n                      select\r\n                      label=\"Document Status\"\r\n                      value={statusId}\r\n                      onChange={handleFormChange}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                    >\r\n                      {statuses.getDocumentStatus\r\n                        .filter(\r\n                          (status) =>\r\n                            status.category === Status.Referred ||\r\n                            status.category === Status.NotActionable ||\r\n                            referenceNum\r\n                        )\r\n                        .map((option) => (\r\n                          <MenuItem key={option.id} value={option.id}>\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                  )}\r\n\r\n                  <DatePicker\r\n                    label=\"Deadline\"\r\n                    value={deadline}\r\n                    onChange={handleDeadlineChange}\r\n                  />\r\n\r\n                  <TextField\r\n                    name=\"tag\"\r\n                    select\r\n                    label=\"Document Tag\"\r\n                    variant=\"outlined\"\r\n                    value={tag}\r\n                    onChange={handleFormChange}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    <MenuItem value=\"CONFIDENTIAL\">Confidential</MenuItem>\r\n                    <MenuItem value=\"TOP_PRIORITY\">Top Priority</MenuItem>\r\n                    <MenuItem value=\"FOLLOW_UP\">Follow Up</MenuItem>\r\n                  </TextField>\r\n\r\n                  {signatories && (\r\n                    <TextField\r\n                      name=\"signatureId\"\r\n                      select\r\n                      label=\"Signatory\"\r\n                      value={signatureId}\r\n                      onChange={handleFormChange}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                    >\r\n                      {signatories.getSignatories.map((option) => (\r\n                        <MenuItem key={option.uuid} value={option.uuid}>\r\n                          <Stack\r\n                            direction=\"row\"\r\n                            alignItems=\"center\"\r\n                            spacing={2}\r\n                          >\r\n                            <Avatar alt={option.lastName} src={option.avatar} />\r\n                            <Typography variant=\"subtitle2\" noWrap>\r\n                              {`${option.firstName} ${option.lastName}`}\r\n                            </Typography>\r\n                          </Stack>\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  )}\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Stack direction=\"row\" spacing={2}>\r\n              <Button onClick={onClose} color=\"inherit\">\r\n                Cancel\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"inherit\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            </Stack>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n      <Snackbar\r\n        severity=\"error\"\r\n        message={\r\n          officeError?.message ||\r\n          purposeError?.message ||\r\n          createError?.message ||\r\n          updateError?.message ||\r\n          statusError?.message ||\r\n          typesError?.message ||\r\n          referenceError?.message ||\r\n          getError?.message ||\r\n          signatoryError?.message\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"names":["formDefaults","subject","description","receivedFrom","typeId","purposeId","statusId","signatureId","tag","FormDialog","_ref","referenceNum","officerId","open","onClose","data","offices","error","officeError","useQuery","GET_OFFICES","fetchPolicy","purposes","purposeError","GET_PURPOSES","statuses","statusError","GET_STATUSES","types","typesError","GET_TYPES","signatories","signatoryError","GET_SIGNATORIES","reference","referenceError","refetch","GET_TEMP_REF_NUM","getDocumentById","getError","useLazyQuery","GET_DOCUMENT_BY_ID","createDocument","createError","useMutation","CREATE_DOCUMENT","updateDocument","updateError","UPDATE_DOCUMENT","referrals","setReferrals","useState","deadline","setDeadline","dayjs","Date","formData","setFormData","useEffect","variables","then","_ref2","type","id","toString","purpose","signatory","uuid","dateDue","referredTo","map","ref","parseInt","office","handleFormChange","e","target","name","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","length","toISOString","officeId","DialogContent","Grid","container","spacing","item","xs","Typography","variant","concat","getTempReferenceNum","sm","md","TextField","label","onChange","required","multiline","rows","MultiSelect","selected","options","getOffices","select","getDocumentTypes","option","MenuItem","getDocumentPurposes","Stack","getDocumentStatus","filter","status","category","Status","Referred","NotActionable","DatePicker","newValue","getSignatories","direction","alignItems","Avatar","alt","lastName","src","avatar","noWrap","firstName","DialogActions","Button","onClick","color","Snackbar","severity","message"],"sourceRoot":""}