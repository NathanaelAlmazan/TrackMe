{"version":3,"file":"static/js/160.2361ffec.chunk.js","mappings":"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","sources":["sections/auth/login.tsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Card from '@mui/material/Card';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { alpha, useTheme } from '@mui/material/styles';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { login } from '../../redux';\r\nimport { useAppDispatch, useRouter } from '../../hooks';\r\n\r\nimport { bgGradient } from '../../theme/css';\r\n\r\nimport { Logo, Iconify } from '../../components';\r\n\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { LOGIN_OFFICER } from '../../graphql/users';\r\nimport { Role } from '../../__generated__/graphql';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface OfficerInput {\r\n    firstName: string;\r\n    lastName: string;\r\n    password: string;\r\n};\r\n\r\nconst formDefaults = {\r\n    firstName: '',\r\n    lastName: '',\r\n    password: ''\r\n}\r\n\r\nexport default function LoginView() {\r\n  const theme = useTheme();\r\n\r\n  const router = useRouter();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [error, setError] = useState<string>();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [formData, setFormData] = useState<OfficerInput>(formDefaults);\r\n\r\n  const { firstName, lastName, password } = formData;\r\n\r\n  const [loginOfficer, { error: loginError }] = useLazyQuery(LOGIN_OFFICER);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({...formData, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const officer = await loginOfficer({\r\n        variables: {\r\n            firstName: firstName.trim(),\r\n            lastName: lastName.trim(),\r\n            password: password\r\n        }\r\n    });\r\n\r\n    if (officer.data && officer.data.loginOfficer) {\r\n      dispatch(login({\r\n        uuid: officer.data.loginOfficer.uuid,\r\n        firstName: officer.data.loginOfficer.firstName,\r\n        lastName: officer.data.loginOfficer.lastName,\r\n        role: officer.data.loginOfficer.position?.role,\r\n        office: officer.data.loginOfficer.office?.id,\r\n        position: officer.data.loginOfficer.position?.label,\r\n        avatar: officer.data.loginOfficer.avatar\r\n      }));\r\n\r\n      const role = officer.data.loginOfficer.position?.role || Role.Officer;\r\n\r\n      if (!officer.data.loginOfficer.verified) router.push(`/verify/${officer.data.loginOfficer.uuid}`);\r\n      else if ([Role.Superuser, Role.Director].includes(role)) router.push('/dashboard');\r\n      else router.push('/calendar');\r\n    }\r\n    else setError(\"Wrong credentials or account is inactive.\");\r\n\r\n    setFormData(formDefaults); // reset form\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        ...bgGradient({\r\n          color: alpha(theme.palette.background.default, 0.5),\r\n          imgUrl: '/assets/background/overlay_5.jpg',\r\n        }),\r\n        height: 1,\r\n      }}\r\n    >\r\n      <Logo\r\n        sx={{\r\n          position: 'fixed',\r\n          top: { xs: 16, md: 24 },\r\n          left: { xs: 16, md: 24 },\r\n        }}\r\n      />\r\n\r\n      <Stack alignItems=\"center\" justifyContent=\"center\" sx={{ height: 1 }}>\r\n        <Card\r\n          sx={{\r\n            p: 5,\r\n            width: 1,\r\n            maxWidth: 420,\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\">SIGN IN</Typography>\r\n\r\n          <Typography variant=\"body2\" sx={{ my: 2 }}>\r\n            Don't have an account?\r\n            <Link href='/register' variant=\"subtitle2\" sx={{ ml: 0.5, cursor: 'pointer' }}>\r\n                Sign up\r\n            </Link>\r\n          </Typography>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <Stack spacing={2} sx={{ mb: 2 }}>\r\n                    <TextField \r\n                        name=\"firstName\" \r\n                        label=\"First Name\" \r\n                        value={firstName} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                    />\r\n\r\n                    <TextField \r\n                        name=\"lastName\" \r\n                        label=\"Last Name\" \r\n                        value={lastName} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                    />\r\n\r\n                    <TextField\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        value={password} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                        inputProps={{ minLength: 8 }}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                                <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\r\n                  <Link href='/password' variant=\"subtitle2\" underline=\"hover\">\r\n                    Forgot password?\r\n                  </Link>\r\n                </Stack>\r\n\r\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ my: 2 }}>\r\n                  {(loginError?.message || error) && (\r\n                    <Typography variant=\"body2\" align='center' color=\"error\">\r\n                      {loginError?.message || error}\r\n                    </Typography>\r\n                  )}\r\n                </Stack>\r\n\r\n                <Button\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"inherit\"\r\n                >\r\n                    Sign in\r\n                </Button>\r\n            </form>\r\n        </Card>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n}"],"names":["formDefaults","firstName","lastName","password","LoginView","theme","useTheme","router","useRouter","dispatch","useAppDispatch","error","setError","useState","showPassword","setShowPassword","formData","setFormData","loginOfficer","loginError","useLazyQuery","LOGIN_OFFICER","handleChange","event","target","name","value","_jsxs","Box","sx","bgGradient","color","alpha","palette","background","default","imgUrl","height","children","_jsx","Logo","position","top","xs","md","left","Stack","alignItems","justifyContent","Card","p","width","maxWidth","Typography","variant","my","Link","href","ml","cursor","onSubmit","async","preventDefault","officer","variables","trim","data","_officer$data$loginOf","_officer$data$loginOf2","_officer$data$loginOf3","_officer$data$loginOf4","login","uuid","role","office","id","label","avatar","Role","Officer","verified","Superuser","Director","includes","push","concat","spacing","mb","TextField","onChange","required","fullWidth","type","inputProps","minLength","InputProps","endAdornment","InputAdornment","IconButton","onClick","edge","Iconify","icon","direction","underline","message","align","Button","size"],"sourceRoot":""}