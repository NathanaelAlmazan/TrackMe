{"version":3,"file":"static/js/460.fd185f01.chunk.js","mappings":"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","sources":["sections/accounts/form-dialog/index.tsx","../node_modules/@mui/material/DialogTitle/DialogTitle.js","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\n\r\nimport { Snackbar } from \"../../../components\";\r\n\r\nimport { useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\r\nimport {\r\n  CREATE_OFFICER,\r\n  GET_OFFICER_BY_ID,\r\n  GET_OFFICES,\r\n  GET_POSITIONS,\r\n  UPDATE_OFFICER,\r\n} from \"../../../graphql/users\";\r\nimport { Positions, Role } from \"../../../__generated__/graphql\";\r\n\r\ninterface OfficerInput {\r\n  firstName: string;\r\n  lastName: string;\r\n  positionId: string;\r\n  officeId: string;\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nfunction filterPositions(office: string, positions: Positions[]) {\r\n  if (office.includes(\"Regional Director\")) {\r\n    return positions.filter(\r\n      (pos) => pos.role === Role.Director || pos.role === Role.Officer\r\n    );\r\n  } else if (office.includes(\"Division\")) {\r\n    return positions.filter(\r\n      (pos) =>\r\n        (pos.role === Role.Chief && pos.label.includes(\"Chief\")) ||\r\n        pos.role === Role.Officer\r\n    );\r\n  } else if (office.includes(\"Revenue District Office\")) {\r\n    return positions.filter(\r\n      (pos) =>\r\n        (pos.role === Role.Chief && pos.label.includes(\"District Officer\")) ||\r\n        pos.role === Role.Officer\r\n    );\r\n  } else {\r\n    return positions.filter((pos) => pos.role === Role.Officer);\r\n  }\r\n}\r\n\r\nconst formDefaults = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  positionId: \"\",\r\n  officeId: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport default function AccountDialog({\r\n  open,\r\n  onClose,\r\n  officerId,\r\n}: {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  officerId?: string | null;\r\n}) {\r\n  const [error, setError] = useState<string>();\r\n  const [formData, setFormData] = useState<OfficerInput>(formDefaults);\r\n  const [filteredPositions, setFilteredPositions] = useState<Positions[]>([]);\r\n\r\n  const { firstName, lastName, positionId, officeId, username, password } =\r\n    formData;\r\n\r\n  const { data: positions, error: positionError } = useQuery(GET_POSITIONS);\r\n\r\n  const { data: offices, error: officeError } = useQuery(GET_OFFICES);\r\n\r\n  const [getOfficerById, { data: officer, error: officerError }] = useLazyQuery(\r\n    GET_OFFICER_BY_ID,\r\n    { fetchPolicy: \"no-cache\" }\r\n  );\r\n\r\n  const [createOfficer, { error: createError }] = useMutation(CREATE_OFFICER);\r\n  const [updateOfficer, { error: updateError }] = useMutation(UPDATE_OFFICER);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (formData.officeId && positions?.getPositions && offices?.getOffices) {\r\n      const office = offices.getOffices.find(\r\n        (office) => office.id === formData.officeId\r\n      );\r\n\r\n      if (office) {\r\n        setFilteredPositions(\r\n          filterPositions(\r\n            office.name,\r\n            positions.getPositions.map((pos) => ({\r\n              id: pos.id,\r\n              label: pos.label,\r\n              role: pos.role,\r\n            }))\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }, [formData.officeId, offices, positions]);\r\n\r\n  useEffect(() => {\r\n    if (officerId) {\r\n      getOfficerById({ variables: { uuid: officerId } }).then(({ data }) => {\r\n        if (data && data.getOfficerById) {\r\n          setFormData({\r\n            firstName: data.getOfficerById.firstName,\r\n            lastName: data.getOfficerById.lastName,\r\n            positionId: data.getOfficerById.position?.id.toString() || \"\",\r\n            officeId: data.getOfficerById.office?.id.toString() || \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [officerId, getOfficerById]);\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (officerId) {\r\n      const officer = await updateOfficer({\r\n        variables: {\r\n          uuid: officerId,\r\n          firstName: firstName.trim(),\r\n          lastName: lastName.trim(),\r\n          positionId: parseInt(positionId),\r\n          officeId: parseInt(officeId),\r\n        },\r\n      });\r\n\r\n      if (officer.data && officer.data.updateOfficer) onClose();\r\n      else setError(\"Failed to update account.\");\r\n    } else {\r\n      // check username provided\r\n      let email: string | null = null;\r\n      let phone: string | null = null;\r\n      if (username.includes(\"@\")) {\r\n        const emailRegex = /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})$/;\r\n\r\n        if (!emailRegex.test(username)) {\r\n          setError(\"Invalid email address.\");\r\n          return;\r\n        }\r\n\r\n        email = username;\r\n      } else {\r\n        const startIndex = username.indexOf(\"9\");\r\n\r\n        if (startIndex < 0) {\r\n          setError(\"Invalid phone number.\");\r\n          return;\r\n        }\r\n\r\n        const phoneNumber = username.substring(startIndex, username.length);\r\n\r\n        if (phoneNumber.length !== 10 || !/^\\d+$/.test(username)) {\r\n          setError(\"Invalid phone number.\");\r\n          return;\r\n        }\r\n\r\n        phone = phoneNumber;\r\n      }\r\n\r\n      if (!email && !phone) {\r\n        setError(\"Please provide valid email or phone number.\");\r\n        return;\r\n      }\r\n\r\n      const officer = await createOfficer({\r\n        variables: {\r\n          firstName: firstName.trim(),\r\n          lastName: lastName.trim(),\r\n          positionId: parseInt(positionId),\r\n          officeId: parseInt(officeId),\r\n          email: email,\r\n          phone: phone,\r\n          password: password\r\n        },\r\n      });\r\n\r\n      if (officer.data && officer.data.createOfficer) onClose();\r\n      else setError(\"Account already exists.\");\r\n    }\r\n\r\n    setFormData(formDefaults); // reset form\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setFormData(formDefaults);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={open} onClose={handleClose} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {officer\r\n            ? `Edit ${\r\n                officer.getOfficerById?.firstName +\r\n                \" \" +\r\n                officer.getOfficerById?.lastName\r\n              } Profile`\r\n            : \"Create Officer\"}\r\n        </DialogTitle>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <Stack spacing={2} sx={{ mb: 3 }}>\r\n              <TextField\r\n                name=\"firstName\"\r\n                label=\"First Name\"\r\n                value={firstName}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n\r\n              <TextField\r\n                name=\"lastName\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n\r\n              {offices && (\r\n                <TextField\r\n                  name=\"officeId\"\r\n                  select\r\n                  label=\"Office\"\r\n                  value={officeId}\r\n                  onChange={handleChange}\r\n                  required\r\n                  fullWidth\r\n                >\r\n                  {offices.getOffices.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              )}\r\n\r\n              {positions && (\r\n                <TextField\r\n                  name=\"positionId\"\r\n                  select\r\n                  label=\"Position\"\r\n                  value={positionId}\r\n                  onChange={handleChange}\r\n                  required\r\n                  fullWidth\r\n                >\r\n                  {filteredPositions.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.label}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              )}\r\n\r\n              {!officer && (\r\n                <TextField\r\n                  name=\"username\"\r\n                  label=\"Email or Phone Number (+63)\"\r\n                  value={username}\r\n                  onChange={handleChange}\r\n                  required\r\n                  fullWidth\r\n                />\r\n              )}\r\n\r\n              {!officer && (\r\n                <TextField\r\n                  name=\"password\"\r\n                  label=\"Temporary Password\"\r\n                  value={password}\r\n                  onChange={handleChange}\r\n                  required\r\n                  fullWidth\r\n                />\r\n              )}\r\n            </Stack>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"inherit\">\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"inherit\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n      <Snackbar\r\n        severity=\"error\"\r\n        message={\r\n          positionError?.message ||\r\n          officeError?.message ||\r\n          officerError?.message ||\r\n          createError?.message ||\r\n          error ||\r\n          updateError?.message\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;","import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, { client, options, mutation });\n  });\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = {\n        called: false,\n        loading: false,\n        client: ref.current.client,\n      };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const current = ref.current;\n    current.isMounted = true;\n\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["formDefaults","firstName","lastName","positionId","officeId","username","password","AccountDialog","_ref","_officer$getOfficerBy","_officer$getOfficerBy2","open","onClose","officerId","error","setError","useState","formData","setFormData","filteredPositions","setFilteredPositions","data","positions","positionError","useQuery","GET_POSITIONS","offices","officeError","GET_OFFICES","getOfficerById","officer","officerError","useLazyQuery","GET_OFFICER_BY_ID","fetchPolicy","createOfficer","createError","useMutation","CREATE_OFFICER","updateOfficer","updateError","UPDATE_OFFICER","handleChange","event","target","name","value","useEffect","getPositions","getOffices","office","find","id","includes","filter","pos","role","Role","Director","Officer","Chief","label","filterPositions","map","variables","uuid","then","_ref2","_data$getOfficerById$","_data$getOfficerById$2","position","toString","handleClose","_jsxs","_Fragment","children","Dialog","maxWidth","fullWidth","_jsx","DialogTitle","onSubmit","async","preventDefault","trim","parseInt","email","phone","test","startIndex","indexOf","phoneNumber","substring","length","DialogContent","Stack","spacing","sx","mb","TextField","onChange","required","select","option","MenuItem","DialogActions","Button","onClick","color","type","variant","Snackbar","severity","message","_excluded","DialogTitleRoot","styled","Typography","slot","overridesResolver","props","styles","root","padding","flex","React","inProps","ref","useDefaultProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","titleId","DialogContext","_extends","component","clsx","mutation","options","client","useApolloClient","verifyDocumentType","DocumentType","Mutation","_a","called","loading","result","setResult","mutationId","isMounted","useIsomorphicLayoutEffect","Object","assign","current","execute","executeOptions","baseOptions","__assign","ignoreResults","clientOptions","mergeOptions","mutate","response","errors","ApolloError","graphQLErrors","onError","result_1","equal","onCompleted","_b","catch","result_2","reset","result_3"],"sourceRoot":""}