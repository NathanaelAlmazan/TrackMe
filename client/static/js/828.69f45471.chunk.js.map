{"version":3,"file":"static/js/828.69f45471.chunk.js","mappings":"sUAiCA,MAAMA,EAAe,CACjBC,UAAW,GACXC,SAAU,GACVC,WAAY,GACZC,SAAU,GACVC,SAAU,IAGC,SAASC,IACtB,MAAMC,GAAQC,EAAAA,EAAAA,KAERC,GAASC,EAAAA,EAAAA,OAERC,EAAOC,IAAYC,EAAAA,EAAAA,aACnBC,EAAcC,IAAmBF,EAAAA,EAAAA,WAAS,IAC1CG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAuBb,IAEjD,UAAEC,EAAS,SAAEC,EAAQ,WAAEC,EAAU,SAAEC,EAAQ,SAAEC,GAAaW,GAExDE,KAAMC,EAAWR,MAAOS,IAAkBC,EAAAA,EAAAA,GAASC,EAAAA,KAEnDJ,KAAMK,EAASZ,MAAOa,IAAgBH,EAAAA,EAAAA,GAASI,EAAAA,KAEhDC,GAAiBf,MAAOgB,KAAiBC,EAAAA,EAAAA,GAAYC,EAAAA,IAEtDC,EAAgBC,IACpBd,EAAY,IAAID,EAAU,CAACe,EAAMC,OAAOC,MAAOF,EAAMC,OAAOE,OAAQ,EAsBtE,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,GAAI,KACCC,EAAAA,EAAAA,IAAW,CACZC,OAAOC,EAAAA,EAAAA,IAAMjC,EAAMkC,QAAQC,WAAWC,QAAS,IAC/CC,OAAQ,qCAEVC,OAAQ,GACRC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACHX,GAAI,CACFY,SAAU,QACVC,IAAK,CAAEC,GAAI,GAAIC,GAAI,IACnBC,KAAM,CAAEF,GAAI,GAAIC,GAAI,QAIxBL,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CAACC,WAAW,SAASC,eAAe,SAASnB,GAAI,CAAEQ,OAAQ,GAAIC,UACnEX,EAAAA,EAAAA,MAACsB,EAAAA,EAAI,CACHpB,GAAI,CACFqB,EAAG,EACHC,MAAO,EACPC,SAAU,KACVd,SAAA,EAEFC,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAACC,QAAQ,KAAIhB,SAAC,aAEzBX,EAAAA,EAAAA,MAAC0B,EAAAA,EAAU,CAACC,QAAQ,QAAQzB,GAAI,CAAE0B,GAAI,EAAGC,GAAI,GAAIlB,SAAA,CAAC,4BAEhDC,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CAACC,KAAK,SAASJ,QAAQ,YAAYzB,GAAI,CAAE8B,GAAI,GAAKC,OAAQ,WAAYtB,SAAC,gBAK5EX,EAAAA,EAAAA,MAAA,QAAMkC,SAtDKC,UACnBvC,EAAMwC,iBAEN,MAAMC,QAAgB9C,EAAc,CAChC+C,UAAW,CACPxE,UAAWA,EACXC,SAAUA,EACVC,WAAYuE,SAASvE,GACrBC,SAAUsE,SAAStE,GACnBC,SAAUA,KAIdmE,EAAQtD,MAAQsD,EAAQtD,KAAKQ,cAAejB,EAAOkE,KAAK,UACvD/D,EAAS,2BAEdK,EAAYjB,EAAa,EAsCY8C,SAAA,EACzBX,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAACsB,QAAS,EAAGvC,GAAI,CAAE2B,GAAI,GAAIlB,SAAA,EAC7BC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACN5C,KAAK,YACL6C,MAAM,aACN5C,MAAOjC,EACP8E,SAAUjD,EACVkD,UAAQ,EACRC,WAAS,KAGblC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACN5C,KAAK,WACL6C,MAAM,YACN5C,MAAOhC,EACP6E,SAAUjD,EACVkD,UAAQ,EACRC,WAAS,IAGZ9D,IACG4B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACN5C,KAAK,aACLiD,QAAM,EACNJ,MAAM,WACN5C,MAAO/B,EACP4E,SAAUjD,EACVkD,UAAQ,EACRC,WAAS,EAAAnC,SAER3B,EAAUgE,aAAaC,KAAKC,IACzBtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAQ,CAAiBpD,MAAOmD,EAAOE,GAAGzC,SACtCuC,EAAOP,OADGO,EAAOE,QAOjChE,IACGwB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACN5C,KAAK,WACLiD,QAAM,EACNJ,MAAM,SACN5C,MAAO9B,EACP2E,SAAUjD,EACVkD,UAAQ,EACRC,WAAS,EAAAnC,SAERvB,EAAQiE,WAAWJ,KAAKC,IACrBtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAQ,CAAiBpD,MAAOmD,EAAOE,GAAGzC,SACtCuC,EAAOpD,MADGoD,EAAOE,SAOlCxC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACN5C,KAAK,WACL6C,MAAM,WACNW,KAAM3E,EAAe,OAAS,WAC9BoB,MAAO7B,EACP0E,SAAUjD,EACVkD,UAAQ,EACRC,WAAS,EACTS,WAAY,CACRC,cACA5C,EAAAA,EAAAA,KAAC6C,EAAAA,EAAc,CAAC3C,SAAS,MAAKH,UAC1BC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CAACC,QAASA,IAAM/E,GAAiBD,GAAeiF,KAAK,MAAKjD,UACrEC,EAAAA,EAAAA,KAACiD,EAAAA,GAAO,CAACC,KAAMnF,EAAe,eAAiB,gCAQ/DiC,EAAAA,EAAAA,KAACmD,EAAAA,EAAM,CACHjB,WAAS,EACTkB,KAAK,QACLV,KAAK,SACL3B,QAAQ,YACRvB,MAAM,UAASO,SAClB,qBAOTC,EAAAA,EAAAA,KAACqD,EAAAA,GAAQ,CACLC,SAAS,QACTC,SAAsB,OAAblF,QAAa,IAAbA,OAAa,EAAbA,EAAekF,WAAsB,OAAX9E,QAAW,IAAXA,OAAW,EAAXA,EAAa8E,WAAsB,OAAX3E,QAAW,IAAXA,OAAW,EAAXA,EAAa2E,UAAW3F,MAI/F,C","sources":["sections/auth/register.tsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Card from '@mui/material/Card';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport { alpha, useTheme } from '@mui/material/styles';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { useRouter } from '../../hooks';\r\n\r\nimport { bgGradient } from '../../theme/css';\r\n\r\nimport { Logo, Iconify, Snackbar } from '../../components';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { CREATE_OFFICER, GET_OFFICES, GET_POSITIONS } from '../../graphql/users';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface OfficerInput {\r\n    firstName: string;\r\n    lastName: string;\r\n    positionId: string;\r\n    officeId: string;\r\n    password: string;\r\n};\r\n\r\nconst formDefaults = {\r\n    firstName: '',\r\n    lastName: '',\r\n    positionId: '',\r\n    officeId: '',\r\n    password: ''\r\n}\r\n\r\nexport default function RegisterView() {\r\n  const theme = useTheme();\r\n\r\n  const router = useRouter();\r\n\r\n  const [error, setError] = useState<string>();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [formData, setFormData] = useState<OfficerInput>(formDefaults);\r\n\r\n  const { firstName, lastName, positionId, officeId, password } = formData;\r\n\r\n  const { data: positions, error: positionError } = useQuery(GET_POSITIONS);\r\n\r\n  const { data: offices, error: officeError } = useQuery(GET_OFFICES);\r\n\r\n  const [createOfficer, { error: createError }] = useMutation(CREATE_OFFICER);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({...formData, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const officer = await createOfficer({\r\n        variables: {\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            positionId: parseInt(positionId),\r\n            officeId: parseInt(officeId),\r\n            password: password\r\n        }\r\n    });\r\n\r\n    if (officer.data && officer.data.createOfficer) router.push('/login');\r\n    else setError(\"Account already exists.\");\r\n\r\n    setFormData(formDefaults); // reset form\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        ...bgGradient({\r\n          color: alpha(theme.palette.background.default, 0.5),\r\n          imgUrl: '/assets/background/overlay_5.jpg',\r\n        }),\r\n        height: 1,\r\n      }}\r\n    >\r\n      <Logo\r\n        sx={{\r\n          position: 'fixed',\r\n          top: { xs: 16, md: 24 },\r\n          left: { xs: 16, md: 24 },\r\n        }}\r\n      />\r\n\r\n      <Stack alignItems=\"center\" justifyContent=\"center\" sx={{ height: 1 }}>\r\n        <Card\r\n          sx={{\r\n            p: 5,\r\n            width: 1,\r\n            maxWidth: 420,\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\">SIGN UP</Typography>\r\n\r\n          <Typography variant=\"body2\" sx={{ mt: 2, mb: 5 }}>\r\n            Already have an account?\r\n            <Link href='/login' variant=\"subtitle2\" sx={{ ml: 0.5, cursor: 'pointer' }}>\r\n                Sign in\r\n            </Link>\r\n          </Typography>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <Stack spacing={2} sx={{ mb: 3 }}>\r\n                    <TextField \r\n                        name=\"firstName\" \r\n                        label=\"First Name\" \r\n                        value={firstName} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                    />\r\n\r\n                    <TextField \r\n                        name=\"lastName\" \r\n                        label=\"Last Name\" \r\n                        value={lastName} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                    />\r\n\r\n                    {positions && (\r\n                        <TextField\r\n                            name='positionId'\r\n                            select\r\n                            label=\"Position\"\r\n                            value={positionId} \r\n                            onChange={handleChange}\r\n                            required\r\n                            fullWidth\r\n                        >\r\n                            {positions.getPositions.map((option) => (\r\n                                <MenuItem key={option.id} value={option.id}>\r\n                                    {option.label}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    )}\r\n\r\n                    {offices && (\r\n                        <TextField\r\n                            name='officeId'\r\n                            select\r\n                            label=\"Office\"\r\n                            value={officeId} \r\n                            onChange={handleChange}\r\n                            required\r\n                            fullWidth\r\n                        >\r\n                            {offices.getOffices.map((option) => (\r\n                                <MenuItem key={option.id} value={option.id}>\r\n                                    {option.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    )}\r\n\r\n                    <TextField\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        value={password} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                                <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Stack>\r\n\r\n                <Button\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"inherit\"\r\n                >\r\n                    Sign up\r\n                </Button>\r\n            </form>\r\n        </Card>\r\n      </Stack>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={positionError?.message || officeError?.message || createError?.message || error} \r\n        />\r\n    </Box>\r\n  );\r\n}"],"names":["formDefaults","firstName","lastName","positionId","officeId","password","RegisterView","theme","useTheme","router","useRouter","error","setError","useState","showPassword","setShowPassword","formData","setFormData","data","positions","positionError","useQuery","GET_POSITIONS","offices","officeError","GET_OFFICES","createOfficer","createError","useMutation","CREATE_OFFICER","handleChange","event","target","name","value","_jsxs","Box","sx","bgGradient","color","alpha","palette","background","default","imgUrl","height","children","_jsx","Logo","position","top","xs","md","left","Stack","alignItems","justifyContent","Card","p","width","maxWidth","Typography","variant","mt","mb","Link","href","ml","cursor","onSubmit","async","preventDefault","officer","variables","parseInt","push","spacing","TextField","label","onChange","required","fullWidth","select","getPositions","map","option","MenuItem","id","getOffices","type","InputProps","endAdornment","InputAdornment","IconButton","onClick","edge","Iconify","icon","Button","size","Snackbar","severity","message"],"sourceRoot":""}