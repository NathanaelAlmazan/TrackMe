{"version":3,"file":"static/js/460.896e1dae.chunk.js","mappings":"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","sources":["sections/accounts/form-dialog/index.tsx","../node_modules/@mui/material/DialogTitle/DialogTitle.js","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { Iconify, Snackbar } from '../../../components';\r\n\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport { CREATE_OFFICER, GET_OFFICER_BY_ID, GET_OFFICES, GET_POSITIONS, UPDATE_OFFICER } from '../../../graphql/users';\r\n\r\ninterface OfficerInput {\r\n    firstName: string;\r\n    lastName: string;\r\n    positionId: string;\r\n    officeId: string;\r\n    password: string;\r\n};\r\n\r\nconst formDefaults = {\r\n    firstName: '',\r\n    lastName: '',\r\n    positionId: '',\r\n    officeId: '',\r\n    password: ''\r\n}\r\n\r\nexport default function AccountDialog({\r\n    open,\r\n    onClose,\r\n    officerId,\r\n    variant = \"create\"\r\n}: {\r\n    open: boolean,\r\n    onClose: () => void,\r\n    officerId?: string | null,\r\n    variant?: \"create\" | \"update\" | \"profile\"\r\n}) {\r\n    const [error, setError] = useState<string>();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [formData, setFormData] = useState<OfficerInput>(formDefaults);\r\n\r\n    const { firstName, lastName, positionId, officeId, password } = formData;\r\n\r\n    const { data: positions, error: positionError } = useQuery(GET_POSITIONS);\r\n\r\n    const { data: offices, error: officeError } = useQuery(GET_OFFICES);\r\n  \r\n    const [getOfficerById, { data: officer, error: officerError }] = useLazyQuery(GET_OFFICER_BY_ID);\r\n\r\n    const [createOfficer, { error: createError }] = useMutation(CREATE_OFFICER);\r\n    const [updateOfficer, { error: updateError }] = useMutation(UPDATE_OFFICER);\r\n  \r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setFormData({...formData, [event.target.name]: event.target.value });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (officerId) {\r\n            getOfficerById({ variables: { uuid: officerId } })\r\n                .then(({ data }) => {\r\n                    if (data && data.getOfficerById) {\r\n                        setFormData({\r\n                            firstName: data.getOfficerById.firstName,\r\n                            lastName: data.getOfficerById.lastName,\r\n                            positionId: data.getOfficerById.position?.id.toString() || '',\r\n                            officeId: data.getOfficerById.office?.id.toString() || '',\r\n                            password: ''\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }, [officerId, getOfficerById]);\r\n  \r\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n      event.preventDefault();\r\n  \r\n      if (officerId) {\r\n        const officer = await updateOfficer({\r\n            variables: {\r\n                uuid: officerId,\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                positionId: parseInt(positionId),\r\n                officeId: parseInt(officeId),\r\n                password: variant === \"profile\" ? password : null\r\n            }\r\n        });\r\n    \r\n        if (officer.data && officer.data.updateOfficer) onClose();\r\n        else setError(\"Failed to update account.\");\r\n      } else {\r\n        const officer = await createOfficer({\r\n            variables: {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                positionId: parseInt(positionId),\r\n                officeId: parseInt(officeId),\r\n                password: password\r\n            }\r\n        });\r\n    \r\n        if (officer.data && officer.data.createOfficer) onClose();\r\n        else setError(\"Account already exists.\");\r\n      }\r\n  \r\n      setFormData(formDefaults); // reset form\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setFormData(formDefaults);\r\n        onClose();\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Dialog open={open} onClose={handleClose} maxWidth='sm' fullWidth>\r\n            <DialogTitle>\r\n                {officer ? `Edit ${officer.getOfficerById?.firstName + ' ' + officer.getOfficerById?.lastName} Profile` : 'Create Officer'}\r\n            </DialogTitle>\r\n            <form onSubmit={handleSubmit}>\r\n                <DialogContent>\r\n                    <Stack spacing={2} sx={{ mb: 3 }}>\r\n                        <TextField \r\n                            name=\"firstName\" \r\n                            label=\"First Name\" \r\n                            value={firstName} \r\n                            onChange={handleChange}\r\n                            required\r\n                            fullWidth\r\n                        />\r\n\r\n                        <TextField \r\n                            name=\"lastName\" \r\n                            label=\"Last Name\" \r\n                            value={lastName} \r\n                            onChange={handleChange}\r\n                            required\r\n                            fullWidth\r\n                        />\r\n\r\n                        {positions && (\r\n                            <TextField\r\n                                name='positionId'\r\n                                select\r\n                                label=\"Position\"\r\n                                value={positionId} \r\n                                onChange={handleChange}\r\n                                required\r\n                                fullWidth\r\n                            >\r\n                                {positions.getPositions.map((option) => (\r\n                                    <MenuItem key={option.id} value={option.id}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        )}\r\n\r\n                        {offices && (\r\n                            <TextField\r\n                                name='officeId'\r\n                                select\r\n                                label=\"Office\"\r\n                                value={officeId} \r\n                                onChange={handleChange}\r\n                                required\r\n                                fullWidth\r\n                            >\r\n                                {offices.getOffices.map((option) => (\r\n                                    <MenuItem key={option.id} value={option.id}>\r\n                                        {option.name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        )}\r\n\r\n                        {variant !== \"update\" && (\r\n                            <TextField\r\n                                name=\"password\"\r\n                                label=\"Temporary Password\"\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                value={password} \r\n                                onChange={handleChange}\r\n                                required\r\n                                fullWidth\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                                        <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </Stack>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"inherit\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"inherit\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={positionError?.message || officeError?.message || \r\n                officerError?.message || createError?.message || error || updateError?.message} \r\n        />\r\n        </>\r\n    );\r\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;","import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryResult,\n} from \"../types/types.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current,\n  });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = internalState\n        .executeQuery({ ...options, skip: false })\n        .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    []\n  );\n\n  return [execute, result];\n}\n"],"names":["formDefaults","firstName","lastName","positionId","officeId","password","AccountDialog","_ref","_officer$getOfficerBy","_officer$getOfficerBy2","open","onClose","officerId","variant","error","setError","useState","showPassword","setShowPassword","formData","setFormData","data","positions","positionError","useQuery","GET_POSITIONS","offices","officeError","GET_OFFICES","getOfficerById","officer","officerError","useLazyQuery","GET_OFFICER_BY_ID","createOfficer","createError","useMutation","CREATE_OFFICER","updateOfficer","updateError","UPDATE_OFFICER","handleChange","event","target","name","value","useEffect","variables","uuid","then","_ref2","_data$getOfficerById$","_data$getOfficerById$2","position","id","toString","office","handleClose","_jsxs","_Fragment","children","Dialog","maxWidth","fullWidth","_jsx","DialogTitle","concat","onSubmit","async","preventDefault","parseInt","DialogContent","Stack","spacing","sx","mb","TextField","label","onChange","required","select","getPositions","map","option","MenuItem","getOffices","type","InputProps","endAdornment","InputAdornment","IconButton","onClick","edge","Iconify","icon","DialogActions","Button","color","Snackbar","severity","message","_excluded","DialogTitleRoot","styled","Typography","slot","overridesResolver","props","styles","root","padding","flex","React","inProps","ref","useThemeProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","titleId","DialogContext","_extends","component","clsx","EAGER_METHODS","query","options","execOptionsRef","optionsRef","queryRef","merged","mergeOptions","current","document","_a","internalState","useInternalState","useApolloClient","client","useQueryResult","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdateState","apply","this","arguments","_i","EAGER_METHODS_1","length","execute","executeOptions","fetchPolicy","promise","executeQuery","queryResult","catch"],"sourceRoot":""}