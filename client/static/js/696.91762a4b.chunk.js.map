{"version":3,"file":"static/js/696.91762a4b.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/Autocomplete/autocompleteClasses.js","../node_modules/@mui/material/Autocomplete/Autocomplete.js","../node_modules/@mui/material/useAutocomplete/useAutocomplete.js","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getAutocompleteUtilityClass(slot) {\n  return generateUtilityClass('MuiAutocomplete', slot);\n}\nconst autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'expanded', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);\nexport default autocompleteClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionKey\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"],\n  _excluded2 = [\"ref\"],\n  _excluded3 = [\"key\"],\n  _excluded4 = [\"key\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport { styled } from '../zero-styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport useForkRef from '../utils/useForkRef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [`& .${autocompleteClasses.tag}`]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [`& .${autocompleteClasses.input}`]: {\n        opacity: 1\n      }\n    }\n  }, {\n    props: {\n      multiple: true\n    },\n    style: {\n      [`& .${autocompleteClasses.inputRoot}`]: {\n        flexWrap: 'wrap'\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  variants: [{\n    props: {\n      disablePortal: true\n    },\n    style: {\n      position: 'absolute'\n    }\n  }]\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n      autoComplete = false,\n      autoHighlight = false,\n      autoSelect = false,\n      blurOnSelect = false,\n      ChipProps,\n      className,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"small\"\n      })),\n      clearOnBlur = !props.freeSolo,\n      clearOnEscape = false,\n      clearText = 'Clear',\n      closeText = 'Close',\n      componentsProps = {},\n      defaultValue = props.multiple ? [] : null,\n      disableClearable = false,\n      disableCloseOnSelect = false,\n      disabled = false,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      disablePortal = false,\n      filterSelectedOptions = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      fullWidth = false,\n      getLimitTagsText = more => `+${more}`,\n      getOptionLabel: getOptionLabelProp,\n      groupBy,\n      handleHomeEndKeys = !props.freeSolo,\n      includeInputInList = false,\n      limitTags = -1,\n      ListboxComponent = 'ul',\n      ListboxProps,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      noOptionsText = 'No options',\n      openOnFocus = false,\n      openText = 'Open',\n      PaperComponent = Paper,\n      PopperComponent = Popper,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup: renderGroupProp,\n      renderInput,\n      renderOption: renderOptionProp,\n      renderTags,\n      selectOnFocus = !props.freeSolo,\n      size = 'medium',\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: externalListboxRef\n  } = ListboxProps != null ? ListboxProps : {};\n  const _getListboxProps = getListboxProps(),\n    {\n      ref: listboxRef\n    } = _getListboxProps,\n    otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded2);\n  const combinedListboxRef = useForkRef(listboxRef, externalListboxRef);\n  const defaultGetOptionLabel = option => {\n    var _option$label;\n    return (_option$label = option.label) != null ? _option$label : option;\n  };\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: classes.tag,\n      disabled\n    }, getTagProps(params));\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => {\n        const _getCustomizedTagProp = getCustomizedTagProps({\n            index\n          }),\n          {\n            key\n          } = _getCustomizedTagProp,\n          customTagProps = _objectWithoutPropertiesLoose(_getCustomizedTagProp, _excluded3);\n        return /*#__PURE__*/_jsx(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, customTagProps, ChipProps), key);\n      });\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    const {\n        key\n      } = props2,\n      otherProps = _objectWithoutPropertiesLoose(props2, _excluded4);\n    return /*#__PURE__*/_jsx(\"li\", _extends({}, otherProps, {\n      children: getOptionLabel(option)\n    }), key);\n  };\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  const renderAutocompletePopperChildren = children => /*#__PURE__*/_jsx(AutocompletePopper, _extends({\n    as: PopperComponent,\n    disablePortal: disablePortal,\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    ownerState: ownerState,\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: popupOpen\n  }, popperSlotProps, {\n    className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n    children: /*#__PURE__*/_jsx(AutocompletePaper, _extends({\n      ownerState: ownerState,\n      as: PaperComponent\n    }, paperSlotProps, {\n      className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n      children: children\n    }))\n  }));\n  let autocompletePopper = null;\n  if (groupedOptions.length > 0) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n      as: ListboxComponent,\n      className: classes.listbox,\n      ownerState: ownerState\n    }, otherListboxProps, ListboxProps, {\n      ref: combinedListboxRef,\n      children: groupedOptions.map((option, index) => {\n        if (groupBy) {\n          return renderGroup({\n            key: option.key,\n            group: option.group,\n            children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n          });\n        }\n        return renderListOption(option, index);\n      })\n    })));\n  } else if (loading && groupedOptions.length === 0) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteLoading, {\n      className: classes.loading,\n      ownerState: ownerState,\n      children: loadingText\n    }));\n  } else if (groupedOptions.length === 0 && !freeSolo && !loading) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n      className: classes.noOptions,\n      ownerState: ownerState,\n      role: \"presentation\",\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      },\n      children: noOptionsText\n    }));\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _extends({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onClick: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          }\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _extends({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? autocompletePopper : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","'use client';\n\n/* eslint-disable no-constant-condition */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return findIndex(filteredOptions, option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => _extends({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      var _getOptionKey;\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;","import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, { client, options, mutation });\n  });\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = {\n        called: false,\n        loading: false,\n        client: ref.current.client,\n      };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const current = ref.current;\n    current.isMounted = true;\n\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["getAutocompleteUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_ClearIcon","_ArrowDropDownIcon","_excluded","_excluded2","_excluded3","_excluded4","AutocompleteRoot","styled","name","overridesResolver","props","styles","ownerState","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","size","autocompleteClasses","tag","capitalize","inputRoot","input","root","focused","clearIndicator","visibility","margin","maxWidth","paddingRight","width","minWidth","inputClasses","paddingBottom","padding","inputBaseClasses","sizeSmall","outlinedInputClasses","endAdornment","right","paddingTop","paddingLeft","filledInputClasses","hiddenLabel","flexGrow","textOverflow","opacity","variants","style","multiple","flexWrap","AutocompleteEndAdornment","position","top","transform","AutocompleteClearIndicator","IconButton","marginRight","AutocompletePopupIndicator","_ref","_extends","popupIndicator","popupOpen","popupIndicatorOpen","AutocompletePopper","Popper","option","popper","disablePortal","popperDisablePortal","_ref2","theme","zIndex","vars","modal","AutocompletePaper","Paper","paper","_ref3","typography","body1","overflow","AutocompleteLoading","loading","_ref4","color","palette","text","secondary","AutocompleteNoOptions","noOptions","_ref5","AutocompleteListbox","listbox","_ref6","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","primary","mainChannel","selectedOpacity","alpha","main","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","ListSubheader","groupLabel","_ref7","background","AutocompleteGroupUl","groupUl","React","inProps","ref","_slotProps$clearIndic","_slotProps$paper","_slotProps$popper","_slotProps$popupIndic","useDefaultProps","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","_jsx","ClearIcon","fontSize","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","getOptionLabelProp","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","ArrowDropDownIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slotProps","other","_objectWithoutPropertiesLoose","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","expanded","id","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","useAutocomplete","componentName","onMouseDown","handleInputMouseDown","externalListboxRef","_getListboxProps","listboxRef","otherListboxProps","combinedListboxRef","useForkRef","_option$label","label","classes","slots","composeClasses","useUtilityClasses","startAdornment","length","getCustomizedTagProps","params","map","index","_getCustomizedTagProp","key","customTagProps","Chip","Array","isArray","splice","push","children","_jsxs","component","group","defaultRenderOption","props2","otherProps","renderListOption","optionProps","clearIndicatorSlotProps","paperSlotProps","popperSlotProps","popupIndicatorSlotProps","renderAutocompletePopperChildren","as","clientWidth","role","open","clsx","autocompletePopper","options","option2","index2","event","preventDefault","undefined","InputLabelProps","InputProps","onClick","target","currentTarget","title","inputProps","stripDiacritics","string","normalize","replace","createFilterOptions","config","arguments","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","toLowerCase","filteredOptions","filter","candidate","indexOf","slice","findIndex","array","comp","i","defaultFilterOptions","defaultIsActiveElementInListbox","_listboxRef$current$p","current","parentElement","contains","document","activeElement","unstable_isActiveElementInListbox","unstable_classNamePrefix","disabledProp","filterOptions","getOptionDisabled","getOptionKey","idProp","inputValueProp","isOptionEqualToValue","onChange","onClose","onHighlightChange","onInputChange","onOpen","openProp","valueProp","useId","optionLabel","String","ignoreFocus","firstFocus","inputRef","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","useControlled","controlled","default","setInputValueState","state","setFocused","resetInputValue","newValue","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","some","value2","previousProps","usePreviousProps","valueChange","listboxAvailable","focusTag","useEventCallback","tagToFocus","querySelector","setHighlightedIndex","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","getAttribute","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","nextFocus","nextFocusDisabled","hasAttribute","validOptionIndex","getNextIndex","maxIndex","newIndex","Math","abs","setSelectionRange","syncHighlightedIndex","previousHighlightedOptionIndex","getPreviousHighlightedOptionIndex","every","val","value1","previousHighlightedOption","isSameValue","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","setRef","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","origin","ctrlKey","metaKey","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","onKeyDown","defaultMuiPrevented","which","stopPropagation","handleFocus","handleBlur","handleInputChange","handleOptionMouseMove","Number","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","Map","reduce","acc","htmlFor","onBlur","onFocus","autoCapitalize","spellCheck","tabIndex","type","onDelete","_getOptionKey","onMouseMove","onTouchStart","useMutation","mutation","client","useApolloClient","verifyDocumentType","DocumentType","Mutation","_a","called","result","setResult","mutationId","isMounted","useIsomorphicLayoutEffect","Object","assign","execute","executeOptions","baseOptions","__assign","ignoreResults","error","data","clientOptions","mergeOptions","mutate","then","response","errors","ApolloError","graphQLErrors","onError","result_1","equal","onCompleted","_b","catch","result_2","reset","result_3"],"sourceRoot":""}