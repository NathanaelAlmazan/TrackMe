{"version":3,"file":"static/js/848.cc026c57.chunk.js","mappings":"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","sources":["sections/calendar/form-dialog/index.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Grid from '@mui/material/Grid';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport axios from 'axios';\r\nimport { DatePicker, Snackbar, Iconify } from '../../../components';\r\nimport { CREATE_EVENT, CREATE_SUBMISSION, GET_EVENT_BY_ID, GET_REPORTS, UPDATE_EVENT } from '../../../graphql/reports';\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\n\r\n// types\r\nimport { Frequency } from '../../../__generated__/graphql';\r\nimport { Uploads } from '../../documents/document-dialog/CommentField';\r\n\r\ninterface EventForm {\r\n    reportId: string;\r\n    subject: string;\r\n    image?: string | null;\r\n    description: string;\r\n    frequency: \"NONE\" | \"MONTHLY\" | \"YEARLY\";\r\n}\r\n\r\nconst formDefaults: EventForm = {\r\n    reportId: '',\r\n    subject: '',\r\n    image: '',\r\n    description: '',\r\n    frequency: \"NONE\"\r\n}\r\n\r\nexport default function FormDialog({\r\n    eventId,\r\n    selectedDate,\r\n    open,\r\n    onClose\r\n}: {\r\n    eventId?: number | null,\r\n    selectedDate: Date,\r\n    open: boolean,\r\n    onClose: () => void\r\n}) {\r\n    const { data: reports, error: reportError } = useQuery(GET_REPORTS);\r\n    const [getEventById, { error: getError }] = useLazyQuery(GET_EVENT_BY_ID, {\r\n        fetchPolicy: 'no-cache'\r\n    }); \r\n\r\n    const [image, setImage] = useState<File | null>(null);\r\n    const [formData, setFormData] = useState<EventForm>(formDefaults);\r\n    const [eventDate, setEventDate] = useState<Dayjs>(dayjs(selectedDate));\r\n    const [localDeadline, setLocalDeadline] = useState<Dayjs>(dayjs(selectedDate));\r\n    const [nationalDeadline, setNationalDeadline] = useState<Dayjs>(dayjs(selectedDate));\r\n\r\n    const { subject, description, frequency, reportId } = formData;\r\n\r\n    const [createEvent, { error: createError }] = useMutation(CREATE_EVENT);\r\n    const [updateEvent, { error: updateError }] = useMutation(UPDATE_EVENT);\r\n\r\n    const [createSubmission, { error: submitError }] = useMutation(CREATE_SUBMISSION);\r\n\r\n    useEffect(() => {\r\n        if (eventId) {\r\n            getEventById({ variables: { id: eventId } }).then(({ data }) => {\r\n                if (data) {\r\n                    setFormData({\r\n                        subject: data.getEventById.subject,\r\n                        description: data.getEventById.description,\r\n                        frequency: data.getEventById.frequency,\r\n                        image: data.getEventById.image,\r\n                        reportId: ''\r\n                    });\r\n\r\n                    setEventDate(dayjs(new Date(data.getEventById.date)));\r\n                }\r\n            });\r\n        } else {\r\n            setFormData(formDefaults);\r\n            setEventDate(dayjs(new Date()));\r\n        }\r\n    }, [eventId, getEventById]);\r\n\r\n    useEffect(() => {\r\n        setEventDate(dayjs(selectedDate));\r\n        setLocalDeadline(dayjs(selectedDate));\r\n        setNationalDeadline(dayjs(selectedDate));\r\n    }, [selectedDate])\r\n\r\n    const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({\r\n         ...formData,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) setImage(e.target.files[0]);\r\n    }\r\n\r\n    const handleDateChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setEventDate(newValue);\r\n    };\r\n\r\n    const handleLocalDeadlineChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setLocalDeadline(newValue);\r\n    };\r\n\r\n    const handleNationalDeadlineChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setNationalDeadline(newValue);\r\n    };\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (reportId) {\r\n            await createSubmission({\r\n                variables: {\r\n                    reportId: parseInt(reportId),\r\n                    localDue: localDeadline.toISOString(),\r\n                    nationalDue: nationalDeadline.toISOString()\r\n                }\r\n            })\r\n        } else {\r\n            let imageUrl: string | null = null;\r\n            if (image) {\r\n                const form = new FormData();\r\n                form.append(\"files\", image);\r\n\r\n                const response = await axios.post(process.env.REACT_APP_UPLOAD_URL as string, form);\r\n                \r\n                if (response.data) {\r\n                    const uploaded: Uploads[] = response.data.files;\r\n                    imageUrl = uploaded[0].fileUrl;\r\n                }\r\n            }\r\n\r\n            if (eventId) {\r\n                await updateEvent({\r\n                    variables: {\r\n                        id: eventId,\r\n                        subject,\r\n                        description,\r\n                        image: imageUrl,\r\n                        date: eventDate.toISOString(),\r\n                        frequency: frequency as Frequency\r\n                    }\r\n                });\r\n            } else {\r\n                await createEvent({\r\n                    variables: {\r\n                        subject,\r\n                        description,\r\n                        image: imageUrl,\r\n                        date: eventDate.toISOString(),\r\n                        frequency: frequency as Frequency\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        // reset form\r\n        setFormData(formDefaults);\r\n        setEventDate(dayjs(new Date(selectedDate)));\r\n        setLocalDeadline(dayjs(new Date(selectedDate)));\r\n        setNationalDeadline(dayjs(new Date(selectedDate)));\r\n\r\n        onClose(); // close dialog\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <Dialog open={open} onClose={onClose} maxWidth='sm' fullWidth>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n            {eventId ? (\r\n                <DialogTitle>Edit Event</DialogTitle>\r\n            ) : (\r\n                <Divider sx={{ pt: 2 }}>ADD EVENT</Divider>\r\n            )}\r\n            \r\n            <DialogContent>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                            name='subject'\r\n                            label='Event Name'\r\n                            variant='outlined'\r\n                            value={subject}\r\n                            onChange={handleFormChange}\r\n                            fullWidth\r\n                            required={!reportId}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                            name='description'\r\n                            label='Description'\r\n                            variant='outlined'\r\n                            value={description}\r\n                            onChange={handleFormChange}\r\n                            fullWidth\r\n                            required={!reportId}\r\n                            helperText={image?.name || formData.image}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <Tooltip title='Attach Image'>\r\n                                            <IconButton component='label' edge=\"end\">\r\n                                                <Iconify icon='tdesign:image-add' />\r\n\r\n                                                <input type='file' accept=\"image/*\" onChange={handleFileChange} style={{ display: 'none' }} hidden />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <DatePicker \r\n                            label='Event Date'\r\n                            value={eventDate}\r\n                            onChange={handleDateChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <TextField\r\n                            name='frequency'\r\n                            select\r\n                            label=\"Frequency\"\r\n                            variant='outlined'\r\n                            value={frequency}\r\n                            onChange={handleFormChange}\r\n                            required={!reportId}\r\n                            fullWidth\r\n                        >\r\n                            <MenuItem value=\"NONE\">\r\n                                None\r\n                            </MenuItem>\r\n                            <MenuItem value=\"MONTHLY\">\r\n                                Monthly\r\n                            </MenuItem>\r\n                            <MenuItem value=\"YEARLY\">\r\n                                Yearly\r\n                            </MenuItem>\r\n                        </TextField>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {!eventId && (\r\n                    <>\r\n                    <Divider sx={{ py: 2 }}>OR ADD REPORT</Divider>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                name='reportId'\r\n                                select\r\n                                label=\"Report\"\r\n                                variant='outlined'\r\n                                value={reportId}\r\n                                onChange={handleFormChange}\r\n                                required={!!reportId}\r\n                                fullWidth\r\n                            >   \r\n                                {reports && reports.getReports.map(report => (\r\n                                    <MenuItem key={report.id} value={report.id}>\r\n                                        {report.name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={6} md={6}>\r\n                            <DatePicker \r\n                                label='Regional Deadline'\r\n                                value={localDeadline}\r\n                                onChange={handleLocalDeadlineChange}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={6} md={6}>\r\n                            <DatePicker \r\n                                label='National Deadline'\r\n                                value={nationalDeadline}\r\n                                onChange={handleNationalDeadlineChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    </>\r\n                )}\r\n\r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Stack direction='row' spacing={2}>\r\n                    <Button onClick={onClose} color='inherit'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant='contained' color='inherit' type='submit'>\r\n                        Save\r\n                    </Button>\r\n                </Stack>\r\n            </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={createError?.message || getError?.message || updateError?.message \r\n                || reportError?.message || submitError?.message} \r\n        />\r\n\r\n        </>\r\n    );\r\n}"],"names":["formDefaults","reportId","subject","image","description","frequency","FormDialog","_ref","eventId","selectedDate","open","onClose","data","reports","error","reportError","useQuery","GET_REPORTS","getEventById","getError","useLazyQuery","GET_EVENT_BY_ID","fetchPolicy","setImage","useState","formData","setFormData","eventDate","setEventDate","dayjs","localDeadline","setLocalDeadline","nationalDeadline","setNationalDeadline","createEvent","createError","useMutation","CREATE_EVENT","updateEvent","updateError","UPDATE_EVENT","createSubmission","submitError","CREATE_SUBMISSION","useEffect","variables","id","then","_ref2","Date","date","handleFormChange","e","target","name","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","parseInt","localDue","toISOString","nationalDue","imageUrl","form","FormData","append","response","axios","post","process","files","fileUrl","DialogTitle","Divider","sx","pt","DialogContent","Grid","container","spacing","item","xs","TextField","label","variant","onChange","required","helperText","InputProps","endAdornment","InputAdornment","position","Tooltip","title","IconButton","component","edge","Iconify","icon","type","accept","style","display","hidden","sm","md","DatePicker","newValue","select","MenuItem","py","getReports","map","report","DialogActions","Stack","direction","Button","onClick","color","Snackbar","severity","message"],"sourceRoot":""}