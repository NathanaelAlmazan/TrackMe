{"version":3,"file":"static/js/848.ded3c2dd.chunk.js","mappings":"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","sources":["sections/calendar/form-dialog/index.tsx","../node_modules/@mui/material/DialogTitle/DialogTitle.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport Divider from '@mui/material/Divider';\r\nimport Grid from '@mui/material/Grid';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { DatePicker, Snackbar } from '../../../components';\r\nimport { CREATE_EVENT, CREATE_SUBMISSION, GET_EVENT_BY_ID, GET_REPORTS, UPDATE_EVENT } from '../../../graphql/reports';\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport { Frequency } from '../../../__generated__/graphql';\r\n\r\ninterface EventForm {\r\n    reportId: string;\r\n    subject: string;\r\n    description: string;\r\n    frequency: \"NONE\" | \"MONTHLY\" | \"YEARLY\";\r\n}\r\n\r\nconst formDefaults: EventForm = {\r\n    reportId: '',\r\n    subject: '',\r\n    description: '',\r\n    frequency: \"NONE\"\r\n}\r\n\r\nexport default function FormDialog({\r\n    eventId,\r\n    selectedDate,\r\n    open,\r\n    onClose\r\n}: {\r\n    eventId?: number | null,\r\n    selectedDate: Date,\r\n    open: boolean,\r\n    onClose: () => void\r\n}) {\r\n    const { data: reports, error: reportError } = useQuery(GET_REPORTS);\r\n    const [getEventById, { error: getError }] = useLazyQuery(GET_EVENT_BY_ID, {\r\n        fetchPolicy: 'no-cache'\r\n    }); \r\n\r\n    const [formData, setFormData] = useState<EventForm>(formDefaults);\r\n    const [eventDate, setEventDate] = useState<Dayjs>(dayjs(selectedDate));\r\n    const [localDeadline, setLocalDeadline] = useState<Dayjs>(dayjs(selectedDate));\r\n    const [nationalDeadline, setNationalDeadline] = useState<Dayjs>(dayjs(selectedDate));\r\n\r\n    const { subject, description, frequency, reportId } = formData;\r\n\r\n    const [createEvent, { error: createError }] = useMutation(CREATE_EVENT);\r\n    const [updateEvent, { error: updateError }] = useMutation(UPDATE_EVENT);\r\n\r\n    const [createSubmission, { error: submitError }] = useMutation(CREATE_SUBMISSION);\r\n\r\n    useEffect(() => {\r\n        if (eventId) {\r\n            getEventById({ variables: { id: eventId } }).then(({ data }) => {\r\n                if (data) {\r\n                    setFormData({\r\n                        subject: data.getEventById.subject,\r\n                        description: data.getEventById.description,\r\n                        frequency: data.getEventById.frequency,\r\n                        reportId: ''\r\n                    });\r\n\r\n                    setEventDate(dayjs(new Date(data.getEventById.date)));\r\n                }\r\n            });\r\n        } else {\r\n            setFormData(formDefaults);\r\n            setEventDate(dayjs(new Date()));\r\n        }\r\n    }, [eventId, getEventById]);\r\n\r\n    useEffect(() => {\r\n        setEventDate(dayjs(selectedDate));\r\n        setLocalDeadline(dayjs(selectedDate));\r\n        setNationalDeadline(dayjs(selectedDate));\r\n    }, [selectedDate])\r\n\r\n    const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({\r\n         ...formData,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const handleDateChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setEventDate(newValue);\r\n    };\r\n\r\n    const handleLocalDeadlineChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setLocalDeadline(newValue);\r\n    };\r\n\r\n    const handleNationalDeadlineChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setNationalDeadline(newValue);\r\n    };\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (reportId) {\r\n            await createSubmission({\r\n                variables: {\r\n                    reportId: parseInt(reportId),\r\n                    localDue: localDeadline.toISOString(),\r\n                    nationalDue: nationalDeadline.toISOString()\r\n                }\r\n            })\r\n        } else {\r\n            if (eventId) {\r\n                await updateEvent({\r\n                    variables: {\r\n                        id: eventId,\r\n                        subject,\r\n                        description,\r\n                        date: eventDate.toISOString(),\r\n                        frequency: frequency as Frequency\r\n                    }\r\n                });\r\n            } else {\r\n                await createEvent({\r\n                    variables: {\r\n                        subject,\r\n                        description,\r\n                        date: eventDate.toISOString(),\r\n                        frequency: frequency as Frequency\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        // reset form\r\n        setFormData(formDefaults);\r\n        setEventDate(dayjs(new Date(selectedDate)));\r\n        setLocalDeadline(dayjs(new Date(selectedDate)));\r\n        setNationalDeadline(dayjs(new Date(selectedDate)));\r\n\r\n        onClose(); // close dialog\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Dialog open={open} onClose={onClose} maxWidth='sm' fullWidth>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n            {eventId ? (\r\n                <DialogTitle>Edit Event</DialogTitle>\r\n            ) : (\r\n                <Divider sx={{ pt: 2 }}>ADD EVENT</Divider>\r\n            )}\r\n            \r\n            <DialogContent>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                            name='subject'\r\n                            label='Event Name'\r\n                            variant='outlined'\r\n                            value={subject}\r\n                            onChange={handleFormChange}\r\n                            fullWidth\r\n                            required={!reportId}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                            name='description'\r\n                            label='Description'\r\n                            variant='outlined'\r\n                            value={description}\r\n                            onChange={handleFormChange}\r\n                            fullWidth\r\n                            required={!reportId}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <DatePicker \r\n                            label='Event Date'\r\n                            value={eventDate}\r\n                            onChange={handleDateChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <TextField\r\n                            name='frequency'\r\n                            select\r\n                            label=\"Frequency\"\r\n                            variant='outlined'\r\n                            value={frequency}\r\n                            onChange={handleFormChange}\r\n                            required={!reportId}\r\n                            fullWidth\r\n                        >\r\n                            <MenuItem value=\"NONE\">\r\n                                None\r\n                            </MenuItem>\r\n                            <MenuItem value=\"MONTHLY\">\r\n                                Monthly\r\n                            </MenuItem>\r\n                            <MenuItem value=\"YEARLY\">\r\n                                Yearly\r\n                            </MenuItem>\r\n                        </TextField>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {!eventId && (\r\n                    <>\r\n                    <Divider sx={{ py: 2 }}>OR ADD REPORT</Divider>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                name='reportId'\r\n                                select\r\n                                label=\"Report\"\r\n                                variant='outlined'\r\n                                value={reportId}\r\n                                onChange={handleFormChange}\r\n                                required={!!reportId}\r\n                                fullWidth\r\n                            >   \r\n                                {reports && reports.getReports.map(report => (\r\n                                    <MenuItem key={report.id} value={report.id}>\r\n                                        {report.name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={6} md={6}>\r\n                            <DatePicker \r\n                                label='Regional Deadline'\r\n                                value={localDeadline}\r\n                                onChange={handleLocalDeadlineChange}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={6} md={6}>\r\n                            <DatePicker \r\n                                label='National Deadline'\r\n                                value={nationalDeadline}\r\n                                onChange={handleNationalDeadlineChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    </>\r\n                )}\r\n\r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Stack direction='row' spacing={2}>\r\n                    <Button onClick={onClose} color='inherit'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant='contained' color='inherit' type='submit'>\r\n                        Save\r\n                    </Button>\r\n                </Stack>\r\n            </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={createError?.message || getError?.message || updateError?.message \r\n                || reportError?.message || submitError?.message} \r\n        />\r\n\r\n        </>\r\n    );\r\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;"],"names":["formDefaults","reportId","subject","description","frequency","FormDialog","_ref","eventId","selectedDate","open","onClose","data","reports","error","reportError","useQuery","GET_REPORTS","getEventById","getError","useLazyQuery","GET_EVENT_BY_ID","fetchPolicy","formData","setFormData","useState","eventDate","setEventDate","dayjs","localDeadline","setLocalDeadline","nationalDeadline","setNationalDeadline","createEvent","createError","useMutation","CREATE_EVENT","updateEvent","updateError","UPDATE_EVENT","createSubmission","submitError","CREATE_SUBMISSION","useEffect","variables","id","then","_ref2","Date","date","handleFormChange","e","target","name","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","parseInt","localDue","toISOString","nationalDue","DialogTitle","Divider","sx","pt","DialogContent","Grid","container","spacing","item","xs","TextField","label","variant","onChange","required","sm","md","DatePicker","newValue","select","MenuItem","py","getReports","map","report","DialogActions","Stack","direction","Button","onClick","color","type","Snackbar","severity","message","_excluded","DialogTitleRoot","styled","Typography","slot","overridesResolver","props","styles","root","padding","flex","React","inProps","ref","useThemeProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","titleId","DialogContext","_extends","component","clsx"],"sourceRoot":""}