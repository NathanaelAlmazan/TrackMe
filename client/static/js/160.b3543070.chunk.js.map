{"version":3,"file":"static/js/160.b3543070.chunk.js","mappings":"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","sources":["sections/auth/login.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import { useState } from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Card from '@mui/material/Card';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { alpha, useTheme } from '@mui/material/styles';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { login } from '../../redux';\r\nimport { useAppDispatch, useRouter } from '../../hooks';\r\n\r\nimport { bgGradient } from '../../theme/css';\r\n\r\nimport { Logo, Iconify, Snackbar } from '../../components';\r\n\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { LOGIN_OFFICER } from '../../graphql/users';\r\nimport { Role } from '../../__generated__/graphql';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface OfficerInput {\r\n    firstName: string;\r\n    lastName: string;\r\n    password: string;\r\n};\r\n\r\nconst formDefaults = {\r\n    firstName: '',\r\n    lastName: '',\r\n    password: ''\r\n}\r\n\r\nexport default function LoginView() {\r\n  const theme = useTheme();\r\n\r\n  const router = useRouter();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [error, setError] = useState<string>();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [formData, setFormData] = useState<OfficerInput>(formDefaults);\r\n\r\n  const { firstName, lastName, password } = formData;\r\n\r\n  const [loginOfficer, { error: loginError }] = useLazyQuery(LOGIN_OFFICER);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({...formData, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const officer = await loginOfficer({\r\n        variables: {\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            password: password\r\n        }\r\n    });\r\n\r\n    if (officer.data && officer.data.loginOfficer) {\r\n      dispatch(login({\r\n        uuid: officer.data.loginOfficer.uuid,\r\n        firstName: officer.data.loginOfficer.firstName,\r\n        lastName: officer.data.loginOfficer.lastName,\r\n        role: officer.data.loginOfficer.position?.role,\r\n        office: officer.data.loginOfficer.office?.id,\r\n        position: officer.data.loginOfficer.position?.label,\r\n        avatar: officer.data.loginOfficer.avatar\r\n      }));\r\n\r\n      const role = officer.data.loginOfficer.position?.role || Role.Officer;\r\n      if ([Role.Superuser, Role.Director].includes(role)) router.push('/dashboard');\r\n      else router.push('/documents');\r\n    }\r\n    else setError(\"Wrong credentials or account is inactive.\");\r\n\r\n    setFormData(formDefaults); // reset form\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        ...bgGradient({\r\n          color: alpha(theme.palette.background.default, 0.5),\r\n          imgUrl: '/assets/background/overlay_5.jpg',\r\n        }),\r\n        height: 1,\r\n      }}\r\n    >\r\n      <Logo\r\n        sx={{\r\n          position: 'fixed',\r\n          top: { xs: 16, md: 24 },\r\n          left: { xs: 16, md: 24 },\r\n        }}\r\n      />\r\n\r\n      <Stack alignItems=\"center\" justifyContent=\"center\" sx={{ height: 1 }}>\r\n        <Card\r\n          sx={{\r\n            p: 5,\r\n            width: 1,\r\n            maxWidth: 420,\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\">SIGN IN</Typography>\r\n\r\n          <Typography variant=\"body2\" sx={{ mt: 2, mb: 5 }}>\r\n            Don't have an account?\r\n            <Link href='/register' variant=\"subtitle2\" sx={{ ml: 0.5, cursor: 'pointer' }}>\r\n                Sign up\r\n            </Link>\r\n          </Typography>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <Stack spacing={2} sx={{ mb: 3 }}>\r\n                    <TextField \r\n                        name=\"firstName\" \r\n                        label=\"First Name\" \r\n                        value={firstName} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                    />\r\n\r\n                    <TextField \r\n                        name=\"lastName\" \r\n                        label=\"Last Name\" \r\n                        value={lastName} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                    />\r\n\r\n                    <TextField\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        value={password} \r\n                        onChange={handleChange}\r\n                        required\r\n                        fullWidth\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                                <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Stack>\r\n\r\n                <Button\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"inherit\"\r\n                >\r\n                    Sign in\r\n                </Button>\r\n            </form>\r\n        </Card>\r\n      </Stack>\r\n\r\n      <Snackbar \r\n          severity='error' \r\n          message={error || loginError?.message} \r\n      />\r\n    </Box>\r\n  );\r\n}","import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryResult,\n} from \"../types/types.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current,\n  });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = internalState\n        .executeQuery({ ...options, skip: false })\n        .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    []\n  );\n\n  return [execute, result];\n}\n"],"names":["formDefaults","firstName","lastName","password","LoginView","theme","useTheme","router","useRouter","dispatch","useAppDispatch","error","setError","useState","showPassword","setShowPassword","formData","setFormData","loginOfficer","loginError","useLazyQuery","LOGIN_OFFICER","handleChange","event","target","name","value","_jsxs","Box","sx","bgGradient","color","alpha","palette","background","default","imgUrl","height","children","_jsx","Logo","position","top","xs","md","left","Stack","alignItems","justifyContent","Card","p","width","maxWidth","Typography","variant","mt","mb","Link","href","ml","cursor","onSubmit","async","preventDefault","officer","variables","data","_officer$data$loginOf","_officer$data$loginOf2","_officer$data$loginOf3","_officer$data$loginOf4","login","uuid","role","office","id","label","avatar","Role","Officer","Superuser","Director","includes","push","spacing","TextField","onChange","required","fullWidth","type","InputProps","endAdornment","InputAdornment","IconButton","onClick","edge","Iconify","icon","Button","size","Snackbar","severity","message","EAGER_METHODS","query","options","execOptionsRef","React","optionsRef","queryRef","merged","mergeOptions","current","document","_a","internalState","useInternalState","useApolloClient","client","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdateState","apply","this","arguments","_i","EAGER_METHODS_1","length","execute","executeOptions","fetchPolicy","promise","executeQuery","then","queryResult","catch"],"sourceRoot":""}