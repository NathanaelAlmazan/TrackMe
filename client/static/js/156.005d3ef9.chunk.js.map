{"version":3,"file":"static/js/156.005d3ef9.chunk.js","mappings":"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","sources":["sections/documents/form-dialog/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Avatar from '@mui/material/Avatar';\r\n\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\n\r\nimport { MultiSelect, DatePicker, Snackbar } from '../../../components';\r\nimport { GET_OFFICES, GET_SIGNATORIES } from '../../../graphql/users';\r\nimport { \r\n    GET_PURPOSES, \r\n    GET_STATUSES, \r\n    GET_TYPES, \r\n    GET_TEMP_REF_NUM, \r\n    CREATE_DOCUMENT, \r\n    GET_DOCUMENT_BY_ID ,\r\n    UPDATE_DOCUMENT\r\n} from '../../../graphql/documents';\r\nimport { Status, Tags } from '../../../__generated__/graphql';\r\n\r\ninterface DocumentForm {\r\n    subject: string;\r\n    description: string;\r\n    receivedFrom: string;\r\n    typeId: string;\r\n    purposeId: string;\r\n    statusId: string;\r\n    signatureId: string;\r\n    tag: string;\r\n}\r\n\r\nconst formDefaults = {\r\n    subject: '',\r\n    description: '',\r\n    receivedFrom: '',\r\n    typeId: '',\r\n    purposeId: '',\r\n    statusId: '',\r\n    signatureId: '',\r\n    tag: ''\r\n}\r\n\r\nexport default function FormDialog({\r\n    referenceNum,\r\n    open,\r\n    onClose\r\n}: {\r\n    referenceNum: string | null,\r\n    open: boolean,\r\n    onClose: () => void\r\n}) {\r\n    // fetch options\r\n    const { data: offices, error: officeError } = useQuery(GET_OFFICES, {\r\n        fetchPolicy: 'no-cache'\r\n    }); \r\n    const { data: purposes, error: purposeError } = useQuery(GET_PURPOSES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const { data: statuses, error: statusError } = useQuery(GET_STATUSES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const { data: types, error: typesError } = useQuery(GET_TYPES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const { data: signatories, error: signatoryError } = useQuery(GET_SIGNATORIES, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const { data: reference, error: referenceError, refetch } = useQuery(GET_TEMP_REF_NUM, {\r\n        fetchPolicy: 'no-cache'\r\n    });\r\n    const [getDocumentById, { error: getError }] = useLazyQuery(GET_DOCUMENT_BY_ID, {\r\n        fetchPolicy: 'no-cache'\r\n    }); \r\n\r\n    const [createDocument, { error: createError}] = useMutation(CREATE_DOCUMENT);\r\n    const [updateDocument, { error: updateError}] = useMutation(UPDATE_DOCUMENT);\r\n\r\n    const [referrals, setReferrals] = useState<number[]>([]);\r\n    const [deadline, setDeadline] = useState<Dayjs>(dayjs(new Date()));\r\n    const [formData, setFormData] = useState<DocumentForm>(formDefaults);\r\n\r\n    const { subject, description, receivedFrom, typeId, purposeId, statusId, signatureId, tag } = formData;\r\n\r\n    useEffect(() => {\r\n        if (referenceNum) {\r\n            getDocumentById({ variables: { referenceNum: referenceNum } }).then(({ data }) => {\r\n                if (data) {\r\n                    setFormData({\r\n                        subject: data.getDocumentById.subject,\r\n                        description: data.getDocumentById.description,\r\n                        receivedFrom: data.getDocumentById.receivedFrom,\r\n                        typeId: data.getDocumentById.type ? data.getDocumentById.type.id.toString() : \"\",\r\n                        purposeId: data.getDocumentById.purpose ? data.getDocumentById.purpose.id.toString() : \"\",\r\n                        statusId: data.getDocumentById.status ? data.getDocumentById.status.id.toString() : \"\",\r\n                        tag: data.getDocumentById.tag ? data.getDocumentById.tag : \"\",\r\n                        signatureId: data.getDocumentById.signatory.uuid\r\n                    });\r\n\r\n                    setDeadline(dayjs(new Date(data.getDocumentById.dateDue)));\r\n                    setReferrals(data.getDocumentById.refferedTo.map(office => parseInt(office.id)));\r\n                }\r\n            })\r\n        } else {\r\n            setFormData(formDefaults);\r\n            setDeadline(dayjs(new Date()));\r\n            setReferrals([]);\r\n        }\r\n    }, [referenceNum, getDocumentById])\r\n\r\n    const handleReferralsChange = (selected: number[]) => {\r\n        setReferrals(selected);\r\n    }\r\n\r\n    const handleDeadlineChange = (newValue: Dayjs | null) => {\r\n        if (!newValue) return;\r\n        setDeadline(newValue);\r\n    }\r\n\r\n    const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({\r\n         ...formData,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (referenceNum) {\r\n            await updateDocument({\r\n                variables: {\r\n                    referenceNum: referenceNum,\r\n                    subject,\r\n                    description,\r\n                    receivedFrom,\r\n                    typeId: parseInt(typeId),\r\n                    purposeId: parseInt(purposeId),\r\n                    statusId: parseInt(statusId),\r\n                    signatureId: signatureId,\r\n                    tag: tag.length === 0 ? null : tag as Tags,\r\n                    refferedTo: referrals,\r\n                    dateDue: deadline.toISOString()\r\n                }\r\n            });\r\n        } else {\r\n            await createDocument({\r\n                variables: {\r\n                    subject,\r\n                    description,\r\n                    receivedFrom,\r\n                    typeId: parseInt(typeId),\r\n                    purposeId: parseInt(purposeId),\r\n                    statusId: parseInt(statusId),\r\n                    signatureId: signatureId,\r\n                    tag: tag.length === 0 ? null : tag as Tags,\r\n                    refferedTo: referrals,\r\n                    dateDue: deadline.toISOString()\r\n                }\r\n            });\r\n        }\r\n\r\n        // clear form data\r\n        setFormData(formDefaults);\r\n        setDeadline(dayjs(new Date()));\r\n        setReferrals([]);\r\n\r\n        await refetch(); // get new reference number\r\n        onClose(); // close dialog\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <Dialog open={open} onClose={onClose} maxWidth='lg' fullWidth>\r\n            <form onSubmit={handleSubmit}>\r\n            <DialogContent>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        {reference && (\r\n                            <Typography variant='h6'>\r\n                                {`#${referenceNum ? referenceNum : reference.getTempReferenceNum}`}\r\n                            </Typography>\r\n                        )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={8}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12}>\r\n                                <TextField \r\n                                    name='subject'\r\n                                    label='Subject'\r\n                                    variant='outlined'\r\n                                    value={subject}\r\n                                    onChange={handleFormChange}\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                                <TextField \r\n                                    name='description'\r\n                                    label='Description'\r\n                                    variant='outlined'\r\n                                    value={description}\r\n                                    onChange={handleFormChange}\r\n                                    multiline\r\n                                    rows={4}\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                                <TextField \r\n                                    name='receivedFrom'\r\n                                    label='Received From'\r\n                                    variant='outlined'\r\n                                    value={receivedFrom}\r\n                                    onChange={handleFormChange}\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n                            </Grid>\r\n\r\n                            {offices && (\r\n                                <Grid item xs={12}>\r\n                                    <MultiSelect \r\n                                        name='referredTo'\r\n                                        label='Referred To'\r\n                                        selected={referrals}\r\n                                        options={offices.getOffices.map(office => ({\r\n                                            id: parseInt(office.id),\r\n                                            label: office.name\r\n                                        }))}\r\n                                        onChange={handleReferralsChange}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n\r\n                            {types && (\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        name='typeId'\r\n                                        select\r\n                                        label=\"Document Type\"\r\n                                        value={typeId}\r\n                                        onChange={handleFormChange}\r\n                                        variant='outlined'\r\n                                        required\r\n                                        fullWidth\r\n                                    >\r\n                                        {types.getDocumentTypes.map((option) => (\r\n                                            <MenuItem key={option.id} value={option.id}>\r\n                                                {option.label}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Grid>\r\n                            )}\r\n\r\n                            {purposes && (\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        name='purposeId'\r\n                                        select\r\n                                        label=\"Document Purpose\"\r\n                                        value={purposeId}\r\n                                        onChange={handleFormChange}\r\n                                        variant='outlined'\r\n                                        required\r\n                                        fullWidth\r\n                                    >\r\n                                        {purposes.getDocumentPurposes.map((option) => (\r\n                                            <MenuItem key={option.id} value={option.id}>\r\n                                                {option.label}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Grid>\r\n                            )} \r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={4}>\r\n                        <Stack spacing={3}>\r\n                            {statuses && (\r\n                                <TextField\r\n                                    name='statusId'\r\n                                    select\r\n                                    label=\"Document Status\"\r\n                                    value={statusId}\r\n                                    onChange={handleFormChange}\r\n                                    variant='outlined'\r\n                                    required\r\n                                    fullWidth\r\n                                >\r\n                                    {statuses.getDocumentStatus\r\n                                        .filter(status => status.category === Status.NotStarted || status.category === Status.NotActionable || referenceNum)\r\n                                        .map((option) => (\r\n                                        <MenuItem key={option.id} value={option.id}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            )}\r\n\r\n                            <DatePicker \r\n                                label='Deadline'\r\n                                value={deadline}\r\n                                onChange={handleDeadlineChange}\r\n                            />\r\n\r\n                            <TextField\r\n                                name='tag'\r\n                                select\r\n                                label=\"Document Tag\"\r\n                                variant='outlined'\r\n                                value={tag}\r\n                                onChange={handleFormChange}\r\n                                fullWidth\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    None\r\n                                </MenuItem>\r\n                                <MenuItem value=\"CONFIDENTIAL\">\r\n                                    Confidential\r\n                                </MenuItem>\r\n                                <MenuItem value=\"TOP_PRIORITY\">\r\n                                    Top Prioroty\r\n                                </MenuItem>\r\n                                <MenuItem value=\"FOLLOW_UP\">\r\n                                    Follow Up\r\n                                </MenuItem>\r\n                            </TextField>\r\n\r\n                            {signatories && (\r\n                                <TextField\r\n                                    name='signatureId'\r\n                                    select\r\n                                    label=\"Signatory\"\r\n                                    value={signatureId}\r\n                                    onChange={handleFormChange}\r\n                                    variant='outlined'\r\n                                    required\r\n                                    fullWidth\r\n                                >\r\n                                    {signatories.getSignatories.map((option) => (\r\n                                        <MenuItem key={option.uuid} value={option.uuid}>\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                                <Avatar alt={option.lastName} src={option.avatar} />\r\n                                                <Typography variant=\"subtitle2\" noWrap>\r\n                                                    {`${option.firstName} ${option.lastName}`}\r\n                                                </Typography>\r\n                                            </Stack>\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            )} \r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Stack direction='row' spacing={2}>\r\n                    <Button onClick={onClose} color='inherit'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant='contained' color='inherit' type='submit'>\r\n                        Save\r\n                    </Button>\r\n                </Stack>\r\n            </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n\r\n        <Snackbar \r\n            severity='error' \r\n            message={officeError?.message || purposeError?.message || createError?.message || updateError?.message ||\r\n                statusError?.message || typesError?.message || referenceError?.message || getError?.message || signatoryError?.message} \r\n        />\r\n\r\n        </>\r\n    );\r\n}"],"names":["formDefaults","subject","description","receivedFrom","typeId","purposeId","statusId","signatureId","tag","FormDialog","_ref","referenceNum","open","onClose","data","offices","error","officeError","useQuery","GET_OFFICES","fetchPolicy","purposes","purposeError","GET_PURPOSES","statuses","statusError","GET_STATUSES","types","typesError","GET_TYPES","signatories","signatoryError","GET_SIGNATORIES","reference","referenceError","refetch","GET_TEMP_REF_NUM","getDocumentById","getError","useLazyQuery","GET_DOCUMENT_BY_ID","createDocument","createError","useMutation","CREATE_DOCUMENT","updateDocument","updateError","UPDATE_DOCUMENT","referrals","setReferrals","useState","deadline","setDeadline","dayjs","Date","formData","setFormData","useEffect","variables","then","_ref2","type","id","toString","purpose","status","signatory","uuid","dateDue","refferedTo","map","office","parseInt","handleFormChange","e","target","name","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","length","toISOString","DialogContent","Grid","container","spacing","item","xs","Typography","variant","concat","getTempReferenceNum","sm","md","TextField","label","onChange","required","multiline","rows","MultiSelect","selected","options","getOffices","select","getDocumentTypes","option","MenuItem","getDocumentPurposes","Stack","getDocumentStatus","filter","category","Status","NotStarted","NotActionable","DatePicker","newValue","getSignatories","direction","alignItems","Avatar","alt","lastName","src","avatar","noWrap","firstName","DialogActions","Button","onClick","color","Snackbar","severity","message"],"sourceRoot":""}