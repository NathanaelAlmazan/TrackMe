{"version":3,"file":"static/js/156.47a28eac.chunk.js","mappings":"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","sources":["sections/documents/form-dialog/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport Button from \"@mui/material/Button\";\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\r\n\r\nimport axios from \"axios\";\r\nimport { useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\r\nimport dayjs, { Dayjs } from \"dayjs\";\r\n\r\nimport {\r\n  Iconify,\r\n  MultiSelect,\r\n  DatePicker,\r\n  Snackbar,\r\n} from \"../../../components\";\r\nimport {\r\n  GET_OFFICERS,\r\n  GET_OFFICES,\r\n  GET_SIGNATORIES,\r\n} from \"../../../graphql/users\";\r\nimport {\r\n  GET_PURPOSES,\r\n  GET_STATUSES,\r\n  GET_TYPES,\r\n  GET_TEMP_REF_NUM,\r\n  CREATE_DOCUMENT,\r\n  GET_DOCUMENT_BY_ID,\r\n  UPDATE_DOCUMENT,\r\n} from \"../../../graphql/documents\";\r\nimport { Status, Tags } from \"../../../__generated__/graphql\";\r\n\r\ninterface DocumentForm {\r\n  subject: string;\r\n  description: string;\r\n  receivedFrom: string;\r\n  typeId: string;\r\n  purposeIds: string;\r\n  statusId: string;\r\n  signatureId: string;\r\n  tag: string;\r\n}\r\n\r\ntype MessageFiles = {\r\n  fileUrl: string;\r\n  fileName: string;\r\n  fileType: string;\r\n};\r\n\r\nconst formDefaults = {\r\n  subject: \"\",\r\n  description: \"\",\r\n  receivedFrom: \"\",\r\n  typeId: \"\",\r\n  purposeIds: \"\",\r\n  statusId: \"\",\r\n  signatureId: \"\",\r\n  tag: \"\",\r\n};\r\n\r\nexport const BIN_OFFICE = 20;\r\n\r\nconst filter = createFilterOptions<any>();\r\n\r\nfunction convertFileListToArray(fileList: FileList): File[] {\r\n  const filesArray: File[] = [];\r\n\r\n  // Convert FileList to array\r\n  for (let i = 0; i < fileList.length; i++) {\r\n    const file = fileList.item(i);\r\n    if (file) {\r\n      filesArray.push(file);\r\n    }\r\n  }\r\n\r\n  return filesArray;\r\n}\r\n\r\nexport default function FormDialog({\r\n  referenceNum,\r\n  officerId,\r\n  open,\r\n  onClose,\r\n}: {\r\n  referenceNum: string | null;\r\n  officerId: string;\r\n  open: boolean;\r\n  onClose: () => void;\r\n}) {\r\n  // fetch options\r\n  const { data: offices, error: officeError } = useQuery(GET_OFFICES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: purposes, error: purposeError } = useQuery(GET_PURPOSES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: statuses, error: statusError } = useQuery(GET_STATUSES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: types, error: typesError } = useQuery(GET_TYPES, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const { data: signatories, error: signatoryError } = useQuery(\r\n    GET_SIGNATORIES,\r\n    {\r\n      fetchPolicy: \"no-cache\",\r\n    }\r\n  );\r\n  const {\r\n    data: reference,\r\n    error: referenceError,\r\n    refetch,\r\n  } = useQuery(GET_TEMP_REF_NUM, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const [getDocumentById, { error: getError }] = useLazyQuery(\r\n    GET_DOCUMENT_BY_ID,\r\n    {\r\n      fetchPolicy: \"no-cache\",\r\n    }\r\n  );\r\n  const [getOfficers, { error: officersError }] = useLazyQuery(GET_OFFICERS, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const [createDocument, { error: createError }] = useMutation(CREATE_DOCUMENT);\r\n  const [updateDocument, { error: updateError }] = useMutation(UPDATE_DOCUMENT);\r\n\r\n  const [files, setFiles] = useState<File[]>([]);\r\n  const [referrals, setReferrals] = useState<number[]>([]);\r\n  const [deadline, setDeadline] = useState<Dayjs>(dayjs(new Date()));\r\n  const [disableDeadline, setDisableDeadline] = useState(false);\r\n  const [formData, setFormData] = useState<DocumentForm>(formDefaults);\r\n  const [officers, setOfficers] = useState<\r\n    { uuid: string; firstName: string; lastName: string; position?: string }[]\r\n  >([]);\r\n  const [error, setError] = useState<string>();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [assigned, setAssigned] = useState<\r\n    {\r\n      id: string;\r\n      label: string;\r\n      description: string | undefined;\r\n    }[]\r\n  >([]);\r\n\r\n  const {\r\n    subject,\r\n    description,\r\n    receivedFrom,\r\n    typeId,\r\n    purposeIds,\r\n    statusId,\r\n    signatureId,\r\n    tag,\r\n  } = formData;\r\n\r\n  useEffect(() => {\r\n    if (referenceNum) {\r\n      getDocumentById({ variables: { referenceNum, officerId } }).then(\r\n        ({ data }) => {\r\n          if (data) {\r\n            setFormData({\r\n              subject: data.getDocumentById.subject,\r\n              description: data.getDocumentById.description,\r\n              receivedFrom: data.getDocumentById.receivedFrom,\r\n              typeId: data.getDocumentById.type\r\n                ? data.getDocumentById.type.id.toString()\r\n                : \"\",\r\n              purposeIds: data.getDocumentById.purpose\r\n                ? data.getDocumentById.purpose.map((p) => p.id).join(\",\")\r\n                : \"\",\r\n              tag: data.getDocumentById.tag ? data.getDocumentById.tag : \"\",\r\n              signatureId: data.getDocumentById.signatory.uuid,\r\n              statusId: \"\",\r\n            });\r\n\r\n            if (data.getDocumentById.dateDue) {\r\n              setDeadline(dayjs(new Date(data.getDocumentById.dateDue)));\r\n            }\r\n            setReferrals(\r\n              data.getDocumentById.referredTo.map((ref) =>\r\n                parseInt(ref.office.id)\r\n              )\r\n            );\r\n            setAssigned(\r\n              data.getDocumentById.directorAssigned.map((officer) => ({\r\n                id: officer.uuid,\r\n                label: `${officer.firstName} ${officer.lastName}`,\r\n                description:\r\n                  officer.office?.name + \" / \" + officer.position?.label,\r\n              }))\r\n            );\r\n            setDisableDeadline(data.getDocumentById.dateDue ? false : true);\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      setFormData(formDefaults);\r\n      setDeadline(dayjs(new Date()));\r\n      setReferrals([]);\r\n    }\r\n  }, [referenceNum, officerId, getDocumentById]);\r\n\r\n  useEffect(() => {\r\n    if (referrals.length > 0) {\r\n      getOfficers({\r\n        variables: {\r\n          officeId: referrals,\r\n        },\r\n      })\r\n        .then(({ data }) => {\r\n          if (data) {\r\n            setOfficers(\r\n              data.getOfficers.map((officer) => ({\r\n                uuid: officer.uuid,\r\n                firstName: officer.firstName,\r\n                lastName: officer.lastName,\r\n                position:\r\n                  officer.office?.name + \" / \" + officer.position?.label,\r\n              }))\r\n            );\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }, [referrals, getOfficers]);\r\n\r\n  const handleReferralsChange = (selected: number[]) => {\r\n    setReferrals(selected);\r\n  };\r\n\r\n  const handleAssignedChange = (selected: any[]) => {\r\n    setAssigned(selected);\r\n  };\r\n\r\n  const handlePurposeChange = (selected: string[]) => {\r\n    setFormData({\r\n      ...formData,\r\n      purposeIds: selected.filter((p) => p !== \"\").join(\",\"),\r\n    });\r\n  };\r\n\r\n  const handleDeadlineChange = (newValue: Dayjs | null) => {\r\n    if (!newValue) return;\r\n    setDeadline(newValue);\r\n  };\r\n\r\n  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleEnableChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setDisableDeadline(event.target.checked);\r\n  };\r\n\r\n  const handleFilesChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const fileList = event.target.files;\r\n    if (fileList) {\r\n      setFiles((previous) => previous.concat(convertFileListToArray(fileList)));\r\n    }\r\n  };\r\n\r\n  const handleDeleteFile = (fileName: string) => {\r\n    setFiles((previous) => previous.filter((file) => file.name !== fileName));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    setLoading(true);\r\n\r\n    // upload files\r\n    let uploadedFiles: MessageFiles[] = [];\r\n    if (files.length > 0) {\r\n      try {\r\n        const form = new FormData();\r\n        files.forEach((file) => {\r\n          form.append(\"files\", file);\r\n        });\r\n\r\n        const result = await axios.post(\r\n          process.env.REACT_APP_UPLOAD_URL as string,\r\n          form\r\n        );\r\n        uploadedFiles = result.data.files;\r\n      } catch (err) {\r\n        setError(\"Faled to upload files. Please make sure that files are less than 80MB.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (referenceNum) {\r\n      await updateDocument({\r\n        variables: {\r\n          referenceNum: referenceNum,\r\n          subject,\r\n          purposeIds,\r\n          description,\r\n          receivedFrom,\r\n          typeId: parseInt(typeId),\r\n          signatureId: signatureId,\r\n          tag: tag.length === 0 ? null : (tag as Tags),\r\n          dateDue: disableDeadline ? null : deadline.toISOString(),\r\n          assignedTo: assigned.map((officer) => officer.id),\r\n          files:\r\n            uploadedFiles.length > 0\r\n              ? uploadedFiles.map((file) => file.fileUrl).join(\";\")\r\n              : null,\r\n        },\r\n      });\r\n    } else {\r\n      const referredTo = referrals;\r\n\r\n      // include BIN office if there are outsourced officers\r\n      if (\r\n        referredTo.length === 0 &&\r\n        assigned.filter((officer) => officer.id.includes(\"Add\")).length > 0\r\n      ) {\r\n        referredTo.push(BIN_OFFICE);\r\n      }\r\n\r\n      await createDocument({\r\n        variables: {\r\n          subject,\r\n          description,\r\n          purposeIds,\r\n          receivedFrom,\r\n          typeId: parseInt(typeId),\r\n          signatureId: signatureId,\r\n          tag: tag.length === 0 ? null : (tag as Tags),\r\n          referredTo: referredTo.map((office) => ({\r\n            officeId: office,\r\n            statusId: parseInt(statusId),\r\n          })),\r\n          dateDue: disableDeadline ? null : deadline.toISOString(),\r\n          assignedTo: assigned.map((officer) => officer.id),\r\n          files:\r\n            uploadedFiles.length > 0\r\n              ? uploadedFiles.map((file) => file.fileUrl).join(\";\")\r\n              : null,\r\n        },\r\n      });\r\n    }\r\n\r\n    // clear form data\r\n    setFormData(formDefaults);\r\n    setDeadline(dayjs(new Date()));\r\n    setReferrals([]);\r\n    setLoading(false);\r\n\r\n    await refetch(); // get new reference number\r\n    onClose(); // close dialog\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                {reference && (\r\n                  <Typography variant=\"h6\">\r\n                    {`#${\r\n                      referenceNum\r\n                        ? referenceNum\r\n                        : reference.getTempReferenceNum\r\n                    }`}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12} md={8}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      name=\"subject\"\r\n                      label=\"Subject\"\r\n                      variant=\"outlined\"\r\n                      value={subject}\r\n                      onChange={handleFormChange}\r\n                      multiline\r\n                      rows={referenceNum ? 5 : 4}\r\n                      fullWidth\r\n                      required\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      label=\"Remarks\"\r\n                      name=\"description\"\r\n                      variant=\"outlined\"\r\n                      value={description}\r\n                      onChange={handleFormChange}\r\n                      multiline\r\n                      rows={referenceNum ? 4 : 3}\r\n                      fullWidth\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <Tooltip title=\"Insert File\">\r\n                              <IconButton component=\"label\">\r\n                                <Iconify icon=\"material-symbols:attach-file-add-rounded\" />\r\n\r\n                                <input\r\n                                  type=\"file\"\r\n                                  multiple\r\n                                  hidden\r\n                                  onChange={handleFilesChange}\r\n                                />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                    <Box\r\n                      sx={{\r\n                        pt: 1,\r\n                        maxWidth: \"100%\",\r\n                        overflow: \"auto\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"row\",\r\n                      }}\r\n                    >\r\n                      {files.map((file) => (\r\n                        <Chip\r\n                          key={file.name}\r\n                          label={file.name}\r\n                          variant=\"outlined\"\r\n                          onDelete={() => handleDeleteFile(file.name)}\r\n                          sx={{ mx: \"5px\" }}\r\n                        />\r\n                      ))}\r\n                    </Box>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      name=\"receivedFrom\"\r\n                      label=\"Received From\"\r\n                      variant=\"outlined\"\r\n                      value={receivedFrom}\r\n                      onChange={handleFormChange}\r\n                      fullWidth\r\n                      required\r\n                    />\r\n                  </Grid>\r\n\r\n                  {offices && !referenceNum && (\r\n                    <Grid item xs={12}>\r\n                      <MultiSelect\r\n                        name=\"referredTo\"\r\n                        label=\"Referred To\"\r\n                        selected={referrals}\r\n                        required={assigned.length === 0}\r\n                        options={offices.getOffices.map((office) => ({\r\n                          id: parseInt(office.id),\r\n                          label: office.name,\r\n                        }))}\r\n                        onChange={handleReferralsChange}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n\r\n                  {!referenceNum && (\r\n                    <Grid item xs={12}>\r\n                      <Autocomplete\r\n                        multiple\r\n                        options={officers.map((officer) => ({\r\n                          id: officer.uuid,\r\n                          label: `${officer.firstName} ${officer.lastName}`,\r\n                          description: officer.position,\r\n                        }))}\r\n                        value={assigned}\r\n                        onChange={(_, newValue) => {\r\n                          const outsourced = newValue.filter(\r\n                            (obj) =>\r\n                              obj.id.includes(\"Add\") &&\r\n                              !officers.find(\r\n                                (officer) => officer.uuid === obj.id\r\n                              )\r\n                          );\r\n                          if (outsourced.length > 0) {\r\n                            setOfficers([\r\n                              ...officers,\r\n                              ...outsourced.map((obj) => ({\r\n                                uuid: obj.id,\r\n                                firstName: obj.label.split(\" \", 2)[0],\r\n                                lastName: obj.label.split(\" \", 2)[1],\r\n                                position: \"\",\r\n                              })),\r\n                            ]);\r\n                          }\r\n\r\n                          handleAssignedChange(newValue);\r\n                        }}\r\n                        getOptionKey={(option) => option.id}\r\n                        getOptionLabel={(option) => option.label}\r\n                        isOptionEqualToValue={(option, value) => {\r\n                          return option.id === value.id;\r\n                        }}\r\n                        filterOptions={(options, params) => {\r\n                          const filtered = filter(options, params);\r\n\r\n                          if (params.inputValue !== \"\") {\r\n                            filtered.push({\r\n                              id: `Add ${params.inputValue}`,\r\n                              label: `\"${params.inputValue}\"`,\r\n                              description: \"\",\r\n                            });\r\n                          }\r\n\r\n                          return filtered;\r\n                        }}\r\n                        renderOption={(props, option) => (\r\n                          <Box component=\"li\" {...props}>\r\n                            <Box\r\n                              component=\"div\"\r\n                              sx={{ display: \"flex\", flexDirection: \"column\" }}\r\n                            >\r\n                              <Typography variant=\"body1\">\r\n                                {option.label}\r\n                              </Typography>\r\n                              <Typography\r\n                                variant=\"caption\"\r\n                                color=\"textSecondary\"\r\n                              >\r\n                                {option.description}\r\n                              </Typography>\r\n                            </Box>\r\n                          </Box>\r\n                        )}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            variant=\"outlined\"\r\n                            label=\"Assigned To\"\r\n                          />\r\n                        )}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={4}>\r\n                <Stack spacing={2}>\r\n                  {types && (\r\n                    <TextField\r\n                      name=\"typeId\"\r\n                      select\r\n                      label=\"Document Type\"\r\n                      value={typeId}\r\n                      onChange={handleFormChange}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                    >\r\n                      {types.getDocumentTypes.map((option) => (\r\n                        <MenuItem key={option.id} value={option.id}>\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  )}\r\n\r\n                  {purposes && (\r\n                    <MultiSelect\r\n                      name=\"purposeIds\"\r\n                      label=\"Document Purpose\"\r\n                      required={true}\r\n                      selected={purposeIds.split(\",\").filter((p) => p !== \"\")}\r\n                      options={purposes.getDocumentPurposes.map((purpose) => ({\r\n                        id: purpose.id,\r\n                        label: purpose.label,\r\n                      }))}\r\n                      onChange={handlePurposeChange}\r\n                    />\r\n                  )}\r\n\r\n                  {statuses && !referenceNum && (\r\n                    <TextField\r\n                      name=\"statusId\"\r\n                      select\r\n                      label=\"Document Status\"\r\n                      value={statusId}\r\n                      onChange={handleFormChange}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                    >\r\n                      {statuses.getDocumentStatus\r\n                        .filter(\r\n                          (status) =>\r\n                            status.category === Status.Referred ||\r\n                            status.category === Status.NotActionable ||\r\n                            status.category === Status.ForReview || \r\n                            status.category === Status.ForRevision || \r\n                            status.category === Status.UpdateReport ||\r\n                            referenceNum\r\n                        )\r\n                        .map((option) => (\r\n                          <MenuItem key={option.id} value={option.id}>\r\n                            {option.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                  )}\r\n\r\n                  <TextField\r\n                    name=\"tag\"\r\n                    select\r\n                    label=\"Document Tag\"\r\n                    variant=\"outlined\"\r\n                    value={tag}\r\n                    onChange={handleFormChange}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"\">None</MenuItem>\r\n                    <MenuItem value=\"CONFIDENTIAL\">Confidential</MenuItem>\r\n                    <MenuItem value=\"TOP_PRIORITY\">Top Priority</MenuItem>\r\n                    <MenuItem value=\"FOLLOW_UP\">Follow Up</MenuItem>\r\n                  </TextField>\r\n\r\n                  <Stack>\r\n                    <DatePicker\r\n                      label=\"Deadline\"\r\n                      value={deadline}\r\n                      disable={disableDeadline}\r\n                      onChange={handleDeadlineChange}\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={disableDeadline}\r\n                          onChange={handleEnableChange}\r\n                        />\r\n                      }\r\n                      label=\"No Deadline\"\r\n                    />\r\n                  </Stack>\r\n\r\n                  {signatories && (\r\n                    <TextField\r\n                      name=\"signatureId\"\r\n                      select\r\n                      label=\"Signatory\"\r\n                      value={signatureId}\r\n                      onChange={handleFormChange}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                    >\r\n                      {signatories.getSignatories.map((option) => (\r\n                        <MenuItem key={option.uuid} value={option.uuid}>\r\n                          <Stack\r\n                            direction=\"row\"\r\n                            alignItems=\"center\"\r\n                            spacing={2}\r\n                          >\r\n                            <Avatar alt={option.lastName} src={option.avatar} />\r\n                            <Typography variant=\"subtitle2\" noWrap>\r\n                              {`${option.firstName} ${option.lastName}`}\r\n                            </Typography>\r\n                          </Stack>\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  )}\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Stack direction=\"row\" spacing={2}>\r\n              <Button onClick={onClose} color=\"inherit\">\r\n                Cancel\r\n              </Button>\r\n              <LoadingButton loading={loading} variant=\"contained\" color=\"inherit\" type=\"submit\">\r\n                Save\r\n              </LoadingButton>\r\n            </Stack>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n      <Snackbar\r\n        severity=\"error\"\r\n        message={\r\n          error ||\r\n          officeError?.message ||\r\n          purposeError?.message ||\r\n          createError?.message ||\r\n          updateError?.message ||\r\n          statusError?.message ||\r\n          typesError?.message ||\r\n          referenceError?.message ||\r\n          getError?.message ||\r\n          signatoryError?.message ||\r\n          officersError?.message\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"names":["formDefaults","subject","description","receivedFrom","typeId","purposeIds","statusId","signatureId","tag","BIN_OFFICE","filter","createFilterOptions","FormDialog","_ref","referenceNum","officerId","open","onClose","data","offices","error","officeError","useQuery","GET_OFFICES","fetchPolicy","purposes","purposeError","GET_PURPOSES","statuses","statusError","GET_STATUSES","types","typesError","GET_TYPES","signatories","signatoryError","GET_SIGNATORIES","reference","referenceError","refetch","GET_TEMP_REF_NUM","getDocumentById","getError","useLazyQuery","GET_DOCUMENT_BY_ID","getOfficers","officersError","GET_OFFICERS","createDocument","createError","useMutation","CREATE_DOCUMENT","updateDocument","updateError","UPDATE_DOCUMENT","files","setFiles","useState","referrals","setReferrals","deadline","setDeadline","dayjs","Date","disableDeadline","setDisableDeadline","formData","setFormData","officers","setOfficers","setError","loading","setLoading","assigned","setAssigned","useEffect","variables","then","_ref2","type","id","toString","purpose","map","p","join","signatory","uuid","dateDue","referredTo","ref","parseInt","office","directorAssigned","officer","_officer$office","_officer$position","label","firstName","lastName","name","position","length","officeId","_ref3","_officer$office2","_officer$position2","catch","console","log","handleFormChange","e","target","value","_jsxs","_Fragment","children","_jsx","Dialog","maxWidth","fullWidth","onSubmit","async","preventDefault","uploadedFiles","form","FormData","forEach","file","append","axios","post","process","err","toISOString","assignedTo","fileUrl","includes","push","DialogContent","Grid","container","spacing","item","xs","Typography","variant","getTempReferenceNum","sm","md","TextField","onChange","multiline","rows","required","InputProps","endAdornment","InputAdornment","Tooltip","title","IconButton","component","Iconify","icon","multiple","hidden","event","fileList","previous","concat","filesArray","i","convertFileListToArray","Box","sx","pt","overflow","display","flexDirection","Chip","onDelete","handleDeleteFile","fileName","mx","MultiSelect","selected","options","getOffices","Autocomplete","_","newValue","outsourced","obj","find","split","getOptionKey","option","getOptionLabel","isOptionEqualToValue","filterOptions","params","filtered","inputValue","renderOption","props","color","renderInput","Stack","select","getDocumentTypes","MenuItem","getDocumentPurposes","getDocumentStatus","status","category","Status","Referred","NotActionable","ForReview","ForRevision","UpdateReport","DatePicker","disable","FormControlLabel","control","Checkbox","checked","getSignatories","direction","alignItems","Avatar","alt","src","avatar","noWrap","DialogActions","Button","onClick","LoadingButton","Snackbar","severity","message"],"sourceRoot":""}