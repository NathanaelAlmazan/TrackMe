// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Offices {
  id          BigInt        @id @default(autoincrement())
  name        String        @db.VarChar(100)
  officers    Officers[]
  referrals   Referrals[]
  reports     SubmittedReports[]
  events      EventScope[]
}

enum Role {
  OFFICER
  CHIEF
  DIRECTOR
  SUPERUSER
  HR_ADMIN
}

model Positions {
  id          BigInt        @id @default(autoincrement())
  label       String        @db.VarChar(50)
  role        Role
  officers    Officers[]
}

model Officers {
  uuid        String        @id @db.Uuid @default(uuid())
  firstName   String        @db.VarChar(50)
  lastName    String        @db.VarChar(50)
  positionId  BigInt?
  officeId    BigInt?
  email       String?       @db.VarChar(50) @unique
  phone       String?       @db.VarChar(10) @unique
  password    String?       @db.Text
  signature   String?       @db.Text
  active      Boolean       @default(false)
  verified    Boolean       @default(false)
  device      String?       @db.Text
  code        String?       @db.VarChar(8)
  avatar      String        @db.Text @default("/assets/images/avatars/avatar_30.jpg")
  position    Positions?    @relation(fields: [positionId], references: [id], onDelete: SetNull)
  office      Offices?      @relation(fields: [officeId], references: [id], onDelete: SetNull)
  signed      Documents[]
  assigned    Assigned[]

  @@unique([firstName, lastName])
}

enum Status {
  REFERRED
  ASSIGNED
  PROCESSED
  SUBMITTED
  FINISHED
  NOT_ACTIONABLE
  FOR_APPROVAL
  FOR_REVIEW
  FOR_CORRECTION
  FOR_REVISION
  UPDATE_REPORT
}

model DocumentStatus {
  id          BigInt        @id @default(autoincrement())
  label       String        @db.VarChar(50)
  category    Status
  documents   Referrals[]
}

model DocumentTypes {
  id            BigInt      @id @default(autoincrement())
  label         String      @db.VarChar(100)
  documents     Documents[]
}

model DocumentPurpose {
  id            BigInt      @id @default(autoincrement())
  label         String      @db.VarChar(100)
}

model Documents {
  referenceNum      String             @id @db.VarChar(50)
  subject           String             @db.Text
  description       String             @db.Text
  receivedFrom      String             @db.VarChar(100)
  typeId            BigInt?
  purposeIds        String             @db.VarChar(50) @default("4")
  signatureId       String?            @db.Uuid
  dateCreated       DateTime           @db.Timestamp(3) @default(now())
  dateDue           DateTime?
  tag               String?            @db.VarChar(20)
  files             String?            @db.Text
  type              DocumentTypes?     @relation(fields: [typeId], references: [id], onDelete: SetNull)
  signatory         Officers?          @relation(fields: [signatureId], references: [uuid], onDelete: SetNull)
  referrals         Referrals[]
  assigned          Assigned[]
  comments          Comments[]
}

model Referrals {
  officeId          BigInt
  documentId        String             @db.VarChar(50)
  statusId          BigInt?
  document          Documents          @relation(fields: [documentId], references: [referenceNum], onDelete: Cascade)
  status            DocumentStatus?    @relation(fields: [statusId], references: [id], onDelete: SetNull)
  office            Offices            @relation(fields: [officeId], references: [id], onDelete: Cascade)

  @@id([officeId, documentId])
}

enum Assignment {
  APPROVER
  MEMBER
}

model Assigned {
  officerId         String             @db.Uuid
  documentId        String             @db.VarChar(50)
  assignment        Assignment         @default(MEMBER)
  assignee          Role               @default(CHIEF)
  officer           Officers           @relation(fields: [officerId], references: [uuid], onDelete: Cascade)
  document          Documents          @relation(fields: [documentId], references: [referenceNum], onDelete: Cascade)

  @@id([officerId, documentId, assignee])
}

model Comments {
  id               BigInt             @id @default(autoincrement())
  documentId       String             @db.VarChar(50)
  sender           String             @db.Uuid
  recipient        String             @db.Uuid
  message          String             @db.Text
  dateCreated      DateTime           @db.Timestamp(3) @default(now())
  document         Documents          @relation(fields: [documentId], references: [referenceNum], onDelete: Cascade)
}

enum Frequency {
  NONE
  MONTHLY
  QUARTERLY
  SEMESTRAL
  YEARLY
}

model Events {
  id            BigInt      @id @default(autoincrement())   
  subject       String      @db.Text
  description   String      @db.Text
  image         String?     @db.Text
  date          DateTime
  frequency     Frequency
  scope         EventScope[]
}

model EventScope {
  eventId       BigInt
  officeId      BigInt
  dateCreated   DateTime    @db.Timestamp(3) @default(now())
  event         Events      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  office        Offices     @relation(fields: [officeId], references: [id], onDelete: Cascade)

  @@id([eventId, officeId])
}

enum ReportType {
  HR
  ADMIN
}

model Reports {
  id            BigInt      @id @default(autoincrement())   
  name          String      @db.Text
  basis         String      @db.Text
  localDue      DateTime  
  nationalDue   DateTime
  type          ReportType  @default(HR)
  frequency     Frequency
  submitted     SubmittedReports[]
}

model SubmittedReports {
  id            BigInt      @id @default(autoincrement())
  reportId      BigInt
  officeId      BigInt
  dateCreated   DateTime    @db.Timestamp(3) @default(now())
  localDue      DateTime
  nationalDue   DateTime
  message       String?     @db.Text
  files         String?     @db.Text
  status        Status
  report        Reports     @relation(fields: [reportId], references: [id], onDelete: Cascade)    
  office        Offices     @relation(fields: [officeId], references: [id], onDelete: Cascade)
}